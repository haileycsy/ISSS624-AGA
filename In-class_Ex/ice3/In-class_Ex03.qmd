---
title: "In-class Ex 3"
date: "Published on December 2 2023"
date-modified: "Last updated on `r format(Sys.time(), '%B %d %Y')`"
format:
  html:
    code-fold: false
    code-summary: "code block"
    toc-title: Contents
    number-sections: true
execute: 
  warning: false
---

<font size = "5">**Spatial Interaction Models**</font>

**Spatial Interaction Models (SIMs)** are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).

There are four main types of traditional SIMs (Wilson 1971):

-   Unconstrained
-   Production-constrained
-   Attraction-constrained
-   Doubly-constrained


Calibrating Flows:

Ordinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. This exercise will focus on using appropriate R packages to calibrate SIMs by using the four regression methods.  


# Loading R packages

-   **performance** for Assessment, Comparison and Testing of Statistical Models
-   **reshape2** for handling matrix dataframes
-   **ggpubr** for composing multiplots

```{r}
pacman::p_load(tmap, sf, sp, DT,
               performance, reshape2,
               ggpubr, tidyverse, ggplot2, ggstatsplot, urbnthemes)
```

# Importing the Data

The following data files will be used for the study: 

-   **od_data.rds:** weekday morning peak passenger flows at planning subzone level
-   **mpsz.rds:** URA Master Plan 2019 Planning Subzone boundary 


## mpsz

::: panel-tabset

## Import RDS

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```  

## Converting from sf data.table to SpatialPolygonsDataFrame

`as_Spatial()` will be used to convert **mpsz** from sf tibble data frame to a SpatialPolygonsDataFrame (sp object)

```{r}
mpsz_sp <- mpsz %>%
  as_Spatial()

mpsz_sp
```   

:::

# Computing the distance matrix

## Creating distance matrix frame

`spDists()` of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.

Centroids of each planning subzones are used as points of origin and destination for easy calculations. 

```{r}
dist <- spDists(mpsz_sp, 
                # df is already polygon, so set longlat as FALSE
                longlat = FALSE)
```

```{r}
head(dist, n=c(10, 10))
```

The resultant **distance matrix** shows the relative distances between each subzone centroid. 


## Labelling column and row headers

::: panel-tabset

## Sort by sub-zone code

We first create a list, **sz_names**, sorted according to the the distance matrix by planning sub-zone code:

```{r}
sz_names <- mpsz$SUBZONE_C
```


## Attach Subzone names

Next, we assign **SUBZONE_C** to rows and columns for distance matrix matching

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

```{r}
head(dist, n=c(10, 10))
```  
The resultant distance matrix now has planning subzone code as row and column labels. 

:::

To plot the flows, we need a tibble form of the distance matrix to show the attributes of each trip (origin-destination). 

## Dealing with 0-value intra-zonal distances

The diagonals of the distance matrix are 0, and represent intra-zonal distances. We append a constant value to replace the intra-zonal distance of 0.

::: panel-tabset

## Pivot by SUBZONE_C

`melt()` converts the matrix into a long dataframe, where each row reprsents a flow (origin-destination) pair

```{r}
distPair <- melt(dist) %>%
  rename(dist = value,
         orig = Var1,
         dest = Var2
)

head(distPair, 10)
```

## Find minimum distance 

select and find out the minimum value of the distance by using `summary()`

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

The minimum distance recorded is 173.8

## Assign constant as intra-zonal distance

Next, a constant distance value of 50m is assigned to intra-zonal distance (less that minimum inter-zonal distance of 173.8)


```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
summary(distPair)
```  

The minimum distance recorded is 50, our intra-zonal distance.

:::

# Preparing the Flow~ data

::: panel-tabset

## import od_data

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```  

## compute the total passenger trips

We compute the total passenger trip between and within planning subzones by using the code chunk below:

```{r}
flow_data <- od_data %>%
  rename(TRIPS = MORNING_PEAK)
```  

```{r}
head(flow_data, 10)
```  
  
## Separate intra-flow from passenger volume df  

We add 2 new fields into the **flow_data** dataframe, 

-   **FlowNoIntra** to keep intra-subzone number of trips as 0
-   **offset** separated by intra-subzone flows
  
```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)

flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)
```

## Combining passenger volume data with distance value

Before we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.

```{r}
flow_data <- flow_data %>%
  mutate(
    ORIGIN_SZ = as.factor(ORIGIN_SZ),
    DESTIN_SZ = as.factor(DESTIN_SZ)
  )
```

Now, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

:::

#  Preparing Origin and Destination Attributes

::: panel-tabset

## Importing population data

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```  

## Adding geospatial attributes

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

## Preparing origin attributes

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")
  ) %>%
  rename(
    ORIGIN_AGE7_12 = AGE7_12,
    ORIGIN_AGE13_24 = AGE13_24,
    ORIGIN_AGE25_64 = AGE25_64
  ) %>%
  select(-c(PA, SZ_NAME))
```


## Preparing destination attribute

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")
  ) %>%
  rename(
    DESTIN_AGE7_12 = AGE7_12,
    DESTIN_AGE13_24 = AGE13_24,
    DESTIN_AGE25_64 = AGE25_64
  ) %>%
  select(-c(PA, SZ_NAME))
```

## Save output as RDS file

```{r}
write_rds(flow_data1, "data/rds/SIM_data2")
```

:::


# Visualizing the dependent attributes

## What is the distribution of trips?

```{r}
set_urbn_defaults(style = "print")

ggplot(data = flow_data1,
       aes(x = TRIPS)) +
  geom_histogram()

```

The distribution is highly right-skewed.

## What is the correlation between distance and number of trips?

Next, we visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model -- distance:

```{r}
ggplot(data = flow_data1,
       aes(x = dist,
           y = TRIPS)) +
  geom_point(
    size = .5
  ) +
  geom_smooth(method = lm)

```

ggscatterstats(
    data = flow_data1, ## data frame from which variables are taken
    x = dist, ## predictor/independent variable
    y = TRIPS, ## dependent variable
    xlab = "Distance (m)", 
    ylab = "No. of Trips",
    title = "Relationship between Distance and No. of Trips"
  )

Notice that their relationship hardly resemble linear relationship.

On the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.

```{r}
ggplot(data = flow_data1,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point(
    size = .5
  ) +
  geom_smooth(method = lm)
```


