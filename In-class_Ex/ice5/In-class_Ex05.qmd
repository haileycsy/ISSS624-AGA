---
title: "In-class Ex 5"
date: "Published on December 16 2023"
date-modified: "Last updated on `r format(Sys.time(), '%B %d %Y')`"
format:
  html:
    code-fold: false
    code-summary: "code block"
    toc-title: Contents
    number-sections: true
execute: 
  warning: false
---

<font size = "5">**Spatial Econometrics**</font>

# Loading R Packages

A key package used is **spflow**, which allows us to estimate **spatial econometric models**, designed to exploit the relational structure of *~~flow data*

```{r}
#| eval: false
devtools::install_github("LukeCe/spflow")
```


```{r}
options(repos = c(CRAN = "https://cran.rstudio.com/"))

pacman::p_load(tmap, sf, spdep, sp, Matrix,
               spflow, knitr, tidyverse)
```


# Importing the data

To use the functions in **spflow** package, we need the following R data types:  

-   Spatial weights
-   O-D flow data as a tibble dataframe 
-   Explanatory variables as a tibble dataframe

::: panel-tabset 

## **Building the geographical area base**

```{r}
#| eval: false
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
#| eval: false
busstop <- st_read(dsn = "data/geospatial",
                layer = "BusStop") %>%
  st_transform(crs = 3414)
```

## Select only subzones with busstops

```{r}
#| eval: false
mpsz_busstop <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```


:::

Spatial weights

Calculate centroid of each zubzone area

```{r}
#| eval: false
centroids <- suppressWarnings({
  st_point_on_surface(st_geometry(mpsz_busstop))
})
```

Create a list of the following spatial weights metrics:

-   contiguity weights
-   distance-based weights
-   k-nearest neighbours

```{r}
#| eval: false
mpsz_nb <- list(
  "by_contiguity" = ploy2nb(mpsz_busstop),
  "by_distance" = dnearneigh(centroids,
                             d1 = 0,
                             d2 = 5000),
  "by_knn" = knn2nb(knearneigh(centroids, 3))
)
```

# Retrieving prepared dataframes

```{r}
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```

# Creating **spflow network class** data

This combines neighbourhood links and flow data

```{r}
mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = 
    nb2mat(mpsz_nb$by_contiguity),
    node_data = mpsz_var,
    node_key_column = "SZ_CODE"
)
```

```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ"
)

mpsz_net_pairs
```


```{r}
mpsz_multi_net <- spflow_network_multi(mpsz_net,
                                       mpsz_net_pairs)

mpsz_multi_net
```


## Correlation Analysis

```{r}
#| fig-height: 8
#| fig-width: 8
cor_formula <- log(1 + TRIPS) ~
  BUSSTOP_COUNT +
  AGE7_12 +
  AGE13_24 +
  AGE25_64 +
  SCHOOL_COUNT +
  BUSINESS_COUNT +
  RETAILS_COUNT +
  FINSERV_COUNT +
  # P = impedence
  P_(log(DISTANCE +1))

cor_mat <- pair_cor(
  mpsz_multi_net,
  spflow_formula = cor_formula,
  add_lags_x = FALSE)

# creating labels for variables
colnames(cor_mat) <- paste0(
  substr(
    colnames(cor_mat), 1, 3), "...")

# parse to construct correlation matrix
cor_image(cor_mat)
```  

# Model Callibration

There are 3 key model callibrations available:

-   Maximum Likelihood Estimation (MLE)
-   Spatial Two-stage Least Squares (S2SLS)
-   Bayesian Markov Chain Monte Carlo (MCMC)


## Base Model based on **MLE**

```{r}
base_model <- spflow(
  spflow_formula = log(1 + TRIPS) ~
    # origin
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    # destination
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE +1)),
  spflow_networks = mpsz_multi_net
)

base_model
```

Overall Model results show that:

> R2_corr: 0.6942941

The model is able to account for ~69% of variations


The model results also reveal statistics and spatial lag statistics for each explanatory variable. For instance, 

> D_SCHOOL_COUNT	p-value = 0.000 

> D_SCHOOL_COUNT.lag1	p-value =	0.581

The above statistics reveal that school count within a zone is statistically significant, but the **spatial lag** variable has p-value > 0.05, which means that neighbouting areas' school count does not contribute to the overall 'attractiveness' of the area. 



