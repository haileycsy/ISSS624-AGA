---
title: "In-class Ex 4"
date: "Published on December 9 2023"
date-modified: "Last updated on `r format(Sys.time(), '%B %d %Y')`"
format:
  html:
    code-fold: false
    code-summary: "code block"
    toc-title: Contents
    number-sections: true
execute: 
  warning: false
---

# Installing R packages

```{r}
pacman::p_load(tidyverse, sf, httr, tmap, performance, ggpubr)
```

# Loading and geocoding *Generalinformationofschools*

```{r}
#| eval: false
url <- "https://www.onemap.gov.sg/api/common/elastic/search"

csv <- read_csv("data/aspatial/Generalinformationofschools.csv")
postcodes <- csv$postal_code

found <- data.frame()
not_found <- data.frame()

for(postcode in postcodes){
  query <- list(searchVal = postcode,
                'returnGeom' = 'Y',
                'getAddrDetails' = 'Y',
                'pageNum' = '1')
  
  res <- GET(url, query = query)
  
  if((content(res)$found)!=0) {
    found <- rbind(found, data.frame(content(res))[4:13])
  } else{
    not_found = data.frame(postcode)
  }
}
```

Next, we combine *found* and *not_found* dataframes into a csv file for future use.

```{r}
#| eval: false
merged <- merge(csv, found, 
                by.x = "postal_code",
                by.y = "results.POSTAL",
                all = TRUE)

write_csv(merged, file = "data/aspatial/schools.csv")
write_csv(not_found, file = "data/aspatial/not_found.csv")
```

According to **not_found**, the missing location data belongs to Postcode 677741, Zhenhua Secondary School. This is manually added into the **schools.csv** file.

## Reimporting **schools** into R environment

```{r}
schools <- read_csv("data/aspatial/schools.csv")
```

```{r}
schools <- schools %>%
  rename(
    latitude = results.LATITUDE,
    longitude = results.LONGITUDE
  ) %>%
  select(
    postal_code,
    school_name,
    latitude,
    longitude
  )
```

## Converting into **sf** dataframe:

```{r}
schools_sf <- st_as_sf(schools,
                       coords = c("longitude", "latitude"),
   # geocoding returns long & lat data projected in WGS84 form, with CRS 4326
   # This portion is required for st_as_sf to parse the lon/lat information
                       crs = 4326) %>%
              st_transform(crs = 3414)

schools_sf
```

```{r}
tmap_mode("plot")

tm_shape(schools_sf) +
  tm_dots() +
  tm_view(set.zoom.limits = c(11,14))
```

## Importing **Planning Subzone** geospatial layer

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
          st_transform(crs = 3414)
```

Use `st_within()` or `st_intersects()` to get number of schools per planning subzone

```{r}
mpsz$SCHOOL_COUNT <- lengths(
  st_intersects(
    mpsz, schools_sf))
```

```{r}
business <- st_read(dsn = "data/geospatial",
                    layer = "Business") %>%
          st_transform(crs = 3414)
```

```{r}
tmap_mode("plot")

tmap_options(check.and.fix = TRUE)
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(business) +
  tm_dots()
```  



# Model Calibration for attractiveness

```{r}
flow_data <- read_rds("data/rds/flow_data_tidy.rds")

glimpse(flow_data)
```

```{r}
flow_data$FlowNoIntra <- ifelse( flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$MORNING_PEAK)

flow_data$offset <- ifelse( flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001, 1)

inter_zonal_flow <- flow_data %>% filter(FlowNoIntra >0)

inter_zonal_flow <- inter_zonal_flow %>% rename(TRIPS = MORNING_PEAK, DIST = dist)
```

## fit an origin constrained SIM by using the following code:

*Note: DIST will be negative (inverse relationship between further  distance and attractiveness)*

```{r}
orcSIM_Poisson <- glm(formula = TRIPS ~ ORIGIN_SZ 
                      + log(SCHOOL_COUNT) 
                      + log(RETAIL_COUNT) 
                      + log(DIST) -1, 
                      family = poisson(link = "log"), 
                      data = inter_zonal_flow, na.action = na.exclude)
```

```{r}
summary(orcSIM_Poisson)
```

-   Look at the last three lines to interpret how important each factor is in terms of attractiveness.

## Create function to calculate R-squared value

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

## Calculate R-squared value of the model

```{r}
CalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)
```

Use RMSE, one of the two main performance indicators for a regression model. It measures the average difference between values predicted by a model and the actual values. It provides an estimation of how well the model is able to predict the target value (accuracy).

The lower the value of the Root Mean Squared Error, the better the model is. A perfect model (a hypothetic model that would always predict the exact expected value) would have a Root Mean Squared Error value of 0.

```{r}
performance_rmse(orcSIM_Poisson, normalized = FALSE)
```

