---
title: "Hands-on Ex 3"
date: "Published on December 2 2023"
date-modified: "Last updated on `r format(Sys.time(), '%B %d %Y')`"
format:
  html:
    code-fold: false
    code-summary: "code block"
    toc-title: Contents
    number-sections: true
execute: 
  warning: false
---

<font size = "5">**Spatial Interaction: Processing and Visualising Flow Data**</font>

# What is Spatial Interaction?

Spatial interaction represents the flow of people, materials, or information between locations in geographical space. Each spatial interaction is composed of a discrete origin->destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an **origin/destination matrix**, or a **spatial interaction matrix**.


# Loading the Packages

For the purpose of this exercise, four r packages will be used. They are:

-   sf for importing, integrating, processing and transforming geospatial data
-   tidyverse for importing, integrating, wrangling and visualising data
-   tmap for creating thematic maps
-   DT for interactive dataframe styling

```{r}
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```


# Loading Aspatial Data

The dataset used is *Passenger Volume by Origin Bus Stop* from LTA Datamall. The data extracted is from September 2023. 

```{r}
odbus09 <- read_csv("data/aspatial/origin_destination_bus_202309.csv")

glimpse(odbus09)
```
`glimpse()` reveals that the values in **ORIGIN_PT_CODE** and **DESTINATON_PT_CODE** are character data types. As these represent unique bus stops, we treat them as categorical data and cast them as `factor` type:

```{r}
odbus09 <- odbus09 %>%
  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),
         DESTINATION_PT_CODE = as.factor( DESTINATION_PT_CODE))
```


## Extracting data for study

For the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 oâ€™clock.

```{r}
odbus6_9 <- odbus09 %>%
  filter(
    DAY_TYPE == "WEEKDAY"
  ) %>%
  filter(
    TIME_PER_HOUR >= 6 &
    TIME_PER_HOUR <= 9
  ) %>%
  group_by(
    ORIGIN_PT_CODE,
    DESTINATION_PT_CODE
  ) %>%
  summarise(
    TRIPS = sum(TOTAL_TRIPS)
  ) %>%
  ungroup()

DT::datatable(head(odbus6_9, 10))
```

## Saving the dataframe as RDS

We will save the output in rds format for future usage:

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

Then, import the rds file into the R environment

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```


# Loading Geospatial Data

Two geospatial data will be used in this exercise, they are:

-   **busstop:** This data provides the location of bus stops
-   **MPSZ-2019:** This data provides the sub-zone boundary of URA Master Plan 2019

Both geospatial dataframes are transformed into the same EPSG code 3414 based on Co-ordinate Reference System (CRS)

::: panel-tabset

## **busstop** 

**busstop** is a Simple Features Dataframe (point)

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)

```

## **MPSZ 2019**

**MPSZ 2019** is a Simple Features Dataframe (Polygon)

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```  

The code chunk below writes the **mpsz** sf tibble data frame into an rds file for future use:

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```


:::


# Geospatial Data Wrangling

The following code chunk integrates the planning subzone codes (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

-   `st_intersection()` is used to perform point and polygon overly and the output will be in point sf object.
-   `select()` of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.

*Note:5 bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.*

::: panel-tabset 

## Extract bus stop numbers and subzone codes

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

## Append subzone code from busstop_mpsz dataframe to odbus6_9 dataframe

```{r}
od_data <- left_join(
    odbus6_9 , busstop_mpsz,
    by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")
  ) %>%
  rename(
    ORIGIN_BS = ORIGIN_PT_CODE,
    ORIGIN_SZ = SUBZONE_C,
    DESTIN_BS = DESTINATION_PT_CODE)
```  

## Check for duplicates

```{r}
duplicates <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()

duplicates
```

There are 1,154 duplicated rows. These are removed by retaining only unique values with the following code:

```{r}
od_data <- unique(od_data)
```


Check again to ensure that duplicates have been truly removed:

```{r}
duplicates_2 <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()

duplicates_2
```  

## Update od_data with planning subzone codes

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 

od_data <- od_data %>%
  rename(
    DESTIN_SZ = SUBZONE_C
  ) %>%
  drop_na() %>%
  group_by(
    ORIGIN_SZ, DESTIN_SZ
  ) %>%
  summarise(
    MORNING_PEAK = sum(TRIPS)
  ) %>%
  ungroup()
```  

## Save files as rds

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```


:::

# Visualising Spatial Interaction

## Removing intra-zonal flows

As we are interested in the spatial flows between different subzones, we remove those orign/destination flows within the subzones:

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

## Creating desire lines


::: {.pinbox .solve data-latex="pin"}

**Desire lines** are straight lines that represent 'origin-destination' data that records how many people travel (or could travel) between places (points or zones)  

:::  


In this code chunk, `od2line()` of **stplanr** package is used to create the desire lines:

```{r}
flowline <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

## Visualising desire lines

```{r}
tmap_options(check.and.fix = TRUE)

tmap_mode("plot")

tm_shape(mpsz) +
  tm_polygons() +
flowline %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3
  ) +
  tm_layout(
    frame = FALSE
  )
```


When the flow data is visually messy and highly skewed like the one shown above, it is wiser to focus on selected flows. 

Thus, we will focus on flows greater >= 5000:

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowline %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3
  ) +
  tm_compass(
    type="8star", size = 2
  ) +
  tm_layout(
    frame = FALSE
  ) +
  tmap_style("classic")
```

