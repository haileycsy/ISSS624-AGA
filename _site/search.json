[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "haileycsy",
    "section": "",
    "text": "gif source"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html",
    "title": "Hands-on Ex 01",
    "section": "",
    "text": "Geospatial Data Wrangling"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#different-variations-of-plot",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#different-variations-of-plot",
    "title": "Hands-on Ex 01",
    "section": "Different variations of plot()",
    "text": "Different variations of plot()\n\nsimple plot()geometry onlyspecific attribute\n\n\n\nplot(mpsz)\n\n\n\n\n\n\n\n# Plot only the geometry using st_geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"SUBZONE_C\"])"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#assigning-the-right-epsg-code-based-on-coordinate-system",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#assigning-the-right-epsg-code-based-on-coordinate-system",
    "title": "Hands-on Ex 01",
    "section": "Assigning the right EPSG code based on coordinate system",
    "text": "Assigning the right EPSG code based on coordinate system\n\nStep 1: Check EPSG CodeStep 2: st_set_crs()Step 3: Reconfirm EPSG\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe message indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nEPSG code is now 3414"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#transforming-coordinate-systems",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#transforming-coordinate-systems",
    "title": "Hands-on Ex 01",
    "section": "Transforming Coordinate Systems",
    "text": "Transforming Coordinate Systems\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\nStep 1: Check coordinate systemst_transform()Recheck coordinate system\n\n\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\npreschool dataframe is in wgs84 coordinate system.\n\n\n\npreschool3414 <- st_transform(\n   preschool, \n   crs = 3414)\n\n\n\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\nMessage reveals that the new dataframe has been transformed to svy21 projected coordinate system."
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#using-st_as_sf",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#using-st_as_sf",
    "title": "Hands-on Ex 01",
    "section": "Using st_as_sf()",
    "text": "Using st_as_sf()\n\nlistings_sf <- st_as_sf(\n   listings, \n   coords = c(\"longitude\", \"latitude\"),\n   crs=4326\n  ) %>%\n  st_transform(crs = 3414)\n\n\n\ncoords > provide the column name of the x-coordinates first then followed by the column name of the y-coordinates\ncrs > provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. This can be found at epsg.io"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#checking-for-added-geometry-variable-in-dataframe",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#checking-for-added-geometry-variable-in-dataframe",
    "title": "Hands-on Ex 01",
    "section": "Checking for added geometry variable in dataframe:",
    "text": "Checking for added geometry variable in dataframe:\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 74\n$ id                                           <dbl> 71609, 71896, 71903, 2753…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.023092e+13, 2.023092e+1…\n$ last_scraped                                 <date> 2023-09-23, 2023-09-23, …\n$ source                                       <chr> \"previous scrape\", \"previ…\n$ name                                         <chr> \"Villa in Singapore · ★4.…\n$ description                                  <chr> \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        <chr> NA, NA, \"Quiet and view o…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 367042, 367042, 367042, 1…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2011-01-29, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"Hi My name is Belinda -H…\n$ host_response_time                           <chr> \"within a few hours\", \"wi…\n$ host_response_rate                           <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          <dbl> 5, 5, 5, 52, 52, 5, 7, 52…\n$ host_total_listings_count                    <dbl> 15, 15, 15, 65, 65, 15, 8…\n$ host_verifications                           <chr> \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       <chr> \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 <chr> \"East Region\", \"East Regi…\n$ property_type                                <chr> \"Private room in villa\", …\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 private bath\", \"Shared…\n$ bedrooms                                     <dbl> NA, NA, NA, NA, NA, 3, NA…\n$ beds                                         <dbl> 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Private backyard \\\\u2…\n$ price                                        <chr> \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               <dbl> 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 28, 28, 28, 1, 30, 28, 30…\n$ availability_60                              <dbl> 58, 58, 58, 1, 60, 58, 60…\n$ availability_90                              <dbl> 88, 88, 88, 1, 90, 88, 90…\n$ availability_365                             <dbl> 89, 89, 89, 275, 274, 89,…\n$ calendar_last_scraped                        <date> 2023-09-23, 2023-09-23, …\n$ number_of_reviews                            <dbl> 20, 24, 47, 22, 17, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 3, 0, 0, 1, 3…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ first_review                                 <date> 2011-12-19, 2011-07-30, …\n$ last_review                                  <date> 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         <dbl> 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       <dbl> 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    <dbl> 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        <dbl> 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  <dbl> 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       <dbl> 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          <dbl> 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      <chr> NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             <lgl> FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               <dbl> 5, 5, 5, 52, 52, 5, 7, 52…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 1, 1, 0, 1, 1, 1…\n$ calculated_host_listings_count_private_rooms <dbl> 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.14, 0.16, 0.31, 0.17, 0…\n$ geometry                                     <POINT [m]> POINT (41972.5 3639…"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Ex 01",
    "section": "Buffering",
    "text": "Buffering\nScenario:\nNparks is planning to upgrade the existing cycling paths. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of the land that needs to be acquired and its total area.\n\nDefine buffer zoneCalculate Area NeededSum() total land needed\n\n\nst_buffer() Creates a polygon covering all points of the geometry within a given distance.\n\n#compute the 5-meter buffer zone\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                            # buffer distance\n                            dist = 5, \n                            # number of segments per quadrant\n                            nQuadSegs = 30) \n\n\n\nst_area() returns the area of polygon geometries\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\n\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#point-in-polygon",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#point-in-polygon",
    "title": "Hands-on Ex 01",
    "section": "Point-in-polygon",
    "text": "Point-in-polygon\nScenario:\nA pre-school service group wants to find out the number of pre-schools in each Planning Subzone.\n\nIdentify and CountSummary StatisticsList the Top Subzones\n\n\n\nmpsz3414$PreSch_count<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nst_intersects() identifies pre-schools located inside each Planning Subzone by\nlength() of Base R is used to calculate number of pre-schools that fall inside each planning subzone\n\n\n\n\nsummary(mpsz3414$PreSch_count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\n\n\ntop_n(mpsz3414, 1, PreSch_count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch_count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\n\n\n\nWhat is the density of pre-schools by planning subzone?\n\nStep 1: Calculate area of each subzoneStep 2: Compute DensityStep 3: Check Density\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\n\nDensity = No. of preschools per subzone area\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(PreSch_density = PreSch_count/Area * 1000000)\n\n\n\n\nsummary(mpsz3414$PreSch_density)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   5.154   6.449  10.908  35.602"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#what-is-the-distribution-of-preschool-density",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#what-is-the-distribution-of-preschool-density",
    "title": "Hands-on Ex 01",
    "section": "What is the distribution of Preschool Density?",
    "text": "What is the distribution of Preschool Density?\n\n\ncode block\nset_urbn_defaults(style = \"print\")\n\nggplot(\n    data = mpsz3414, \n    aes(x = as.numeric(PreSch_density))\n  )+\n  geom_histogram(\n    bins = 20, \n    color = \"#FFFCF9\", \n    fill = \"#1F363D\"\n  ) +\n  labs(\n    title = \"Are pre-schools evenly distributed in Singapore?\",\n    subtitle= \"There are many planning sub-zones with a single pre-school. \\nHowever, there are also 2 planning sub-zones with >20 pre-schools\",\n    x = \"Pre-school density (per km sq)\",\n    y = \"Frequency\"\n  ) +\n  theme(\n    panel.grid.major = element_blank()\n  )\n\n\n\n\n\n\n\ncode block\nggplot(\n    data = mpsz3414, \n    aes(y = PreSch_count, \n        x = as.numeric(PreSch_density))\n  ) +\n  geom_point(\n    size = 2,\n    color = \"#1F363D\",\n    alpha = .6\n  ) +\n  labs(\n    title = \"\",\n    x = \"Pre-school density (per km sq)\",\n    y = \"Pre-school count\"\n  ) +\n  theme(\n    panel.grid.major = element_blank()\n  )\n\n\n\n\n\nCloropleth Mapping"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#how-does-the-data-look-like",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#how-does-the-data-look-like",
    "title": "Hands-on Ex 01",
    "section": "How does the data look like?",
    "text": "How does the data look like?\n\nhead(popdata,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n \n  \n    PA \n    SZ \n    AG \n    Sex \n    FA \n    Pop \n    Time \n  \n \n\n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    <= 60 \n    0 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    >60 to 80 \n    10 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    >80 to 100 \n    30 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    >100 to 120 \n    80 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    >120 \n    20 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Males \n    Not Available \n    0 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Females \n    <= 60 \n    0 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Females \n    >60 to 80 \n    10 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Females \n    >80 to 100 \n    40 \n    2011 \n  \n  \n    Ang Mo Kio \n    Ang Mo Kio Town Centre \n    0_to_4 \n    Females \n    >100 to 120 \n    90 \n    2011"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#extracting-2020-data-and-creating-pivot-table",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#extracting-2020-data-and-creating-pivot-table",
    "title": "Hands-on Ex 01",
    "section": "Extracting 2020 Data and creating pivot table",
    "text": "Extracting 2020 Data and creating pivot table\n\npopdata2020 <- popdata %>%\n  filter(\n    Time == 2020\n  ) %>%\n  group_by(\n    PA, SZ, AG\n  ) %>%\n  summarise(\n    POP = sum(Pop)\n  ) %>%\n  ungroup() %>%\n  pivot_wider(\n    names_from = AG, \n    values_from = POP\n  ) %>%\n  mutate(\n    `YOUNG` = rowSums(.[3:6]) + rowSums(.[12]),\n    `ECONOMICALLY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15]),\n    `AGED`= rowSums(.[16:21]),\n    `TOTAL`= rowSums(.[3:21])\n  ) %>%  \n  # Define dependency ratio\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMICALLY ACTIVE`\n  ) %>%\n  # Convert PA and SZ fields to upper case\n  mutate_at(.vars = vars(PA, SZ), \n            .funs = funs(toupper)\n  ) %>%\n  select(\n    `PA`, `SZ`, `YOUNG`,`ECONOMICALLY ACTIVE`, `AGED`,`TOTAL`, `DEPENDENCY`\n  ) %>%\n  # Get data for only economically active subzones\n  filter(`ECONOMICALLY ACTIVE` > 0)\n\n\nhead(popdata2020,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n \n  \n    PA \n    SZ \n    YOUNG \n    ECONOMICALLY ACTIVE \n    AGED \n    TOTAL \n    DEPENDENCY \n  \n \n\n  \n    ANG MO KIO \n    ANG MO KIO TOWN CENTRE \n    1440 \n    2640 \n    770 \n    4850 \n    0.8371212 \n  \n  \n    ANG MO KIO \n    CHENG SAN \n    6660 \n    15380 \n    6080 \n    28120 \n    0.8283485 \n  \n  \n    ANG MO KIO \n    CHONG BOON \n    6150 \n    13970 \n    6450 \n    26570 \n    0.9019327 \n  \n  \n    ANG MO KIO \n    KEBUN BAHRU \n    5500 \n    12040 \n    5080 \n    22620 \n    0.8787375 \n  \n  \n    ANG MO KIO \n    SEMBAWANG HILLS \n    2130 \n    3390 \n    1270 \n    6790 \n    1.0029499 \n  \n  \n    ANG MO KIO \n    SHANGRI-LA \n    3970 \n    8430 \n    3540 \n    15940 \n    0.8908660 \n  \n  \n    ANG MO KIO \n    TAGORE \n    2220 \n    4160 \n    1520 \n    7900 \n    0.8990385 \n  \n  \n    ANG MO KIO \n    TOWNSVILLE \n    4720 \n    11430 \n    5050 \n    21200 \n    0.8547682 \n  \n  \n    ANG MO KIO \n    YIO CHU KANG EAST \n    1190 \n    2230 \n    740 \n    4160 \n    0.8654709 \n  \n  \n    ANG MO KIO \n    YIO CHU KANG WEST \n    6610 \n    12810 \n    4680 \n    24100 \n    0.8813427"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#joining-attributes-to-geospatial-data",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#joining-attributes-to-geospatial-data",
    "title": "Hands-on Ex 01",
    "section": "Joining Attributes to Geospatial data",
    "text": "Joining Attributes to Geospatial data\n\nmpsz_pop2020 <- left_join(\n                  mpsz, popdata2020,\n                  by = c(\"SUBZONE_N\" = \"SZ\"))\n\n# Create rds file in new data folder\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#simple-map-using-qtm",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#simple-map-using-qtm",
    "title": "Hands-on Ex 01",
    "section": "Simple map using qtm()",
    "text": "Simple map using qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#using-tmap-arguments",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#using-tmap-arguments",
    "title": "Hands-on Ex 01",
    "section": "Using tmap arguments",
    "text": "Using tmap arguments\n\n\ncode block\ntm_shape(mpsz_pop2020\n  ) +\n  tm_fill(\n    \"DEPENDENCY\", \n    style = \"quantile\", \n    palette = \"Purples\",\n    title = \"Dependency ratio\"\n  ) +\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.height = .25, \n    legend.width = .35,\n    frame = FALSE\n  ) +\n  tm_borders(\n    alpha = .3\n  ) +\n  tm_compass(\n    type=\"8star\", \n    size = 2\n  ) +\n  tm_scale_bar() +\n  tm_grid(\n    alpha = .1\n  ) +\n  tm_credits(\n    \"Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\\n and Population data from Department of Statistics DOS\", \n    position = c(\"left\", \"bottom\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#building-a-tmap",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#building-a-tmap",
    "title": "Hands-on Ex 01",
    "section": "Building a tmap",
    "text": "Building a tmap\n\nbasic mapUpgrade to CloroplethUsing tm_fill() and tm_border()\n\n\ntm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nAssign variable to tm_polygons() to visualise geographical distribution\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(\n    # Border linewidth\n    lwd = .2,  \n    # Border color\n    col = \"#1F363D\",\n    # transparency of color\n    alpha = .8\n  )"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#data-classification-methods",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#data-classification-methods",
    "title": "Hands-on Ex 01",
    "section": "Data Classification Methods",
    "text": "Data Classification Methods\n\ntmap provides a total 10 data classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks\n\n\njenksequalkmeansfisherCustom Breaks\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette = \"Purples\",\n          n = 5,\n          style = \"jenks\"\n  ) +\n  tm_borders(alpha = .5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette = \"Greens\",\n          n = 5,\n          style = \"equal\"\n  ) +\n  tm_borders(alpha = .5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette = \"Blues\",\n          n = 5,\n          style = \"kmeans\"\n  ) +\n  tm_borders(alpha = .5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette = \"Reds\",\n          n = 5,\n          style = \"fisher\"\n  ) +\n  tm_borders(alpha = .5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00),\n          palette = \"-Purples\"\n  ) +\n  tm_borders(alpha = .5)"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#legends-and-styles",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#legends-and-styles",
    "title": "Hands-on Ex 01",
    "section": "Legends and Styles",
    "text": "Legends and Styles\n\ntm_shape(mpsz_pop2020\n  )+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = .1\n  ) +\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = .7,\n            legend.height = .25, \n            legend.width = .25,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE\n  ) +\n  tm_borders(\n    alpha = .5\n  ) +\n  tm_style(\"natural\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\"\n  ) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE\n  ) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\")\n  ) +\n  tm_style(\"classic\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#facet-maps",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#facet-maps",
    "title": "Hands-on Ex 01",
    "section": "Facet maps",
    "text": "Facet maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\n    c(\"YOUNG\", \"AGED\"),\n    style = \"equal\", \n    palette = \"Reds\"\n  ) +\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n  tm_borders(\n    alpha = 0.5\n  ) +\n  tmap_style(\"albatross\")\n\n\n\n\n\ntm_shape(mpsz_pop2020\n  )+ \n  tm_polygons(\n    c(\"DEPENDENCY\",\"AGED\"),\n    style = c(\"equal\", \"quantile\"), \n    palette = list(\"Blues\",\"Greens\")\n  ) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")\n  ) +\n  tmap_style(\"cobalt\")\n\n\n\n\n\ntm_shape(mpsz_pop2020\n  ) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          thres.poly = 0\n  ) + \n  tm_facets(by=\"REGION_N\", \n            free.coords = TRUE, \n            drop.shapes = TRUE\n  ) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 16\n  ) +\n  tm_borders(alpha = .2\n  ) +\n  tm_style(\"classic\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#stand-alone-maps-with-tmap_arrange",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#stand-alone-maps-with-tmap_arrange",
    "title": "Hands-on Ex 01",
    "section": "stand-alone maps with tmap_arrange()",
    "text": "stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\n    \"YOUNG\", \n    style = \"quantile\", \n    palette = \"Reds\"\n  ) +\n  tm_style(\"white\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\n    \"AGED\", \n    style = \"quantile\", \n    palette = \"Blues\"\n  ) +\n  tm_style(\"white\")\n\ntmap_arrange(youngmap, agedmap, \n             asp = 1, \n             ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#mapping-only-specific-criteria",
    "href": "Hands-on_Ex/hoe1/Hands-on_Ex01.html#mapping-only-specific-criteria",
    "title": "Hands-on Ex 01",
    "section": "Mapping only specific criteria",
    "text": "Mapping only specific criteria\n\ntm_shape(\n  # Only map central region\n  mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]\n  )+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1\n  ) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE\n  ) +\n  tm_borders(alpha = .5)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html",
    "title": "Hands-on Ex 2",
    "section": "",
    "text": "Spatial Weights and Applications\nA key aspect of spatial analysis is to measure the strength of the spatial relationships between spatial objects, or how these related spatial objects influence each other. This would allow us to further the analysis by computing spatial autocorrelation indices, implementing spatial econometrics techniques, studying the spatial distribution of observations, as well as performing spatial sampling or graph partitioning. Source: Handbook of Spatial Analysis\nComputing spatial weights and neighbor links is a necessary part of this analysis process, and is the key focus of this exercise.\n\nWhat are Spatial Weights?\nSpatial weights are one way to represent graphs in geographic data science and spatial statistics and are widely used to represent geographic relationships between the observational units in a spatial dataset.\n\nSpatial weights often express our knowledge about spatial relationships. For example, proximity and adjacency are common spatial questions: What neighborhoods are you surrounded by? How many gas stations are within 5 miles of my stalled car?\nSpatial questions target specific information about the spatial configuration of a specific target (“a neighborhood,” “my stalled car”) and geographically connected relevant sites (“adjacent neighborhoods”, “nearby gas stations”)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#loading-the-data",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#loading-the-data",
    "title": "Hands-on Ex 2",
    "section": "3.1 Loading the data",
    "text": "3.1 Loading the data\n\nGeospatial shapefileAspatial csvJoining the datasets\n\n\n\n\ncode block\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Hands-on_Ex\\hoe2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\ncode block\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nBy performing a left_join(), the geospatial dataframe hunan will be updated with attribute fields of hunan2012\n\n\ncode block\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\n\n\n\ncode block\nhead(hunan,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    NAME_2 \n    ID_3 \n    NAME_3 \n    ENGTYPE_3 \n    County \n    GDPPC \n    geometry \n  \n \n\n  \n    Changde \n    21098 \n    Anxiang \n    County \n    Anxiang \n    23667 \n    POLYGON ((112.0625 29.75523... \n  \n  \n    Changde \n    21100 \n    Hanshou \n    County \n    Hanshou \n    20981 \n    POLYGON ((112.2288 29.11684... \n  \n  \n    Changde \n    21101 \n    Jinshi \n    County City \n    Jinshi \n    34592 \n    POLYGON ((111.8927 29.6013,... \n  \n  \n    Changde \n    21102 \n    Li \n    County \n    Li \n    24473 \n    POLYGON ((111.3731 29.94649... \n  \n  \n    Changde \n    21103 \n    Linli \n    County \n    Linli \n    25554 \n    POLYGON ((111.6324 29.76288... \n  \n  \n    Changde \n    21104 \n    Shimen \n    County \n    Shimen \n    27137 \n    POLYGON ((110.8825 30.11675... \n  \n  \n    Changsha \n    21109 \n    Liuyang \n    County City \n    Liuyang \n    63118 \n    POLYGON ((113.9905 28.5682,... \n  \n  \n    Changsha \n    21110 \n    Ningxiang \n    County \n    Ningxiang \n    62202 \n    POLYGON ((112.7181 28.38299... \n  \n  \n    Changsha \n    21111 \n    Wangcheng \n    County \n    Wangcheng \n    70666 \n    POLYGON ((112.7914 28.52688... \n  \n  \n    Chenzhou \n    21112 \n    Anren \n    County \n    Anren \n    12761 \n    POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#computing-queen-contiguity-based-neighbours",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#computing-queen-contiguity-based-neighbours",
    "title": "Hands-on Ex 2",
    "section": "6.1 Computing Queen contiguity based neighbours",
    "text": "6.1 Computing Queen contiguity based neighbours\nThe code chunk below computes a contiguity matrix based on Queen contiguity principle and returns a neighbor list object:\n\nwm_q <- poly2nb(hunan, \n                queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nThe summary report shows that:\n\nThere are 88 area units in Hunan\nThe most connected area unit has 11 neighbors (links)\nThe two least connected areas have only 1 neighbor\n\n\n\nListing specific neighborsRetrieving Country names by polygon #Retrieving GDPCC of countries by polygon #\n\n\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for polygon #1 in the object:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon #1 has 5 neighbors.\n\n\nWe can retrieve the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\n\n# Store all neighbor polygon IDs in new variable\nnb1 <- wm_q[[1]]\n# Replace polygon IDs in the variable with respective GDPPC\nnb1 <- hunan$GDPPC[nb1]\n\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbors based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\n\n6.1.1 Displaying complete matrix\nYou can display the complete weight matrix by using str()\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#creating-rook-contiguity-based-neighbours",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#creating-rook-contiguity-based-neighbours",
    "title": "Hands-on Ex 2",
    "section": "6.2 Creating Rook contiguity based neighbours",
    "text": "6.2 Creating Rook contiguity based neighbours\nCompute the Rook contiguity matrix by altering queen argument of poly2nb() function to return a neighbor list object:\n\nwm_r <- poly2nb(hunan, \n                queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\nThe summary report shows that:\n\nThere are 88 area units in Hunan\nThe most connected area unit has 10 neighbors (links)\nThe two least connected areas have only 1 neighbor"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#plotting-queen-contiguity-as-a-map",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#plotting-queen-contiguity-as-a-map",
    "title": "Hands-on Ex 2",
    "section": "7.1 Plotting Queen contiguity as a map",
    "text": "7.1 Plotting Queen contiguity as a map\n\n\ncode block\nplot(hunan$geometry, \n     border = \"#ABA9C3\")\nplot(wm_q, \n     coords, \n     pch = 20, \n     cex = .7, \n     add = TRUE, \n     col= \"salmon\"\n     )"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#plotting-rook-contiguity-as-a-map",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#plotting-rook-contiguity-as-a-map",
    "title": "Hands-on Ex 2",
    "section": "7.2 Plotting Rook contiguity as a map",
    "text": "7.2 Plotting Rook contiguity as a map\n\n\ncode block\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, \n     coords, \n     pch = 19, \n     cex = 0.6, \n     add = TRUE, \n     col = \"#129490\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#putting-both-maps-together",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#putting-both-maps-together",
    "title": "Hands-on Ex 2",
    "section": "7.3 Putting both maps together",
    "text": "7.3 Putting both maps together\n\n\ncode block\npar(mfrow = c(1,2))\n\n# Queen\nplot(hunan$geometry, \n     border = \"lightgrey\")\nplot(wm_q, \n     coords, \n     pch = 20, \n     cex = .7, \n     add = TRUE, \n     col = \"salmon\",\n     main = \"Queen Contiguity\"\n     )\n\n# Rook\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, \n     coords, \n     pch = 19, \n     cex = 0.6, \n     add = TRUE, \n     col = \"#129490\",\n     main = \"Rook Contiguity\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#defining-cut-off-distance",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#defining-cut-off-distance",
    "title": "Hands-on Ex 2",
    "section": "8.1 Defining cut-off distance",
    "text": "8.1 Defining cut-off distance\n\nStep 1: Create a list of neighborsStep 2: Calculate distance using nbdists()Step 3: Determine upper threshold\n\n\n\nknearneigh(coords) is used to find k nearest neighbors for each point in the spatial dataset defined by the coords variable. Returns: k-nearest neighbor object (kn object)\nknn2nb() is then used to convert the k-nearest neighbor object (kn object) into a neighbors list (nb object). This nb object represents the spatial relationships between neighboring regions based on the k-nearest neighbors and returns a neighbor list object:\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \nNon-symmetric neighbours list\n\n\n\n\n\nnbdists() calculates the distances between neighboring regions defined by the neighbors list k1\nThe longlat = TRUE argument indicates that the distances should be calculated assuming longitude and latitude coordinates, and it returns the distances in kilometers\nunlist() flattens the result, converting it from a list structure to a simple numeric vector\n\n\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\n\n\n\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#computing-fixed-distance-weight-matrix",
    "title": "Hands-on Ex 2",
    "section": "8.2 Computing fixed distance weight matrix",
    "text": "8.2 Computing fixed distance weight matrix\nThis is done using dnearneigh():\n\nwm_d62 <- dnearneigh(\n  coords, \n  # specify lower and upper distance bands\n  0, 62, \n  longlat = TRUE)\n\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nThe summary report shows that:\n\nThere are 88 area units in Hunan\nThere are 324 links between regions that fall within the distance band of 0 - 62km\nOn average, each region has about 3-4 neighbors that fall within the distance band\n\n\n\nContent of wm_d62 weight matrixStructure of wm_d62 weight matrix\n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nUse a combination oftable() and card() to return a contingency matrix of number of neighbors per country:\n\ntable(hunan$County, \n    # list number of neighbors for each area\n      card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#row-standardization",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#row-standardization",
    "title": "Hands-on Ex 2",
    "section": "12.1 Row Standardization",
    "text": "12.1 Row Standardization\nRow-standardization involves dividing each weight in a row by the sum of weights in that row. This ensures that the weights for each observation (row) in the matrix sum to 1, making it a row-standardized spatial weight matrix.\nRow-standardization helps to remove the influence of the number of neighbors each observation has, making the spatial weight matrix more comparable across different datasets or regions.\nnb2listw() function converts a neighbors list object into a weight list object:\n\nrswm_q <- nb2listw(wm_q, \n            # Specify spatial weights matrix\n                   style = \"W\", \n            # regions with no neighbors are retained in matrix, weights set to zero\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\ncode block\nsummary(unlist(rswm_q$weights))\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.09091 0.14286 0.20000 0.19643 0.20000 1.00000"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#unstandardized-weight-matrix",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#unstandardized-weight-matrix",
    "title": "Hands-on Ex 2",
    "section": "12.2 Unstandardized weight matrix",
    "text": "12.2 Unstandardized weight matrix\nstyle = “B” Creates a binary (unstandardized) weight list object:\n\n\ncode block\nrswm_ids <- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\ncode block\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Ex 2",
    "section": "13.1 Spatial lag with row-standardized weights",
    "text": "13.1 Spatial lag with row-standardized weights\n\nCalculate variable spatial lag valueAppend values to main dataframe\n\n\nThe following code calculates the GDPPC Lag value, or average neighbor GDPPC value for each polygon and returns it as a numeric vector:\n\nGDPPC_lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC_lag \n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\n\n\n# create a list of Hunan provinces and corresponding spatial lag GDPPC values\nlag_list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\n\n# Transform list into dataframe\nlag_res <- as.data.frame(lag_list)\n\n# Assign column names to dataframe\ncolnames(lag_res) <- c(\"NAME_3\", \"lag GDPPC\")\n\n# Join to main hunan dataframe\nhunan <- left_join(hunan,lag_res)\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThis reveals that lag GDPPC is stored as a new column in the hunan dataframe.\n\n\n\nComparing GDPPC and Spatial Lag GDPPC\n\n\ncode block\n# Plot normal GDPPC cloropleth map\ngdppc <- qtm(hunan, \"GDPPC\")\n\n# Plot lag GDPPC cloropleth map\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\n\n# Arrange in 2 columns\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Ex 2",
    "section": "13.2 Spatial lag as a sum of neighboring values",
    "text": "13.2 Spatial lag as a sum of neighboring values\nAnother way to calculate spatial lag is to sum neighboring values by assigning binary weights."
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#create-binary-spatial-weights-matrix",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#create-binary-spatial-weights-matrix",
    "title": "Hands-on Ex 2",
    "section": "13.3 Create binary spatial weights matrix",
    "text": "13.3 Create binary spatial weights matrix\n\n\ncode block\n# For every neighbor an area has, assign value '1'\nb_weights <- lapply(wm_q, function(x) 0*x +1)\n\n# Create binary spatial weight matrix\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\n\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#compute-lag-gdppc",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#compute-lag-gdppc",
    "title": "Hands-on Ex 2",
    "section": "13.4 Compute Lag GDPPC",
    "text": "13.4 Compute Lag GDPPC\n\n# create a list of Hunan provinces and corresponding spatial lag GDPPC values\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\n# Transform list object into dataframe\nlag_res <- as.data.frame(lag_sum)\n\n# assign column names\ncolnames(lag_res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n# Append to hunan dataframe\n\nhunan <- left_join(hunan, lag_res)\n\nComparing GDPPC and Spatial Lag GDPPC\n\n\ncode block\n# original GDPPC Plot\ngdppc <- qtm(hunan, \"GDPPC\")\n\n# Lag sum GDPPC plot\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\n\n# Arrange side by side\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-window-average",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-window-average",
    "title": "Hands-on Ex 2",
    "section": "13.5 Spatial window average",
    "text": "13.5 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\n\nincluding selfCreate Spatial weights ListCalculate spatial lag variable from new spatial weights listCompute lag GDPPC\n\n\nUsing the include.self() method from spdep package modifies the existing spatial weights matrix such that each spatial unit is considered a neighbor to itself. Below is the neighbot list for polygon #1, which now has 6 neighbors instead of the original 5:\n\n\ncode block\nwm_qs <- include.self(wm_q)\nwm_qs[[1]]\n\n\n[1]  1  2  3  4 57 85\n\n\n\n\n\n\ncode block\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\n\n\n\n\ncode block\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\n\n\n# create a list of Hunan provinces and corresponding spatial lag GDPPC values\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\n\n# Transform list object into dataframe\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\n\n# Assign column names\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n# Add to main dataframe\nhunan <- left_join(hunan, lag_wm_qs.res)\n\n\n\ncode block\nhead(hunan,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    NAME_2 \n    ID_3 \n    NAME_3 \n    ENGTYPE_3 \n    County \n    GDPPC \n    lag GDPPC \n    lag_sum GDPPC \n    lag_window_avg GDPPC \n    geometry \n  \n \n\n  \n    Changde \n    21098 \n    Anxiang \n    County \n    Anxiang \n    23667 \n    24847.20 \n    124236 \n    24650.50 \n    POLYGON ((112.0625 29.75523... \n  \n  \n    Changde \n    21100 \n    Hanshou \n    County \n    Hanshou \n    20981 \n    22724.80 \n    113624 \n    22434.17 \n    POLYGON ((112.2288 29.11684... \n  \n  \n    Changde \n    21101 \n    Jinshi \n    County City \n    Jinshi \n    34592 \n    24143.25 \n    96573 \n    26233.00 \n    POLYGON ((111.8927 29.6013,... \n  \n  \n    Changde \n    21102 \n    Li \n    County \n    Li \n    24473 \n    27737.50 \n    110950 \n    27084.60 \n    POLYGON ((111.3731 29.94649... \n  \n  \n    Changde \n    21103 \n    Linli \n    County \n    Linli \n    25554 \n    27270.25 \n    109081 \n    26927.00 \n    POLYGON ((111.6324 29.76288... \n  \n  \n    Changde \n    21104 \n    Shimen \n    County \n    Shimen \n    27137 \n    21248.80 \n    106244 \n    22230.17 \n    POLYGON ((110.8825 30.11675... \n  \n  \n    Changsha \n    21109 \n    Liuyang \n    County City \n    Liuyang \n    63118 \n    43747.00 \n    174988 \n    47621.20 \n    POLYGON ((113.9905 28.5682,... \n  \n  \n    Changsha \n    21110 \n    Ningxiang \n    County \n    Ningxiang \n    62202 \n    33582.71 \n    235079 \n    37160.12 \n    POLYGON ((112.7181 28.38299... \n  \n  \n    Changsha \n    21111 \n    Wangcheng \n    County \n    Wangcheng \n    70666 \n    45651.17 \n    273907 \n    49224.71 \n    POLYGON ((112.7914 28.52688... \n  \n  \n    Chenzhou \n    21112 \n    Anren \n    County \n    Anren \n    12761 \n    32027.62 \n    256221 \n    29886.89 \n    POLYGON ((113.1757 26.82734... \n  \n\n\n\n\n\n\n\n\nComparing lag GDPPC to window average Lag GDPPC\n\n\ncode block\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-window-sum",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#spatial-window-sum",
    "title": "Hands-on Ex 2",
    "section": "13.6 Spatial window sum",
    "text": "13.6 Spatial window sum\nThis is similar to the spatial window average, but without using row-standardized weights.\n\nincluding selfCalculating Spatial WeightsCompute lag value\n\n\nPolygon #1 now has 6 neighbors instead of 5:\n\nwm_qs <- include.self(wm_q)\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\n\n\n\n# Assign weights values\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\n\n\n\ncode block\n# Compute lag value\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\n\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\n\n\n\ncode block\nhead(hunan,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    NAME_2 \n    ID_3 \n    NAME_3 \n    ENGTYPE_3 \n    County \n    GDPPC \n    lag GDPPC \n    lag_sum GDPPC \n    lag_window_avg GDPPC \n    w_sum GDPPC \n    geometry \n  \n \n\n  \n    Changde \n    21098 \n    Anxiang \n    County \n    Anxiang \n    23667 \n    24847.20 \n    124236 \n    24650.50 \n    147903 \n    POLYGON ((112.0625 29.75523... \n  \n  \n    Changde \n    21100 \n    Hanshou \n    County \n    Hanshou \n    20981 \n    22724.80 \n    113624 \n    22434.17 \n    134605 \n    POLYGON ((112.2288 29.11684... \n  \n  \n    Changde \n    21101 \n    Jinshi \n    County City \n    Jinshi \n    34592 \n    24143.25 \n    96573 \n    26233.00 \n    131165 \n    POLYGON ((111.8927 29.6013,... \n  \n  \n    Changde \n    21102 \n    Li \n    County \n    Li \n    24473 \n    27737.50 \n    110950 \n    27084.60 \n    135423 \n    POLYGON ((111.3731 29.94649... \n  \n  \n    Changde \n    21103 \n    Linli \n    County \n    Linli \n    25554 \n    27270.25 \n    109081 \n    26927.00 \n    134635 \n    POLYGON ((111.6324 29.76288... \n  \n  \n    Changde \n    21104 \n    Shimen \n    County \n    Shimen \n    27137 \n    21248.80 \n    106244 \n    22230.17 \n    133381 \n    POLYGON ((110.8825 30.11675... \n  \n  \n    Changsha \n    21109 \n    Liuyang \n    County City \n    Liuyang \n    63118 \n    43747.00 \n    174988 \n    47621.20 \n    238106 \n    POLYGON ((113.9905 28.5682,... \n  \n  \n    Changsha \n    21110 \n    Ningxiang \n    County \n    Ningxiang \n    62202 \n    33582.71 \n    235079 \n    37160.12 \n    297281 \n    POLYGON ((112.7181 28.38299... \n  \n  \n    Changsha \n    21111 \n    Wangcheng \n    County \n    Wangcheng \n    70666 \n    45651.17 \n    273907 \n    49224.71 \n    344573 \n    POLYGON ((112.7914 28.52688... \n  \n  \n    Chenzhou \n    21112 \n    Anren \n    County \n    Anren \n    12761 \n    32027.62 \n    256221 \n    29886.89 \n    268982 \n    POLYGON ((113.1757 26.82734... \n  \n\n\n\n\n\n\n\n\nComparing all the plots\n\n\ncode block\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, lag_sum_gdppc, w_avg_gdppc, w_sum_gdppc, \n             nrow = 2, asp = 1)"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#global-morans-i",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#global-morans-i",
    "title": "Hands-on Ex 2",
    "section": "15.1 Global Moran’s I",
    "text": "15.1 Global Moran’s I\n\nThe MathThe HypothesisThe TestMonte Carlo Moran\n\n\nExcerpt from ArcGIS Pro\nThe tool conducts the following calculations to derive an Index Value, Expected Index value, z-score and p-value:\n\nCompute the mean (\\(\\mu\\)) and variance (\\(\\sigma\\)) for the variable being evaluated\nFor each feature value x, derive the deviation from the mean (d) where \\(d = x - \\mu\\)\nDeviation values d of all neighboring areas are multiplied together to create a cross-product, P\n\nIf the values in the dataset tend to cluster spatially (high values cluster near other high values; low values cluster near other low values), the Moran’s Index will be positive. When high values repel other high values, and tend to be near low values, the Index will be negative. If positive cross-product values balance negative cross-product values, the Index will tend towards zero.\nGiven the number of features in the dataset and the variance for the data values overall, the tool computes a z-score and p-value indicating whether this difference is statistically significant or not. Index values cannot be interpreted directly; they can only be interpreted within the context of the null hypothesis.\n\n\nAs an inferential statistic, Global Moran’s I tests the following hypothesis:\n\\[H_0: \\text{The variable is randomly distributed among the spatial features in the study area}\\] \\[H_1: \\text{The variable is not randomly distributed among the spatial features in the study area}\\] Interpretation of statistical significance & distribution:\n\n\n\n\n\n\n\n\n\n+ve Moran’s I\n-ve Moran’s I\n\n\n\n\np-value < 0.05(significant)\nReject \\(H_0\\)Variable is Spatially Clustered\nReject \\(H_0\\)Variable is Spatially Dispersed\n\n\np-value > 0.05(Not significant)\nAccept \\(H_0\\)Variable is randomly distributed\n\n\n\n\n\n\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep:\n\nmoran.test(hunan$GDPPC, \n           listw = rswm_q, \n           zero.policy = TRUE, \n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nFrom the test results, p-value is < 0.05, so we reject \\(H_0\\) and conclude that the variable is not randomly distributed among the spatial features in the study area. The alternative hypothesis: greater indicates a positive spatial autocorrelation, suggestive of spatial clustering.\n\n\nThe code chunk below performs a Monte Carlo simulation of n= 1000 trials for Moran’s I statistic by using moran.mc() of spdep:\n\nset.seed(1234)\n\nbperm <- moran.mc(hunan$GDPPC, \n                listw = rswm_q, \n                nsim = 999, \n                zero.policy = TRUE, \n                na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the Monte Crlo simulation test results, p-value is < 0.05, so we reject \\(H_0\\) and conclude that the variable is not randomly distributed among the spatial features in the study area. The alternative hypothesis: greater indicates a positive spatial autocorrelation, suggestive of spatial clustering.\n\n\n\n\n15.1.1 Visualising the results of Monte Carlo Moran’s I Test\n\n\ncode block\n# Extract result\nsim_moran <- bperm$res\n# Calculate mean result\nsim_mean <- mean(sim_moran)\n\nset_urbn_defaults(style = \"print\")\n\nggplot(\n    data = data.frame(sim_moran),\n    aes(x = sim_moran)\n  ) +\n  geom_histogram(\n    bins = 30, \n    color = \"#FFFCF9\", \n    fill = \"#1F363D\",\n    alpha = .8\n  ) +\n  # Add mean line\n  geom_vline(\n    xintercept = sim_mean, \n    color = \"salmon\", \n    linetype = \"dashed\", \n    linewidth = 1\n  ) +\n  # Add line annotations\n  annotate(\n    \"text\", \n    x = .035, \n    y = 100, \n    label = paste(\"Mean value =\", round(sim_mean, 3)),\n    color = \"salmon\",\n    size = 3\n  ) +\n  labs(\n    title = \"Simulated Moran's I Statistic\",\n    subtitle= \"(Based on Monte-carlo Simulation of 1000 trials)\",\n    x = \"Moran's I Statistic\",\n    y = \"Frequency\"\n  ) +\n  theme(\n    panel.grid.major = element_blank()\n  )"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#gearys-c-test",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#gearys-c-test",
    "title": "Hands-on Ex 2",
    "section": "15.2 Geary’s C test",
    "text": "15.2 Geary’s C test\nBoth Moran’s I and Geary’s C are measures of spatial autocorrelation. However, Geary’s C calculation is a simpler calculation, taking the ratio of the sum of squared differences between neighboring values over the total variance. Their result statistics are also inversely related:\n\nC value close to 1 indicates no spatial autocorrelation\nC value nearer to 0 indicates positive spatial correlation\nC value nearer to 2 indicates negative spatial correlation\n\n\nThe TestMonte Carlo Geary’s\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep\n\n\ncode block\ngeary.test(hunan$GDPPC, listw = rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nFrom the test results, p-value is < 0.05, so we reject \\(H_0\\) and conclude that the variable is not randomly distributed among the spatial features in the study area. The expected value under spatial randomness (1.0000000) is greater than the observed Geary C statistic (0.6907223), suggesting a spatial pattern of dissimilarity, where dissimilar values are clustered together.\n\n\nThe code chunk below performs a Monte Carlo simulation of n= 1000 trials for Geary’s C statistic by using geary.test():\n\nset.seed(1234)\ngperm <- geary.mc(hunan$GDPPC, \n                  listw = rswm_q, \n                  nsim = 999)\ngperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the test results, p-value is < 0.05, so we reject \\(H_0\\) and conclude that the variable is not randomly distributed among the spatial features in the study area. The alternative hypothesis is stated as “greater”, suggesting that the observed Geary C statistic is larger than expected under the assumption of spatial randomness, indicating a tendency for dissimilar values to be close to each other.\n\n\n\n\n15.2.1 Visualising the results of Monte Carlo Geary C’s Test\n\n\ncode block\n# Extract result\nsim_geary <- gperm$res\n# Calculate mean result\nsim_g_mean <- mean(sim_geary)\n\nset_urbn_defaults(style = \"print\")\n\nggplot(\n    data = data.frame(sim_geary),\n    aes(x = sim_geary)\n  ) +\n  geom_histogram(\n    bins = 25, \n    color = \"#FFFCF9\", \n    fill = \"#858AE3\",\n    alpha = .8\n  ) +\n  # Add mean line\n  geom_vline(\n    xintercept = sim_g_mean, \n    color = \"#3A435E\", \n    linetype = \"dashed\", \n    linewidth = 1\n  ) +\n  # Add line annotations\n  annotate(\n    \"text\", \n    x = .95, \n    y = 115, \n    label = paste(\"Mean value =\", round(sim_g_mean, 3)),\n    color = \"#3A435E\",\n    size = 3\n  ) +\n  labs(\n    title = \"Simulated Geary's C Statistic\",\n    subtitle= \"(Based on Monte-carlo Simulation of 1000 trials)\",\n    x = \"Geary's C Statistic\",\n    y = \"Frequency\"\n  ) +\n  theme(\n    panel.grid.major = element_blank()\n  )"
  },
  {
    "objectID": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#statistical-results-as-correlograms",
    "href": "Hands-on_Ex/hoe2/Hands-on_Ex02.html#statistical-results-as-correlograms",
    "title": "Hands-on Ex 2",
    "section": "15.3 Statistical results as correlograms",
    "text": "15.3 Statistical results as correlograms\n\nMoran’s I correlogramGeary’s C correlogram\n\n\nIn the code chunk below, sp.correlogram() is used to compute a 6-lag spatial correlogram of GDPPC using global spatial autocorrelation Moran’s I (method = \"I\"):\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order = 6, \n                        # Use Moran's I Statistic\n                          method = \"I\", \n                          style = \"W\")\nplot(MI_corr)\n\n\n\n\nPlotting the output may not provide a complete interpretation, because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results:\n\n\ncode block\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe results table has multiple columns. Each row corresponds to a specific lag distance.\n\nEstimate: The observed Moran’s I statistic at each lag distance.\nExpectation: The expected Moran’s I under the assumption of spatial randomness.\nVariance: The variance of the Moran’s I statistic.\nStandard Deviate: The standard deviate of the observed Moran’s I, indicating how many standard deviations the observed value is from the expected value under spatial randomness.\nPr(I): The p-value associated with the observed Moran’s I.\nTwo-sided: Significance codes indicating the level of significance. Smaller p-values correspond to more asterisk, indicating significance.\n\n\n\n\nmethod = \"C\" uses Geary’s C Statistic instead:\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order = 6, \n                          method  =\"C\", \n                          style = \"W\")\nplot(GC_corr)\n\n\n\n\n\n\ncode block\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html",
    "title": "Hands-on Ex 3",
    "section": "",
    "text": "Spatial Interaction: Processing and Visualising Flow Data"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#extracting-data-for-study",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#extracting-data-for-study",
    "title": "Hands-on Ex 3",
    "section": "3.1 Extracting data for study",
    "text": "3.1 Extracting data for study\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 <- odbus09 %>%\n  filter(\n    DAY_TYPE == \"WEEKDAY\"\n  ) %>%\n  filter(\n    TIME_PER_HOUR >= 6 &\n    TIME_PER_HOUR <= 9\n  ) %>%\n  group_by(\n    ORIGIN_PT_CODE,\n    DESTINATION_PT_CODE\n  ) %>%\n  summarise(\n    TRIPS = sum(TOTAL_TRIPS)\n  ) %>%\n  ungroup()\n\nDT::datatable(head(odbus6_9, 10))"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#saving-the-dataframe-as-rds",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#saving-the-dataframe-as-rds",
    "title": "Hands-on Ex 3",
    "section": "3.2 Saving the dataframe as RDS",
    "text": "3.2 Saving the dataframe as RDS\nWe will save the output in rds format for future usage:\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThen, import the rds file into the R environment\n\nodbus6_9 <- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#removing-intra-zonal-flows",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#removing-intra-zonal-flows",
    "title": "Hands-on Ex 3",
    "section": "6.1 Removing intra-zonal flows",
    "text": "6.1 Removing intra-zonal flows\nAs we are interested in the spatial flows between different subzones, we remove those orign/destination flows within the subzones:\n\nod_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#creating-desire-lines",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#creating-desire-lines",
    "title": "Hands-on Ex 3",
    "section": "6.2 Creating desire lines",
    "text": "6.2 Creating desire lines\n\nDesire lines are straight lines that represent ‘origin-destination’ data that records how many people travel (or could travel) between places (points or zones)\n\nIn this code chunk, od2line() of stplanr package is used to create the desire lines:\n\nflowline <- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")"
  },
  {
    "objectID": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#visualising-desire-lines",
    "href": "Hands-on_Ex/hoe3/Hands-on_Ex03.html#visualising-desire-lines",
    "title": "Hands-on Ex 3",
    "section": "6.3 Visualising desire lines",
    "text": "6.3 Visualising desire lines\n\ntmap_options(check.and.fix = TRUE)\n\ntmap_mode(\"plot\")\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowline %>%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3\n  ) +\n  tm_layout(\n    frame = FALSE\n  )\n\n\n\n\nWhen the flow data is visually messy and highly skewed like the one shown above, it is wiser to focus on selected flows.\nThus, we will focus on flows greater >= 5000:\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowline %>%  \n  filter(MORNING_PEAK >= 5000) %>%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3\n  ) +\n  tm_compass(\n    type=\"8star\", size = 2\n  ) +\n  tm_layout(\n    frame = FALSE\n  ) +\n  tmap_style(\"classic\")"
  },
  {
    "objectID": "In-class_Ex/ice1/In-class_Ex01.html",
    "href": "In-class_Ex/ice1/In-class_Ex01.html",
    "title": "In-class Ex 01",
    "section": "",
    "text": "The following code chunk loads the necessary packages:\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for aspatial data transformation\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/ice1/In-class_Ex01.html#extracting-the-data-for-analysis",
    "href": "In-class_Ex/ice1/In-class_Ex01.html#extracting-the-data-for-analysis",
    "title": "In-class Ex 01",
    "section": "Extracting the data for Analysis",
    "text": "Extracting the data for Analysis\nCreate a new dataframe origtrip_7_9 by extracting Origin busstop codes and number of trips for weekdays between 7 and 9 o’clock:\n\norigtrip_7_9 <- odbus08 %>%\n  filter(\n    DAY_TYPE == \"WEEKDAY\"\n  ) %>%\n  filter(\n    TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9\n  ) %>%\n  group_by(\n    ORIGIN_PT_CODE\n  ) %>%\n  summarise(\n    TRIPS = sum(TOTAL_TRIPS)\n  ) %>%\n  ungroup()"
  },
  {
    "objectID": "In-class_Ex/ice1/In-class_Ex01.html#loading-the-geospatial-data",
    "href": "In-class_Ex/ice1/In-class_Ex01.html#loading-the-geospatial-data",
    "title": "In-class Ex 01",
    "section": "Loading the geospatial data",
    "text": "Loading the geospatial data\n\nbusstop <- st_read(\n    dsn = \"data/geospatial\",\n    layer = \"BusStop\"\n  ) %>%\n  # Assigning the right EPSG code based on coordinate system\n  st_transform(\n    crs = 3414\n  )\n\nReading layer `BusStop' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\In-class_Ex\\ice1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz <- st_read(\n    dsn = \"data/geospatial\",\n    layer = \"MPSZ-2019\"\n  ) %>%\n # Assigning the right EPSG code\n  st_transform(\n    crs = 3414\n  )\n\nReading layer `MPSZ-2019' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\In-class_Ex\\ice1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/ice1/MPSZ-2019.html",
    "href": "In-class_Ex/ice1/MPSZ-2019.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/ice2/In-class_Ex02.html",
    "href": "In-class_Ex/ice2/In-class_Ex02.html",
    "title": "In-class Ex 2",
    "section": "",
    "text": "Geospatial Analysis using sfdep"
  },
  {
    "objectID": "In-class_Ex/ice2/In-class_Ex02.html#joining-the-dataframes",
    "href": "In-class_Ex/ice2/In-class_Ex02.html#joining-the-dataframes",
    "title": "In-class Ex 2",
    "section": "2.1 Joining the dataframes",
    "text": "2.1 Joining the dataframes\nSpatial features are added to the attribute dataframe as geometry column:\n\nhunan_GDPPC<- left_join(hunan, \n                         GDPPC, \n                         by = \"County\")\n\nglimpse(hunan_GDPPC)\n\nRows: 1,496\nColumns: 10\n$ NAME_2     <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       <int> 21098, 21098, 21098, 21098, 21098, 21098, 21098, 21098, 210…\n$ NAME_3     <chr> \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anx…\n$ ENGTYPE_3  <chr> \"County\", \"County\", \"County\", \"County\", \"County\", \"County\",…\n$ Shape_Leng <dbl> 1.869074, 1.869074, 1.869074, 1.869074, 1.869074, 1.869074,…\n$ Shape_Area <dbl> 0.1005619, 0.1005619, 0.1005619, 0.1005619, 0.1005619, 0.10…\n$ County     <chr> \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anx…\n$ Year       <dbl> 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,…\n$ GDPPC      <dbl> 8184.00, 10995.00, 12670.00, 14128.00, 16763.00, 19817.00, …\n$ geometry   <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.0625 …"
  },
  {
    "objectID": "In-class_Ex/ice2/In-class_Ex02.html#confirm-if-the-new-dataframe-is-a-spacetime-cube-object",
    "href": "In-class_Ex/ice2/In-class_Ex02.html#confirm-if-the-new-dataframe-is-a-spacetime-cube-object",
    "title": "In-class Ex 2",
    "section": "6.1 Confirm if the new dataframe is a spacetime cube object",
    "text": "6.1 Confirm if the new dataframe is a spacetime cube object\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE"
  },
  {
    "objectID": "In-class_Ex/ice3/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/ice3/data/geospatial/MPSZ-2019.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html",
    "href": "In-class_Ex/ice3/In-class_Ex03.html",
    "title": "In-class Ex 3",
    "section": "",
    "text": "Spatial Interaction Models\nSpatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\nCalibrating Flows:\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. This exercise will focus on using appropriate R packages to calibrate SIMs by using the four regression methods."
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#mpsz",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#mpsz",
    "title": "In-class Ex 3",
    "section": "2.1 mpsz",
    "text": "2.1 mpsz\n\nImport RDSConverting from sf data.table to SpatialPolygonsDataFrame\n\n\n\nmpsz <- read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\nas_Spatial() will be used to convert mpsz from sf tibble data frame to a SpatialPolygonsDataFrame (sp object)\n\nmpsz_sp <- mpsz %>%\n  as_Spatial()\n\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR"
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#creating-distance-matrix-frame",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#creating-distance-matrix-frame",
    "title": "In-class Ex 3",
    "section": "3.1 Creating distance matrix frame",
    "text": "3.1 Creating distance matrix frame\nspDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\nCentroids of each planning subzones are used as points of origin and destination for easy calculations.\n\ndist <- spDists(mpsz_sp, \n                # df is already polygon, so set longlat as FALSE\n                longlat = FALSE)\n\n\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nThe resultant distance matrix shows the relative distances between each subzone centroid."
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#labelling-column-and-row-headers",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#labelling-column-and-row-headers",
    "title": "In-class Ex 3",
    "section": "3.2 Labelling column and row headers",
    "text": "3.2 Labelling column and row headers\n\nSort by sub-zone codeAttach Subzone names\n\n\nWe first create a list, sz_names, sorted according to the the distance matrix by planning sub-zone code:\n\nsz_names <- mpsz$SUBZONE_C\n\n\n\nNext, we assign SUBZONE_C to rows and columns for distance matrix matching\n\ncolnames(dist) <- paste0(sz_names)\nrownames(dist) <- paste0(sz_names)\n\n\nhead(dist, n=c(10, 10))\n\n          MESZ01     RVSZ05    SRSZ01    WISZ01     MUSZ02    MPSZ05    WISZ03\nMESZ01     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\nRVSZ05  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\nSRSZ01  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\nWISZ01 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\nMUSZ02  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\nMPSZ05  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\nWISZ03 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\nWISZ02 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\nSISZ02  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\nSISZ01  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n          WISZ02    SISZ02    SISZ01\nMESZ01 14960.942  7515.256  6391.342\nRVSZ05 12749.410  7934.808  4975.002\nSRSZ01 12477.871  7649.776  4669.295\nWISZ01 11284.279 18427.503 15469.566\nMUSZ02 13336.042  7801.616  5226.873\nMPSZ05 16281.453  8403.896  7707.091\nWISZ03  5606.082 14810.930 13111.391\nWISZ02     0.000  9472.024  8575.490\nSISZ02  9472.024     0.000  3780.800\nSISZ01  8575.490  3780.800     0.000\n\n\nThe resultant distance matrix now has planning subzone code as row and column labels.\n\n\n\nTo plot the flows, we need a tibble form of the distance matrix to show the attributes of each trip (origin-destination)."
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#dealing-with-0-value-intra-zonal-distances",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#dealing-with-0-value-intra-zonal-distances",
    "title": "In-class Ex 3",
    "section": "3.3 Dealing with 0-value intra-zonal distances",
    "text": "3.3 Dealing with 0-value intra-zonal distances\nThe diagonals of the distance matrix are 0, and represent intra-zonal distances. We append a constant value to replace the intra-zonal distance of 0.\n\nPivot by SUBZONE_CFind minimum distanceAssign constant as intra-zonal distance\n\n\nmelt() converts the matrix into a long dataframe, where each row reprsents a flow (origin-destination) pair\n\ndistPair <- melt(dist) %>%\n  rename(dist = value,\n         orig = Var1,\n         dest = Var2\n)\n\nhead(distPair, 10)\n\n     orig   dest      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\n\nselect and find out the minimum value of the distance by using summary()\n\ndistPair %>%\n  filter(dist > 0) %>%\n  summary()\n\n      orig             dest             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nThe minimum distance recorded is 173.8\n\n\nNext, a constant distance value of 50m is assigned to intra-zonal distance (less that minimum inter-zonal distance of 173.8)\n\ndistPair$dist <- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\n\nsummary(distPair)\n\n      orig             dest             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe minimum distance recorded is 50, our intra-zonal distance."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "haileycsy",
    "section": "",
    "text": "AppliedGeospatialAnalytics"
  },
  {
    "objectID": "Take-home_Ex/the1/data/geospatial/hexagon.html",
    "href": "Take-home_Ex/the1/data/geospatial/hexagon.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n                 +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 0 0     false"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html",
    "href": "Take-home_Ex/the1/Take-home_ex1.html",
    "title": "Take-home Ex 1",
    "section": "",
    "text": "Spatio-temporal Patterns of Public Bus Ridership"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#aspatial-data",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#aspatial-data",
    "title": "Take-home Ex 1",
    "section": "3.1 Aspatial Data",
    "text": "3.1 Aspatial Data\nA dataset from LTA Datamall, Passenger Volume by Origin Destination Bus Stops from August to October 2023 is used to compute bus traffic. As these were downloaded as separate .csv files, they are imported and combined into a single dataframe.\n\nImporting csv filesVariable DescriptionSummary Statistics\n\n\n\n\ncode block\n# Load each csv file into R separately\nbus08 <- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\nbus09 <- read_csv(\"data/aspatial/origin_destination_bus_202309.csv\")\nbus10 <- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n# Combine all rows into single dataframe\nbusod <- rbind(bus08, bus09, bus10)\n\nstr(busod)\n\n\nspc_tbl_ [17,118,005 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ YEAR_MONTH         : chr [1:17118005] \"2023-08\" \"2023-08\" \"2023-08\" \"2023-08\" ...\n $ DAY_TYPE           : chr [1:17118005] \"WEEKDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKDAY\" ...\n $ TIME_PER_HOUR      : num [1:17118005] 16 16 14 14 17 17 17 17 7 17 ...\n $ PT_TYPE            : chr [1:17118005] \"BUS\" \"BUS\" \"BUS\" \"BUS\" ...\n $ ORIGIN_PT_CODE     : chr [1:17118005] \"04168\" \"04168\" \"80119\" \"80119\" ...\n $ DESTINATION_PT_CODE: chr [1:17118005] \"10051\" \"10051\" \"90079\" \"90079\" ...\n $ TOTAL_TRIPS        : num [1:17118005] 7 2 3 10 5 4 3 22 3 3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   YEAR_MONTH = col_character(),\n  ..   DAY_TYPE = col_character(),\n  ..   TIME_PER_HOUR = col_double(),\n  ..   PT_TYPE = col_character(),\n  ..   ORIGIN_PT_CODE = col_character(),\n  ..   DESTINATION_PT_CODE = col_character(),\n  ..   TOTAL_TRIPS = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\n\n\nbusod is a tibble dataframe consisting of the following variables:\n\nYEAR_MONTH: Month of data collection in YYYY-MM format\nDAY_TYPE: Category of Day\nTIME_PER_HOUR: Extracted hour of day\nPT_TYPE: Public transport type\nORIGIN_PT_CODE: ID of Trip Origin Bus Stop\nDESTINATION_PT_CODE: ID of Trip Destination Bus Stop\nTOTAL_TRIPS: Sum of trips made per origin-Destination\n\n\n\ncode block\nhead(busod,10) %>%\n  kbl() %>%\n  kable_styling(\n    full_width = F, \n    bootstrap_options = c(\"condensed\", \"responsive\"))\n\n\n\n\n \n  \n    YEAR_MONTH \n    DAY_TYPE \n    TIME_PER_HOUR \n    PT_TYPE \n    ORIGIN_PT_CODE \n    DESTINATION_PT_CODE \n    TOTAL_TRIPS \n  \n \n\n  \n    2023-08 \n    WEEKDAY \n    16 \n    BUS \n    04168 \n    10051 \n    7 \n  \n  \n    2023-08 \n    WEEKENDS/HOLIDAY \n    16 \n    BUS \n    04168 \n    10051 \n    2 \n  \n  \n    2023-08 \n    WEEKENDS/HOLIDAY \n    14 \n    BUS \n    80119 \n    90079 \n    3 \n  \n  \n    2023-08 \n    WEEKDAY \n    14 \n    BUS \n    80119 \n    90079 \n    10 \n  \n  \n    2023-08 \n    WEEKENDS/HOLIDAY \n    17 \n    BUS \n    44069 \n    17229 \n    5 \n  \n  \n    2023-08 \n    WEEKDAY \n    17 \n    BUS \n    44069 \n    17229 \n    4 \n  \n  \n    2023-08 \n    WEEKENDS/HOLIDAY \n    17 \n    BUS \n    20281 \n    20141 \n    3 \n  \n  \n    2023-08 \n    WEEKDAY \n    17 \n    BUS \n    20281 \n    20141 \n    22 \n  \n  \n    2023-08 \n    WEEKDAY \n    7 \n    BUS \n    19051 \n    10017 \n    3 \n  \n  \n    2023-08 \n    WEEKENDS/HOLIDAY \n    17 \n    BUS \n    11169 \n    04219 \n    3 \n  \n\n\n\n\n\n\n\n\nsummary(busod)\n\n  YEAR_MONTH          DAY_TYPE         TIME_PER_HOUR     PT_TYPE         \n Length:17118005    Length:17118005    Min.   : 0.00   Length:17118005   \n Class :character   Class :character   1st Qu.:10.00   Class :character  \n Mode  :character   Mode  :character   Median :14.00   Mode  :character  \n                                       Mean   :14.06                     \n                                       3rd Qu.:18.00                     \n                                       Max.   :23.00                     \n ORIGIN_PT_CODE     DESTINATION_PT_CODE  TOTAL_TRIPS      \n Length:17118005    Length:17118005     Min.   :    1.00  \n Class :character   Class :character    1st Qu.:    2.00  \n Mode  :character   Mode  :character    Median :    4.00  \n                                        Mean   :   20.46  \n                                        3rd Qu.:   12.00  \n                                        Max.   :36668.00  \n\n\n\nSummary Statistics reveal that:\n\nThere are 17,118,005 bus trip combinations recorded over 3 months\nDAY_TYPE is split into only 2 categories, ‘WEEKDAY’ and ‘WEEKENDS/PUBLIC HOLIDAY’\nData is collected for 24 hours, starting from 0 Hrs to 23 Hrs in TIME_PER_HOUR\nThere are 5075 distinct origin bus stops, and 5079 distinct destination stops\nThe average number of trips per route is 20.46, with the highest value recorded being a whopping 36,668 – this points to the presence of possible outliers or anomalies, that may be cause for further analysis"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#geospatial-data",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#geospatial-data",
    "title": "Take-home Ex 1",
    "section": "3.2 Geospatial Data",
    "text": "3.2 Geospatial Data\nThere is one source of Geospatial data used in this study:\n\nBus Stop Location from LTA DataMall, providing information about all the bus stops currently being serviced by buses including the bus stop code (identifier) and location coordinates\n\n\nImporting Geospatial FilesCheck EPSG Code and CRSAssigning the right EPSG Code based on CRS\n\n\nbusstop is a Simple feature layers are based on SVY21 coordinate reference system (CRS).\n\n\ncode block\nbusstop <- st_read(\n    dsn = \"data/geospatial\",\n    layer = \"BusStop\"\n  ) \n\n\nReading layer `BusStop' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThis geospatial layer shows the point location of busstops in Singapore:\n\nqtm(busstop)\n\n\n\n\n\n\nThe st_crs() function is used to check for ESPG Code and Coordinate System of both geospatial files. In order to perform geoprocessing using different geospatial data sources, both need to be projected using similar coordinate systems and be assigned the correct EPSG code based on CRS.\n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nAccording to epsg.io, Singapore’s coordinate system is SVY21 with EPSG 3414\n\nbusstop is projected in SVY21 with EPSG 9001 – this will require re-assignment of EPSG code to 3414\n\n\n\n\nThis is done using the st_set_crs() function\n\n# Assign EPSG code\nbusstop <- st_set_crs(\n   busstop, \n   3414\n  ) %>%\n# rename bus stop origin for easy join to main dataframe\n  mutate(\n    ORIGIN_PT_CODE = as.factor(BUS_STOP_N)\n  ) %>%\n  select(\n    ORIGIN_PT_CODE, \n    LOC_DESC,\n    geometry\n  ) %>%\n  # change all column names to lowercase\n  rename_with(\n    tolower, everything()\n  )\n# Confirm EPSG code\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nbusstop is now assigned the correct EPSG code."
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#aspatial-data-preparation",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#aspatial-data-preparation",
    "title": "Take-home Ex 1",
    "section": "4.1 Aspatial Data Preparation",
    "text": "4.1 Aspatial Data Preparation\n\nChanging Data TypeCreate Categorical Variable for Periods of study\n\n\nORIGIN_PT_CODE and DESTINATION_PT_CODE are in character format. These represent the busstop locations, and are thus transformed into factors (categorical data type) for further analysis\n\nbusod <- busod %>%\n  mutate(\n    ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n    DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE)\n  )\n\n\n\nThe following code chunk involves multiple steps to prepare the relevant data needed for further analysis:\n\nCategorize trips by peak period based on day and time by creating a new categorical variable, period, and filtering the data using nested ifelse() conditions\nfilter() out non peak periods\nCompute number of trips per origin busstop per month for each period using group_by() and summarise()\n\n\nbusod_agg <- busod %>%\n  # Categorize trips under period based on day and timeframe\n  mutate(period = ifelse(DAY_TYPE == \"WEEKDAY\" & \n                         TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9, \n                         \"Weekday morning peak\",\n                    ifelse(DAY_TYPE == \"WEEKDAY\" & \n                           TIME_PER_HOUR >= 17 & TIME_PER_HOUR <= 20,\n                           \"Weekday evening peak\",\n                      ifelse(DAY_TYPE == \"WEEKENDS/HOLIDAY\" &\n                             TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14,\n                              \"Weekend/PH morning peak\",\n                        ifelse(DAY_TYPE == \"WEEKENDS/HOLIDAY\" & \n                              TIME_PER_HOUR >= 16 & TIME_PER_HOUR <= 19,\n                               \"Weekend/PH evening peak\",\n                    \"Others\"))))\n  ) %>%\n  # Only retain needed periods for analysis\n  filter(\n    period != \"Others\"\n  ) %>%\n # compute number of trips per origin busstop per month for each period\n  group_by(\n    YEAR_MONTH,\n    period,\n    ORIGIN_PT_CODE\n  ) %>%\n  summarise(\n    num_trips = sum(TOTAL_TRIPS)\n  ) %>%\n  # change all column names to lowercase\n  rename_with(\n    tolower, everything()\n  ) %>%\n  ungroup()"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#fa-bus-does-this-distribution-change-over-time",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#fa-bus-does-this-distribution-change-over-time",
    "title": "Take-home Ex 1",
    "section": "5.1  Does this distribution change over time?",
    "text": "5.1  Does this distribution change over time?\nTo understand if this distribution is unique to the month of August, or records similar trends throughout the months, the distribution of passenger traffic across peak periods over 3 months is compared:\n\n\ncode block\nbus_density <- busod_agg %>%\n  ggplot(\n    aes(x = period,\n        y = num_trips,\n        fill = period,\n        color = period)\n  ) +\n  geom_violin(\n    position = position_nudge(x = .2, y = 0), alpha = .8\n  ) +\n  geom_point(\n    aes(y = num_trips, \n        color = period), \n    position = position_jitter(width = .15),\n    size = .5, \n    alpha = 0.8\n  ) +\n  geom_boxplot(\n    width = .1, \n    outlier.shape = NA, \n    alpha = 0.5\n  ) +\n  facet_wrap(~year_month, \n             nrow = 1\n  ) +\n  scale_y_continuous(\n    labels = scales::number_format(accuracy = 1),\n    breaks = scales::pretty_breaks(n = 3)\n  ) +\n  labs(\n    title = \"Aug - Oct 2023: Similar distributions of Passenger Traffic\"\n  ) + \n  theme(\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_blank(),\n    legend.position = \"none\"\n  ) +\n  coord_flip()\n\nbus_density\n\n\n\n\n\nThe density plots above reveal that the distribution of number of trips recorded over a 3-month period are very similar. It is thus reasonable to deduce that there are several bus stops with very high passenger volume, especially on weekday evening peak periods – if these bus stops are within close proximity to each other, it could point towards possible hot spots for traffic congestion.\nAs the trend does not change significantly over the months, further geospatial analysis is conducted on August 2023 passenger traffic data to locate these potential hot spots."
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#extracting-specific-data-for-study",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#extracting-specific-data-for-study",
    "title": "Take-home Ex 1",
    "section": "5.2 Extracting Specific data for study",
    "text": "5.2 Extracting Specific data for study\nAugust 2023 Passenger volume data is filtered out using the following code, and a pivot table is created such that each row represents a single bus stop:\n\n# Extract august data and store as separate dataframe\nbusod_08 <- busod_agg %>%\n  filter(\n    year_month == \"2023-08\"\n  ) %>%\n  # get each row as a bus stop code with peak period trips as columns\n  pivot_wider(\n    names_from = period,\n    values_from = num_trips\n  ) %>%\n  select(2:6)\n\nDT::datatable(busod_08,\n              options = list(pageLength = 8),\n              rownames = FALSE)"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#creating-spatial-polygon-dataframe",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#creating-spatial-polygon-dataframe",
    "title": "Take-home Ex 1",
    "section": "5.3 Creating Spatial Polygon Dataframe",
    "text": "5.3 Creating Spatial Polygon Dataframe\n\nJoin Aspatial to Geospatial point dataframeCreating Hexagon Spatial Dataframe\n\n\nUsing left_join to map busstops by bus stop code\n\nbusod_08_sf <- left_join(busstop, busod_08, by = \"origin_pt_code\")\n\nbusod_08_sf\n\nSimple feature collection with 5161 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   origin_pt_code             loc_desc Weekday evening peak\n1           22069   OPP CEVA LOGISTICS                   43\n2           32071         AFT TRACK 13                   NA\n3           44331              BLK 239                 1742\n4           96081 GRACE INDEPENDENT CH                  399\n5           11561              BLK 166                  195\n6           66191         AFT CORFE PL                  362\n7           23389              PEC LTD                  406\n8           54411              BLK 527                 1314\n9           28531              BLK 536                 3789\n10          96139              BLK 148                 1420\n   Weekday morning peak Weekend/PH evening peak Weekend/PH morning peak\n1                    15                      12                       6\n2                    NA                       1                      NA\n3                  2124                     546                     700\n4                   307                      84                     110\n5                   190                      61                      81\n6                   399                     173                     158\n7                    35                      84                      10\n8                  3112                     497                    1436\n9                  9258                    1873                    1970\n10                 5030                     710                     858\n                    geometry\n1  POINT (13576.31 32883.65)\n2  POINT (13228.59 44206.38)\n3   POINT (21045.1 40242.08)\n4  POINT (41603.76 35413.11)\n5  POINT (24568.74 30391.85)\n6  POINT (30951.58 38079.61)\n7    POINT (12476.9 32211.6)\n8  POINT (30329.45 39373.92)\n9  POINT (14993.31 36905.61)\n10  POINT (41642.81 36513.9)\n\n\n\n\nbusod_08_sf is a spatial point dataframe. This is not particularly useful when dealing with spatial autocorrelation analysis, as ‘areas’ need to be defined as planes in space (polygons instead of points). The following code chunks place these bus stops into a hexagon grid:\n\nStep 1: Create a hexagon grid frame\n\nUse the st_make_grid() function\ncellsize argument units are the same as the dataframe’s. As busod_08_sf is projected in ESPG code 3414, the unit is in meters and defines the width of the hexagon. This is set to 500m.\nAssign a hex_id to each hexagon as primary key\n\noutput: Spatial polygons, with hex_id and geometry data\n\n\nbusod_08_hex <- st_make_grid(\n    busod_08_sf,\n    cellsize = 500,\n    square = FALSE\n  ) %>%\n  st_sf() %>%\n  rowid_to_column(\"hex_id\")\n\n\nStep 2: Create Attribute dataframe using hex id instead of busstop code\nAs each hexagon area may contain more than a single bus stop, we need to use hex_id as primary key. The following steps are taken to group the attributes by hex_id:\n\nUse the st_join() function with join = st_within to place busstop points within the hexagon areas\nst_set_grometry(NULL) argument removes the geospatial layer\ngroup_by() to get unique hex_id per row\nsummarise() to compute the aggregate number of bus stops and trips per peak period for each hexagon area\nreplace(is.na(.), 0) replaces all NA values with 0\n\noutput: Aspatial Attributes dataframe, with hex_id as primary key\n\n\nbusod_08_stops <- st_join(\n  busod_08_sf, \n  busod_08_hex, \n  join = st_within\n  ) %>%\n  st_set_geometry(NULL) %>%\n  group_by(\n    hex_id\n  ) %>%\n  summarise(\n    n_busstops = n(),\n    busstop_codes = str_c(origin_pt_code, collapse = \",\"),\n    `Weekday morning peak` = sum(`Weekday morning peak`),\n    `Weekday evening peak` = sum(`Weekday evening peak`),\n    `Weekend/PH morning peak` = sum(`Weekend/PH morning peak`),\n    `Weekend/PH evening peak` = sum(`Weekend/PH evening peak`)\n  ) %>%\n  replace(is.na(.), 0) %>%\n  ungroup()\n\n\nStep 3: Create Spatial Polygon dataframe by joining\n\nleft_join the new busod_08_stops aspatial dataframe to busod_08_hex hexagon geospatial layer by hex_id to add attributes to the spatial polygon dataframe\nfilter out the hexagons with no bus stops\n\nOutput: Spatial Polygon Dataframe\n\n\nbusod_08_hex <- busod_08_hex %>%\n  left_join(busod_08_stops,\n            by = \"hex_id\"\n  ) %>%\n  replace(is.na(.), 0)\n\nbustraffic08 <- filter(busod_08_hex,\n                       n_busstops > 0)\n\n\n\n\nThe following map shows each area coloured by bus stop density:\n\n\ncode block\ntmap_mode(\"view\")\n\nbustraffic08_map <- tm_basemap(\"CartoDB.Positron\") +\n  tm_shape(bustraffic08) +\n  tm_fill(\n    col = \"n_busstops\",\n    palette = \"PuBu\",\n    style = \"cont\",\n    id = \"hex_id\",\n    popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                   \"Bus Stop codes: \" = \"busstop_codes\"),\n    title = \" \"\n  ) +\n  tm_layout(\n    # Set legend.show to FALSE to hide the legend\n    legend.show = FALSE\n  )\n\nbustraffic08_map"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#continuous-intervals",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#continuous-intervals",
    "title": "Take-home Ex 1",
    "section": "7.1 Continuous Intervals",
    "text": "7.1 Continuous Intervals\nstyle = \"cont\" argument is specified to fill the hexagons along a continuous colour scale according to passenger trip volume.\n\n\ncode block\nbus08_facet <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekday morning peak\", \"Weekday evening peak\"),\n          palette = \"Reds\",\n          style = \"cont\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekday Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekday morning peak\", \"Weekday evening peak\"),\n    panel.labels = c(\"Weekday morning peak\", \"Weekday evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nbus08_facet"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-quantiles",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-quantiles",
    "title": "Take-home Ex 1",
    "section": "7.2 Binned by Quantiles",
    "text": "7.2 Binned by Quantiles\nstyle = \"quantile\" argument is used categorically bin the variable based on quantile values. The traffic appears far more congested using this binning method compared to the continuous scale, and is largely due to the highly skewed distribution of the variable. It is thus not a conclusive way of determining which areas are true hot spots based on volume of trips.\n\n\ncode block\nbus08_facet2 <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekday morning peak\", \"Weekday evening peak\"),\n          palette = \"Reds\",\n          style = \"quantile\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekday Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekday morning peak\", \"Weekday evening peak\"),\n    panel.labels = c(\"Weekday morning peak\", \"Weekday evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nbus08_facet2"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-jenks-algorithm",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-jenks-algorithm",
    "title": "Take-home Ex 1",
    "section": "7.3 Binned by jenks algorithm",
    "text": "7.3 Binned by jenks algorithm\nstyle = \"jenks\" argument is used to ‘cluster’ groups with similar values and maximize the difference between each group. It is based on the Jenks natural breaks classification method, a data clustering algorithm used to determine the best arrangement of values and assign them into ‘classes’. This is chosen over equal or quantile binning due to the wide range of values present in the distribution.\n\n\ncode block\nbus08_facet3 <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekday morning peak\", \"Weekday evening peak\"),\n          palette = \"Reds\",\n          style = \"jenks\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekday Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekday morning peak\", \"Weekday evening peak\"),\n    panel.labels = c(\"Weekday morning peak\", \"Weekday evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nbus08_facet3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\nWhile the continuous colour-scale map showed more isolated pockets of areas as potential hotspots, the quantile binning and jenks algorithm revealed a more clustered distribution of hotspot areas.\n\nComparing the maps, several Areas have been identified as Weekday Peak high passenger volume hotspots. These are mostly areas encompassing an MRT Station and/or Bus Interchange, and are listed out by hexagon ID below:\n\nhex_id 2411: Woodlands MRT Stationhex_id 3239: Ang Mo Kio MRT Station/ Bus Interchangehex_id 4349: Bedok MRT station/ Bus Interchangehex_id 4018: Punggol Roadhex_id 2054: Clementi MRT Station\n\n\n\nhex_2411 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"46649\",\"46339\",\"46009\",\"46321\",\"46641\",\"46639\",\"46631\",\"46329\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_2411)\n\n\n\n\n\n\n\n\n\nhex_3239 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"54247\",\"54339\",\"54391\",\"54261\",\"54009\",\"54399\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_3239)\n\n\n\n\n\n\n\n\n\nhex_4349 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"84031\",\"84139\",\"84131\",\"84009\",\"84039\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_4349)\n\n\n\n\n\n\n\n\n\nhex_4018 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"65079\",\"65191\",\"65199\",\"65071\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_4018)\n\n\n\n\n\n\n\n\n\nhex_2054 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"20019\",\"17179\",\"17171\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_2054)"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#continuous-intervals-1",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#continuous-intervals-1",
    "title": "Take-home Ex 1",
    "section": "8.1 Continuous Intervals",
    "text": "8.1 Continuous Intervals\n\n\ncode block\nph_bus08_facet <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\"),\n          palette = \"Purples\",\n          style = \"cont\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekend/PH Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekend/PH Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nph_bus08_facet"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-quantile",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-quantile",
    "title": "Take-home Ex 1",
    "section": "8.2 Binned by quantile",
    "text": "8.2 Binned by quantile\n\n\ncode block\ntmap_mode(\"view\")\n\nph_bus08_facet2 <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\"),\n          palette = \"Purples\",\n          style = \"quantile\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekend/PH Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekend/PH Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nph_bus08_facet2"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-jenks-algorithm-1",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#binned-by-jenks-algorithm-1",
    "title": "Take-home Ex 1",
    "section": "8.3 Binned by jenks algorithm",
    "text": "8.3 Binned by jenks algorithm\n\n\ncode block\nph_bus08_facet3 <- tm_shape(bustraffic08) +\n  tm_fill(c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\"),\n          palette = \"Purples\",\n          style = \"jenks\",\n          alpha = .7,\n          popup.vars = c(\"No. of bus stops: \" = \"n_busstops\",\n                         \"Weekend/PH Morning traffic: \" = \"Weekday morning peak\",\n                         \"Weekend/PH Evening traffic: \" = \"Weekday evening peak\",\n                         \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_scale_bar(width = 0.15) +\n  tm_layout(\n    title = c(\"Weekend/PH morning peak\", \"Weekend/PH evening peak\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  )\n\nph_bus08_facet3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe ‘clustered’ maps above reveal denser hotspots in the north and central regions compared to Weekday peak periods. However, similarly high passenger traffic was recording in specific areas, identified and listed below:\n\nhex_id 3292: Bugis & Bencoolen MRT stationhex_id 3014: Orchard MRT Stationhex_id 2135: Johor Bahru Checkpoint\n\n\n\nhex_3292 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"01013\",\"01119\",\"01112\",\"01019\",\"01012\",\"04029\",\"07569\",\"07561\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_3292)\n\n\n\n\n\n\n\n\n\nhex_3014 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"09011\",\"09022\",\"09048\",\"09047\",\"09023\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_3014)\n\n\n\n\n\n\n\n\n\nhex_2135 <- busstop %>%\n  filter(\n    origin_pt_code %in% c(\"46211\",\"46219\")\n  ) %>%\n  st_set_geometry(NULL) %>%\n  select(\n    origin_pt_code, loc_desc\n  )\n\nDT::datatable(hex_2135)\n\n\n\n\n\n\n\n\n\n\nWeekday vs Weekend/PH Peak Periods\n\nKey hotspot areas were similar, especially in larger heartland areas with busy MRT stations and bus interchanges\nJenks algorithm revealed smaller ‘clusters’ of hot spots during weekend peak periods compared to weekday peak periods, although both day types had similar highest passenger traffic areas\nThe visualised distribution of passenger volume using continuous scale versus binned intervals reveals different patterns, and further investigation needs to be conducted to determine if those areas are truly spatially clustered or are outliers in the overall distribution"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#computing-local-morans-i-statistics",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#computing-local-morans-i-statistics",
    "title": "Take-home Ex 1",
    "section": "9.1 Computing local Moran’s I statistics",
    "text": "9.1 Computing local Moran’s I statistics\n\nStep 1: Compute spatial weight matrixStep 2: Monte Carlo simulation of Local Moran’s I\n\n\nThe code chunk below performs the following actions:\n\nmutate creates 2 new columns, nb and wt\nnb stores the Queen’c contiguity weight matrix, computed using st_contiguity\nwt stores the row-standardised weight matrix\n\n\nwm08 <- busod_08_hex %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\n\n\nThe following code runs a Monte Carlo simulation of Local Moran’s I on weekday morning peak traffic.This function returns the following values as separate columns:\n\nii (Moran’s I for each observation): the local spatial autocorrelation for each hexagon. +ve values suggest clustering while -ve values suggest dispersion.\nE_ii (Expected Moran’s I for each observation): the expected value of Moran’s I under spatial randomness, based on the assumption that there is no spatial autocorrelation.\nvar_ii (Variance of Ii): the variability of the Moran’s I values across observations\nz_ii (Z-score): A standardized score that measures how many standard deviations an observed Moran’s I deviates from the expected Moran’s I. +ve scores indicate higher correlation than expected\np_ii (p-value): the probability of observing the given Moran’s I under the assumption of spatial randomness. A p-value less than the chosen significance level (e.g., 0.05) suggests that the spatial pattern is statistically significant.\np_ii_sim (simulated p-value): the p-value based on monte carlo simulation of 1000 trials\nmean, median, pysal: the cluster category based spatial patterns\n\n\n# set seed to ensure that results from simulation are reproducible\nset.seed(8888)\n\n# Weekday morning\nlisa08_wdm <- wm08 %>%\n  mutate(local_moran = local_moran(`Weekday morning peak`,\n                                   nb,\n                                   wt,\n                                   nsim = 999),\n         .before = 1) %>%\n  unnest(local_moran) %>%\n  # only retain hexagons with a bus stop\n  filter(n_busstops > 0)\n\n# Weekday evening\nlisa08_wde <- wm08 %>%\n  mutate(local_moran = local_moran(`Weekday evening peak`,\n                                   nb,\n                                   wt,\n                                   nsim = 999),\n         .before = 1) %>%\n  unnest(local_moran) %>%\n  # only retain hexagons with a bus stop\n  filter(n_busstops > 0)"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#step-3-visualise-i-statistic-and-p-value",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#step-3-visualise-i-statistic-and-p-value",
    "title": "Take-home Ex 1",
    "section": "9.2 Step 3: Visualise I statistic and p-value",
    "text": "9.2 Step 3: Visualise I statistic and p-value\n\nAn area could be identified as a cluster or an outlier based on I statistic value and p-value:\n\noutlier: significant and negative i value (area is associated with relatively low i values of neighbors)\ncluster: significant and positive i value (area is associated with relatively high i values of neighbors)\n\n\n\n\ncode block\n# Set map to static\ntmap_mode(\"plot\")\n\n# weekday morning moran I values\nmap_wdm_moran08 <- tm_shape(lisa08_wdm) +\n  tm_fill(\n    col = \"ii\",\n    palette = \"OrRd\",\n    style = \"pretty\",\n    title = \"Local Moran's I\"\n  ) +\n  tm_layout(main.title = \"Weekday Morning Peak Traffic\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.position = c(\"left\", \"top\"),\n            legend.height = .6,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekday morning p-values\nmap_wdm_pvalue <- tm_shape(lisa08_wdm) +\n  tm_fill(\n    col = \"p_ii_sim\",\n    palette = \"-BuGn\",\n    alpha = .8,\n    breaks = c(0, 0.001, 0.01, 0.05, 1),\n    labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not Sig\"),\n    title = \"p-value\"\n  ) + \n  tm_layout(main.title = \"p-values of Local Moran's I\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"top\"),\n            legend.height = .5,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekday evening moran I values\nmap_wde_moran08 <- tm_shape(lisa08_wde) +\n  tm_fill(\n    col = \"ii\",\n    palette = \"OrRd\",\n    style = \"pretty\",\n    title = \"Local Moran's I\"\n  ) +\n  tm_layout(main.title = \"Weekday Evening Peak Traffic\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.position = c(\"left\", \"top\"),\n            legend.height = .6,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekday evening p-values\nmap_wde_pvalue <- tm_shape(lisa08_wde) +\n  tm_fill(\n    col = \"p_ii_sim\",\n    palette = \"-BuGn\",\n    alpha = .8,\n    breaks = c(0, 0.001, 0.01, 0.05, 1),\n    labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not Sig\"),\n    title = \"p-value\"\n  ) + \n  tm_layout(main.title = \"p-values of Local Moran's I\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"top\"),\n            legend.height = .5,\n            legend.width = .2,\n            frame = FALSE\n  )\n\ntmap_arrange(map_wdm_moran08, map_wdm_pvalue,\n             map_wde_moran08, map_wde_pvalue,\n             ncol = 2)\n\n\n\n\n\n\n\ncode block\nset.seed(8888)\n\n# Compute local moran's I simulation for weekend/PH morning peak\nlisa08_phm <- wm08 %>%\n  mutate(local_moran = local_moran(`Weekend/PH morning peak`,\n                                   nb,\n                                   wt,\n                                   nsim = 999),\n         .before = 1) %>%\n  unnest(local_moran) %>%\n  # only retain hexagons with a bus stop\n  filter(n_busstops > 0)\n\n# Compute local moran's I simulation for weekend/PH evening peak\nlisa08_phe <- wm08 %>%\n  mutate(local_moran = local_moran(`Weekend/PH evening peak`,\n                                   nb,\n                                   wt,\n                                   nsim = 999),\n         .before = 1) %>%\n  unnest(local_moran) %>%\n  # only retain hexagons with a bus stop\n  filter(n_busstops > 0)\n\n\n\n\ncode block\n# Set map to static\ntmap_mode(\"plot\")\n\n# weekend/PH  moran I values\nmap_phm_moran08 <- tm_shape(lisa08_phm) +\n  tm_fill(\n    col = \"ii\",\n    palette = \"RdPu\",\n    style = \"pretty\",\n    title = \"Local Moran's I\"\n  ) +\n  tm_layout(main.title = \"Weekend/PH Morning Peak Traffic\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.position = c(\"left\", \"top\"),\n            legend.height = .6,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekend/PH  p-values\nmap_phm_pvalue <- tm_shape(lisa08_phm) +\n  tm_fill(\n    col = \"p_ii_sim\",\n    palette = \"-BuGn\",\n    alpha = .8,\n    breaks = c(0, 0.001, 0.01, 0.05, 1),\n    labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not Sig\"),\n    title = \"p-value\"\n  ) + \n  tm_layout(main.title = \"p-values of Local Moran's I\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"top\"),\n            legend.height = .5,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekend/PH moran I values\nmap_phe_moran08 <- tm_shape(lisa08_phe) +\n  tm_fill(\n    col = \"ii\",\n    palette = \"RdPu\",\n    style = \"pretty\",\n    title = \"Local Moran's I\"\n  ) +\n  tm_layout(main.title = \"Weekend/PHEvening Peak Traffic\",\n            main.title.size = 1,\n            main.title.position = \"center\",\n            legend.position = c(\"left\", \"top\"),\n            legend.height = .6,\n            legend.width = .2,\n            frame = FALSE\n  )\n\n# weekend/PH evening p-values\nmap_phe_pvalue <- tm_shape(lisa08_phe) +\n  tm_fill(\n    col = \"p_ii_sim\",\n    palette = \"-BuGn\",\n    alpha = .8,\n    breaks = c(0, 0.001, 0.01, 0.05, 1),\n    labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not Sig\"),\n    title = \"p-value\"\n  ) + \n  tm_layout(main.title = \"p-values of Local Moran's I\",\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            legend.position = c(\"right\", \"top\"),\n            legend.height = .5,\n            legend.width = .2,\n            frame = FALSE\n  )\n\ntmap_arrange(map_phm_moran08, map_phm_pvalue,\n             map_phe_moran08, map_phe_pvalue,\n             ncol = 2)\n\n\n\n\n\nFrom comparing the maps above, we can detect multiple clusters that are significant and possess high, positive Local Moran’s I values. In general, there are more clusters during Weekday morning peak hours compared to evening, while the number of clusters during Weekends or Public holiday morning and evening peak periods do not show large variation. To visualise the extent of the spatial clustering, we look at the mean Local Moran’s I cluster quadrants, computed as variable mean."
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#visualising-local-moran-clusters",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#visualising-local-moran-clusters",
    "title": "Take-home Ex 1",
    "section": "9.3 Visualising Local Moran Clusters",
    "text": "9.3 Visualising Local Moran Clusters\nThe spatial clusters are visualised in the map below, with one showing all values and the other displaying only statistically significant clusters (p-value <0.05):\n\n\ncode block\ncolors <- c(\"#4d5887\", \"#B1EDE8\", \"#f5bc5f\", \"salmon\")\n\ntmap_mode(\"plot\")\n\nmean_wdm <- lisa08_wdm  %>%\n  filter(p_ii_sim < 0.05)\n\n# All significant values\nplot_wdm_all <- \n  tm_shape(lisa08_wdm) +\n  tm_fill(\n    col = \"mean\",\n    style = \"cat\",\n    palette = colors\n  ) +\n  tm_layout(\n    main.title = \"Local Moran Clusters (All)\",\n    main.title.size = .8,\n    main.title.position = \"center\",\n    frame = FALSE)\n\nplot_wdm_mean <- \n  tm_shape(lisa08_wdm) +\n  tm_polygons(\n    col = \"#ffffff\"\n  ) +\n  tm_borders(col = NA) +\n  tm_shape(mean_wdm) +\n  tm_fill(\n    col = \"mean\",\n    style = \"cat\",\n    palette = colors\n  ) +\n  tm_layout(\n    main.title = \"Local Moran Clusters (Significant)\",\n    main.title.size = .8,\n    main.title.position = \"center\",\n    frame = FALSE)\n\ntmap_arrange(plot_wdm_all, plot_wdm_mean,\n             ncol = 2)\n\n\n\n\n\nWe can deduce that there are 2 main types of statistically significant clusters present during Weekday Morning Peak Periods:\n\nHigh-High clusters suggest spatial autocorrelation, indicating that areas with similar attribute values are clustered together to form possible hot spots for passenger congestion\nLow-High clusters suggest spatial outliers, where areas with dissimilar attribute values are located near each other. Passenger volume is much lower and these ares are not flagged for possible congestion."
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#fa-sun-weekday-morning-peak-periods",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#fa-sun-weekday-morning-peak-periods",
    "title": "Take-home Ex 1",
    "section": "9.4  Weekday Morning Peak Periods",
    "text": "9.4  Weekday Morning Peak Periods\n\n\ncode block\ntmap_mode(\"view\")\n\nplot_wdm <- tm_basemap(\"OneMapSG.Grey\") +\n  tm_shape(mean_wdm) +\n  tm_fill(\n    c(\"Weekday morning peak\", \"mean\"),\n    alpha = .7,\n    title = c(\"Passenger Volume\", \"Cluster\"),\n    popup.vars = c(\"Hex ID: \" = \"hex_id\", \n                   \"Cluster\" = \"mean\",\n                   \"No. of bus stops: \" = \"n_busstops\",\n                   \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                   \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  ) +\n  tm_layout(\n    title = \"Weekday Morning Peak Traffic\",\n    title.size = 1\n  )\n\nplot_wdm"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#fa-moon-weekday-evening-peak-periods",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#fa-moon-weekday-evening-peak-periods",
    "title": "Take-home Ex 1",
    "section": "9.5  Weekday Evening Peak Periods",
    "text": "9.5  Weekday Evening Peak Periods\n\n\ncode block\nmean_wde <- lisa08_wde  %>%\n  filter(p_ii_sim < 0.05)\n\nplot_wde <- tm_basemap(\"OneMapSG.Night\") +\n  tm_shape(mean_wde) +\n  tm_fill(\n    c(\"Weekday evening peak\", \"mean\"),\n    alpha = .7,\n    title = c(\"Passenger Volume\", \"Cluster\"),\n    popup.vars = c(\"Hex ID: \" = \"hex_id\", \n                   \"Cluster\" = \"mean\",\n                   \"No. of bus stops: \" = \"n_busstops\",\n                   \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                   \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  ) +\n  tm_layout(\n    title = \"Weekday Evening Peak Traffic\",\n    title.size = 1\n  )\n\nplot_wde"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#fa-sun-weekendpublic-holiday-morning-peak-periods",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#fa-sun-weekendpublic-holiday-morning-peak-periods",
    "title": "Take-home Ex 1",
    "section": "9.6  Weekend/Public Holiday Morning Peak Periods",
    "text": "9.6  Weekend/Public Holiday Morning Peak Periods\n\n\ncode block\nmean_phm <- lisa08_phm  %>%\n  filter(p_ii_sim < 0.05)\n\ntmap_mode(\"view\")\n\nplot_phm <- tm_basemap(\"OneMapSG.Grey\") +\n  tm_shape(mean_phm) +\n  tm_fill(\n    c(\"Weekend/PH morning peak\", \"mean\"),\n    alpha = .7,\n    title = c(\"Passenger Volume\", \"Cluster\"),\n    popup.vars = c(\"Hex ID: \" = \"hex_id\", \n                   \"Cluster\" = \"mean\",\n                   \"No. of bus stops: \" = \"n_busstops\",\n                   \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                   \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  ) +\n  tm_layout(\n    title = \"Weekend/PH Morning Peak Traffic\",\n    title.size = 1\n  )\n\nplot_phm"
  },
  {
    "objectID": "Take-home_Ex/the1/Take-home_ex1.html#fa-moon-weekendpublic-holiday-evening-peak-periods",
    "href": "Take-home_Ex/the1/Take-home_ex1.html#fa-moon-weekendpublic-holiday-evening-peak-periods",
    "title": "Take-home Ex 1",
    "section": "9.7  Weekend/Public Holiday Evening Peak Periods",
    "text": "9.7  Weekend/Public Holiday Evening Peak Periods\n\n\ncode block\nmean_phe <- lisa08_phe  %>%\n  filter(p_ii_sim < 0.05)\n\ntmap_mode(\"view\")\n\nplot_phe <- tm_basemap(\"OneMapSG.Night\") +\n  tm_shape(mean_phe) +\n  tm_fill(\n    c(\"Weekend/PH evening peak\", \"mean\"),\n    alpha = .7,\n    title = c(\"Passenger Volume\", \"Cluster\"),\n    popup.vars = c(\"Hex ID: \" = \"hex_id\", \n                   \"Cluster\" = \"mean\",\n                   \"No. of bus stops: \" = \"n_busstops\",\n                   \"Weekday Morning traffic: \" = \"Weekday morning peak\",\n                   \"Bus Stop codes: \" = \"busstop_codes\")\n  ) +\n  tm_facets(\n    sync = TRUE, \n    ncol = 1\n  ) +\n  tm_layout(\n    title = \"Weekend/PH Evening Peak Traffic\",\n    title.size = 1\n  )\n\nplot_phe\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several key insights to be drawn from the maps presented above:\n\nWeekday Morning and Evening Peak Timings have similar hot spot clusters, concentrated around MRT Stations of residential neighbourhoods such as Woodlands, Yishun, Ang Mo Kio, etc.\nHowever, Weekday Evening Peak Periods reveal clusters of high traffic in the Central, CBD area as well. As the aggregation of trips is based on point of origin, this shows that the general traffic flows outward from the CBD area after working hours.\nWeekend/Public Holiday Morning and Evening Peak traffic have similar high-high clusters as well, even though the absolute volume of passenger trips is lower. This could be due to more people driving rather than commuting via bus.\nHot spot clusters around residential neighborhoods’ MRT stations persists on Weekends/PH as well, suggesting a high population density in those areas."
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#what-is-the-distribution-of-trips",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#what-is-the-distribution-of-trips",
    "title": "In-class Ex 3",
    "section": "6.1 What is the distribution of trips?",
    "text": "6.1 What is the distribution of trips?\n\nset_urbn_defaults(style = \"print\")\n\nggplot(data = flow_data1,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThe distribution is highly right-skewed."
  },
  {
    "objectID": "In-class_Ex/ice3/In-class_Ex03.html#what-is-the-correlation-between-distance-and-number-of-trips",
    "href": "In-class_Ex/ice3/In-class_Ex03.html#what-is-the-correlation-between-distance-and-number-of-trips",
    "title": "In-class Ex 3",
    "section": "6.2 What is the correlation between distance and number of trips?",
    "text": "6.2 What is the correlation between distance and number of trips?\nNext, we visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model – distance:\n\nggplot(data = flow_data1,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point(\n    size = .5\n  ) +\n  geom_smooth(method = lm)\n\n\n\n\nggscatterstats( data = flow_data1, ## data frame from which variables are taken x = dist, ## predictor/independent variable y = TRIPS, ## dependent variable xlab = “Distance (m)”, ylab = “No. of Trips”, title = “Relationship between Distance and No. of Trips” )\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\nggplot(data = flow_data1,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point(\n    size = .5\n  ) +\n  geom_smooth(method = lm)"
  },
  {
    "objectID": "Hands-on_Ex/hoe4/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/hoe4/Hands-on_Ex04.html",
    "title": "Hands-on Ex 4",
    "section": "",
    "text": "Geographically weighted regression (GWR)\nGeographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nThis exercise will build hedonic pricing models using GWR methods. The dependent variable is the resale prices of condominiums in 2015, while the independent variables are divided into either structural or locational categories.\n\nWhat Is Hedonic Pricing?\nIt is a model that identifies price factors according to the premise that price is determined both by internal characteristics of the good being sold and external factors affecting it.\n\nIt is most often seen in the housing market, since real estate prices are determined by the characteristics of the property itself as well as the neighborhood or environment within which it exists\nThis pricing model captures a consumer’s willingness to pay for what they perceive are environmental differences that add or detract from the intrinsic value of an asset or property"
  },
  {
    "objectID": "In-class_Ex/ice4/In-class_Ex04.html",
    "href": "In-class_Ex/ice4/In-class_Ex04.html",
    "title": "In-class Ex 4",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, httr, tmap, performance, ggpubr)"
  },
  {
    "objectID": "In-class_Ex/ice4/In-class_Ex04.html#reimporting-schools-into-r-environment",
    "href": "In-class_Ex/ice4/In-class_Ex04.html#reimporting-schools-into-r-environment",
    "title": "In-class Ex 4",
    "section": "2.1 Reimporting schools into R environment",
    "text": "2.1 Reimporting schools into R environment\n\nschools <- read_csv(\"data/aspatial/schools.csv\")\n\n\nschools <- schools %>%\n  rename(\n    latitude = results.LATITUDE,\n    longitude = results.LONGITUDE\n  ) %>%\n  select(\n    postal_code,\n    school_name,\n    latitude,\n    longitude\n  )"
  },
  {
    "objectID": "In-class_Ex/ice4/In-class_Ex04.html#converting-into-sf-dataframe",
    "href": "In-class_Ex/ice4/In-class_Ex04.html#converting-into-sf-dataframe",
    "title": "In-class Ex 4",
    "section": "2.2 Converting into sf dataframe:",
    "text": "2.2 Converting into sf dataframe:\n\nschools_sf <- st_as_sf(schools,\n                       coords = c(\"longitude\", \"latitude\"),\n   # geocoding returns long & lat data projected in WGS84 form, with CRS 4326\n   # This portion is required for st_as_sf to parse the lon/lat information\n                       crs = 4326) %>%\n              st_transform(crs = 3414)\n\nschools_sf\n\nSimple feature collection with 350 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11750.82 ymin: 28579.85 xmax: 42410.51 ymax: 48689.82\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 350 × 3\n   postal_code school_name                            geometry\n *       <dbl> <chr>                               <POINT [m]>\n 1       88256 CANTONMENT PRIMARY SCHOOL      (28748.16 28660)\n 2       99138 CHIJ ST. THERESA'S CONVENT  (26789.38 28647.44)\n 3       99757 CHIJ (KELLOCK)              (27402.96 28579.85)\n 4       99840 RADIN MAS PRIMARY SCHOOL    (26983.87 28603.93)\n 5      109100 BLANGAH RISE PRIMARY SCHOOL (25248.36 28733.28)\n 6      127368 KENT RIDGE SECONDARY SCHOOL (20384.47 31508.77)\n 7      127391 TANGLIN SECONDARY SCHOOL     (19635.38 32445.8)\n 8      128104 QIFA PRIMARY SCHOOL          (19477.9 32838.29)\n 9      128806 NAN HUA PRIMARY SCHOOL      (19962.23 33496.24)\n10      129857 PEI TONG PRIMARY SCHOOL     (20695.32 33200.66)\n# ℹ 340 more rows\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(schools_sf) +\n  tm_dots() +\n  tm_view(set.zoom.limits = c(11,14))"
  },
  {
    "objectID": "In-class_Ex/ice4/In-class_Ex04.html#importing-planning-subzone-geospatial-layer",
    "href": "In-class_Ex/ice4/In-class_Ex04.html#importing-planning-subzone-geospatial-layer",
    "title": "In-class Ex 4",
    "section": "2.3 Importing Planning Subzone geospatial layer",
    "text": "2.3 Importing Planning Subzone geospatial layer\n\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %>%\n          st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\In-class_Ex\\ice4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nUse st_within() or st_intersects() to get number of schools per planning subzone\n\nmpsz$SCHOOL_COUNT <- lengths(\n  st_intersects(\n    mpsz, schools_sf)\n)\n\n\nbusiness <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Business' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\In-class_Ex\\ice4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_mode(\"plot\")\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(business) +\n  tm_dots()\n\n\n\n\nflow_data <- flow_data %>% left_join(mpsz_tidy, # Use destination data to understand attractiveness of flow by = c(“DESTIN_SZ” = “SUBZONE_C”))\nCheck for 0 values before performing regression. Recode this with small values between 0 - 1 (due to log transformation)"
  },
  {
    "objectID": "In-class_Ex/ice4/In-class_Ex04.html#fit-an-origin-constrained-sim-by-using-the-following-code",
    "href": "In-class_Ex/ice4/In-class_Ex04.html#fit-an-origin-constrained-sim-by-using-the-following-code",
    "title": "In-class Ex 4",
    "section": "3.1 fit an origin constrained SIM by using the following code:",
    "text": "3.1 fit an origin constrained SIM by using the following code:\norcSIM_Poisson <- glm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + # DIST will be negative (inverse relationship between further # distance and attractiveness) log(DIST) -1, family = poisson(link = “log”), data = inter_zonal_flow, na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\nLook at the last three lines to interpret how important each factor is in terms of attractiveness.\n\nCreate function to calculate \\(R_2\\) value\n\nCalcRSquared <- function(observed,estimated){\n  r <- cor(observed,estimated)\n  R2 <- r^2\n  R2\n}\n\nCalcRSquared(orcSIM_Poisson\\(data\\)TRIPS, orcSIM_Poisson$fitted.values)\nUse RMSE, one of the two main performance indicators for a regression model. It measures the average difference between values predicted by a model and the actual values. It provides an estimation of how well the model is able to predict the target value (accuracy).\nThe lower the value of the Root Mean Squared Error, the better the model is. A perfect model (a hypothetic model that would always predict the exact expected value) would have a Root Mean Squared Error value of 0.\nperformance_rmse(orcSIM_Poisson, normalized = FALSE)"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html",
    "href": "Take-home_Ex/the2/Take-home_ex2.html",
    "title": "Take-home Ex 2",
    "section": "",
    "text": "Singapore Train commuter flows"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#aspatial-data",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#aspatial-data",
    "title": "Take-home Ex 2",
    "section": "3.1 Aspatial Data",
    "text": "3.1 Aspatial Data\nThis study uses 2 aspatial datasets pertaining to Public Train Trips:\n\ntrain, a dataset from LTA Datamall, Passenger Volume by Origin Destination Train Stations for October 2023.\ntrain_codes, also from LTA Datamall, lists train station codes and names. This is used to assign MRT train station codes to the geospatial data set with train station locations.\n\n\ntraintrain_codes\n\n\nThe downloaded dataset is in .csv format. We use the function read_csv() to import the data into the R environment.\n\ntrain_oct23 <- read_csv(\"data/aspatial/origin_destination_train_202310.csv\")\n\n# remove any duplicated rows\ntrain_oct23 <- distinct(train_oct23)\n\nstr(train_oct23)\n\ntibble [800,595 × 7] (S3: tbl_df/tbl/data.frame)\n $ YEAR_MONTH         : chr [1:800595] \"2023-10\" \"2023-10\" \"2023-10\" \"2023-10\" ...\n $ DAY_TYPE           : chr [1:800595] \"WEEKENDS/HOLIDAY\" \"WEEKDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKDAY\" ...\n $ TIME_PER_HOUR      : num [1:800595] 9 6 12 12 12 12 19 19 9 9 ...\n $ PT_TYPE            : chr [1:800595] \"TRAIN\" \"TRAIN\" \"TRAIN\" \"TRAIN\" ...\n $ ORIGIN_PT_CODE     : chr [1:800595] \"EW32\" \"BP4\" \"NE15\" \"SW5\" ...\n $ DESTINATION_PT_CODE: chr [1:800595] \"DT24\" \"EW31\" \"SW5\" \"NE15\" ...\n $ TOTAL_TRIPS        : num [1:800595] 1 22 51 87 48 73 1 3 1 2 ...\n\n\ntrain_oct23 is a tibble dataframe consisting of the following variables:\n\nYEAR_MONTH: Month of data collection in YYYY-MM format\nDAY_TYPE: Category of Day\nTIME_PER_HOUR: Extracted hour of day\nPT_TYPE: Public transport type\nORIGIN_PT_CODE: ID of Trip Origin Train Station\nDESTINATION_PT_CODE: ID of Trip Destination Train Station\nTOTAL_TRIPS: Sum of trips made per origin-Destination\n\n\nHmisc::describe(train_oct23)\n\ntrain_oct23 \n\n 7  Variables      800595  Observations\n--------------------------------------------------------------------------------\nYEAR_MONTH \n       n  missing distinct    value \n  800595        0        1  2023-10 \n                  \nValue      2023-10\nFrequency   800595\nProportion       1\n--------------------------------------------------------------------------------\nDAY_TYPE \n       n  missing distinct \n  800595        0        2 \n                                            \nValue               WEEKDAY WEEKENDS/HOLIDAY\nFrequency            424314           376281\nProportion             0.53             0.47\n--------------------------------------------------------------------------------\nTIME_PER_HOUR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n  800595        0       20    0.997    14.01    6.042        6        7 \n     .25      .50      .75      .90      .95 \n      10       14       18       21       22 \n                                                                            \nValue          0     5     6     7     8     9    10    11    12    13    14\nFrequency   4083 23741 37878 42772 43653 43289 43466 44412 45463 45298 44883\nProportion 0.005 0.030 0.047 0.053 0.055 0.054 0.054 0.055 0.057 0.057 0.056\n                                                                \nValue         15    16    17    18    19    20    21    22    23\nFrequency  45358 46141 47505 46815 44605 42622 41491 38360 28760\nProportion 0.057 0.058 0.059 0.058 0.056 0.053 0.052 0.048 0.036\n\nFor the frequency table, variable is rounded to the nearest 0\n--------------------------------------------------------------------------------\nPT_TYPE \n       n  missing distinct    value \n  800595        0        1    TRAIN \n                 \nValue       TRAIN\nFrequency  800595\nProportion      1\n--------------------------------------------------------------------------------\nORIGIN_PT_CODE \n       n  missing distinct \n  800595        0      171 \n\nlowest : BP10 BP11 BP12 BP13 BP2 , highest: TE4  TE5  TE6  TE7  TE8 \n--------------------------------------------------------------------------------\nDESTINATION_PT_CODE \n       n  missing distinct \n  800595        0      171 \n\nlowest : BP10 BP11 BP12 BP13 BP2 , highest: TE4  TE5  TE6  TE7  TE8 \n--------------------------------------------------------------------------------\nTOTAL_TRIPS \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n  800595        0     4672    0.998      104    171.3        1        1 \n     .25      .50      .75      .90      .95 \n       4       15       60      214      455 \n\nlowest :     1     2     3     4     5, highest: 16799 17670 18763 19585 21050\n--------------------------------------------------------------------------------\n\n\n\nFrom the summary statistics above, we can derive that:\n\nThere are 800,959 Origin-Destination (OD) trips made in October 2023\nData is collected for 24 hours, starting from 0 Hrs to 23 Hrs in TIME_PER_HOUR\nThe highest number of trips for an OD route is 21,050, while the 95th Percentile is only 455. This suggests a highly right-skewed distribution, with particularly busy routes.\n\n\nAs we are interested in studying the passenger flows for peak hour periods only, the number of trips are calculated for each period as defined below:\n\n\n\nPeak Period\nTap in Time (hr)\n\n\n\n\nWeekday Morning\n6 - 9\n\n\nWeekday Evening\n17 - 20\n\n\nWeekend/PH Morning\n11 - 14\n\n\nWeekend/PH Evening\n16 - 19\n\n\n\nThe dataframe now shows the traffic volume by peak period for each Origin-Destination route:\n\n\ncode block\ntrain_od <- train_oct23 %>%\n   # Categorize trips under period based on day and timeframe\n  mutate(period = ifelse(DAY_TYPE == \"WEEKDAY\" & \n                         TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9, \n                         \"Weekday morning peak\",\n                    ifelse(DAY_TYPE == \"WEEKDAY\" & \n                           TIME_PER_HOUR >= 17 & TIME_PER_HOUR <= 20,\n                           \"Weekday evening peak\",\n                      ifelse(DAY_TYPE == \"WEEKENDS/HOLIDAY\" &\n                             TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14,\n                              \"Weekend/PH morning peak\",\n                        ifelse(DAY_TYPE == \"WEEKENDS/HOLIDAY\" & \n                              TIME_PER_HOUR >= 16 & TIME_PER_HOUR <= 19,\n                               \"Weekend/PH evening peak\",\n                    \"Others\"))))\n  ) %>%\n  # Only retain needed periods for analysis\n  filter(\n    period != \"Others\"\n  ) %>%\n # compute number of trips per origin busstop per month for each period\n  group_by(\n    ORIGIN_PT_CODE,\n    DESTINATION_PT_CODE,\n    period\n  ) %>%\n  summarise(\n    num_trips = sum(TOTAL_TRIPS)\n  ) %>%\n  # change all column names to lowercase\n  rename_with(\n    tolower, everything()\n  ) %>%\n  ungroup()\n\n\n\nThere are several instances where ORIGIN_PT_CODE and DESTINATION_PT_CODE are not composite codes, representing MRT Stations that are interchanges with multiple station lines. For the purpose of this investigation, only a single station code is required.\n\n\n\ncode block\ntrain_od <- train_od %>%\n  separate_wider_delim(origin_pt_code,\n                       delim = \"/\", \n                       names = c(\"origin_station_code\", \"unused_origin\"),\n                    # to capture first station for those without multiples\n                       too_few = \"align_start\",\n                    # to remove any other unused station columns for 3 or more\n                       too_many = \"drop\"\n  ) %>%\n  separate_wider_delim(destination_pt_code,\n                       delim = \"/\", \n                       names = c(\"dest_station_code\", \"unused_dest\"),\n                       too_few = \"align_start\",\n                       too_many = \"drop\"\n  ) %>%\n  select(\n    origin_station_code,\n    dest_station_code,\n    period,\n    num_trips\n  )\n\nDT::datatable(head(train_od,20))\n\n\n\n\n\n\n\n\n\nThis dataset lists train station codes and names. It is used to join with the geospatial dataset for station identification.\n\ntrain_codes <- read_csv(\"data/aspatial/train_codes.csv\")\n\nstr(train_codes)\n\nspc_tbl_ [203 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ stn_code           : chr [1:203] \"NS1\" \"NS2\" \"NS3\" \"NS4\" ...\n $ mrt_station_english: chr [1:203] \"Jurong East\" \"Bukit Batok\" \"Bukit Gombak\" \"Choa Chu Kang\" ...\n $ mrt_line_english   : chr [1:203] \"North-South Line\" \"North-South Line\" \"North-South Line\" \"North-South Line\" ...\n $ type               : chr [1:203] \"MRT\" \"MRT\" \"MRT\" \"MRT\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   stn_code = col_character(),\n  ..   mrt_station_english = col_character(),\n  ..   mrt_line_english = col_character(),\n  ..   type = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#geospatial-data",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#geospatial-data",
    "title": "Take-home Ex 2",
    "section": "4.1 Geospatial Data",
    "text": "4.1 Geospatial Data\nThe following geospatial dataframes are used for this exercise:\n\ntrain_station, the location of train stations (RapidTransitSystemStation) from LTA Datamall\nBusiness, entertn, fnb, finserv, recreation and retail, geospatial data sets of the locations of business establishments, entertainments, food and beverage outlets, financial centres, leisure and recreation centres, retail and services stores/outlets compiled for urban mobility studies\nmpsz, masterplan boundary 2019"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#preparing-geospatial-files-train-station",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#preparing-geospatial-files-train-station",
    "title": "Take-home Ex 2",
    "section": "4.2 Preparing Geospatial Files: train station",
    "text": "4.2 Preparing Geospatial Files: train station\nAs the files are all based on Singapore Maps, they are in SVY21 coordinate reference system (CRS) and projected in ESPG code 3414 using st_transform()\n\nloading train_station and mpsz Removing duplicates Cleaning up station names Joining station names to get station codes Checking geometry layer\n\n\ntrain_station is a Simple feature polygon layer based on SVY21 coordinate reference system (CRS).\n\ntrain_station <- st_read(dsn = \"data/geospatial\",\n                         layer = \"RapidTransitSystemStation\") %>%\n          st_transform(crs = 3414)\n\nReading layer `RapidTransitSystemStation' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 220 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n\n\n\nDataset limitations\n\ntrain_station only lists the Type of station (MRT or LRT), Station name and geolocation of each station. There is no station code to join with the aspatial dataset. Thus, the use of train_codes is needed to assign a unique train code identifier to each station\nThere are only 203 Station codes in train_codes, compared to 220 entries in train_station. There may be duplicated station names, which needs further investigation.\nGDAL Message 1: Non closed ring detected – This warning message was received when loading in the geospatial layer. This means that there are polygons that are not closed (starting and ending points are not joined). There is a need for further geospatial data wrangling to rectify this.\n\n\n\n\ncode block\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\nChecking for duplicated station entires in train_station:\n\ntrain_duplicates <- train_station %>%\n  # remove geometry layer\n  st_set_geometry(NULL) %>%\n  group_by(TYP_CD_DES,\n           STN_NAM_DE\n  ) %>%\n  # count number of rows per train station\n  summarise(\n    count = n()\n  ) %>%\n  ungroup() %>%\n  # retrieve stations with more than single row\n  filter(count > 1)\n\nDT::datatable(train_duplicates)\n\n\n\n\n\n\nThe code above reveals that there are several entries for the stations above in train_station. This may be due to the fact that some stations are interchanges and have multiple train lines. However, there is no way to differentiate this without station code, and this study will assume that the location of these stations are within the same boundary anyway. Only one geospatial entry per station is selected using slice():\n\n# Remove duplicates on selected columns\ntrain_station <- train_station %>%\n  group_by(STN_NAM_DE) %>%\n  slice(1) %>%\n  st_as_sf()\n\n\n\nAs train_station does not have station codes that may be joined to the OD dataset for analysis, it is joined to train_codes by train station name. However, the station names in train_codes are in lowercase and without the suffix “MRT STATION” in the station names – there is thus an extra layer of data wrangling to be done before joining.\n\ntrain_codes_new <- train_codes %>%\n  # Assign suffix to train station names and change to upper case\n  mutate(station_name = ifelse(type == \"MRT\", \n                               paste0(toupper(mrt_station_english), \" MRT STATION\"),\n                               paste0(toupper(mrt_station_english), \" LRT STATION\"))\n  )\n\n\n\nThe code chunk below assigns train station code to the geospatial layer to identify each station by code.\n\ntrain_station_comb <- train_station %>%\n  left_join(train_codes_new,\n            by = join_by(STN_NAM_DE == station_name,\n                         TYP_CD_DES == type)\n  ) %>%\n  select(\n    stn_code,\n    STN_NAM_DE,\n    TYP_CD_DES\n  )\n\nThere are several stations that have no stn_code:\n\n\ncode block\ntrain_station_comb %>%\n  filter(is.na(stn_code)) %>%\n  datatable()\n\n\n\n\n\n\n\nAs these are mainly train depots that are not identified by code and irrelvant to analysis of OD flows, these are removed from the dataset and saved as a new file, train_station_list:\n\ntrain_station_list <- train_station_comb %>%\n  filter(!is.na(stn_code))\n\n\n\nWe use st_is_valid() to retrieve the invalid polygon datapoints in train_station_list:\n\n# Retrieve invalid geometries\ninvalid_indices <- which(!st_is_valid(train_station_list))\nprint(invalid_indices)\n\n[1] 195\n\n\nThe code chunk above reveals that index 195 is invalid. This is identified as UPPER THOMSON MRT STATION:\n\nprint(train_station_list[195,])\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 27808.12 ymin: 37278.27 xmax: 28080.89 ymax: 37543.25\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1 × 4\n# Groups:   STN_NAM_DE [1]\n  stn_code STN_NAM_DE                TYP_CD_DES                         geometry\n  <chr>    <chr>                     <chr>                         <POLYGON [m]>\n1 TE8      UPPER THOMSON MRT STATION MRT        ((27808.12 37518.2, 27811.57 37…\n\n\nTo rectify this invalid geometry, use st_make_valid():\n\ntrain_station_valid <- st_make_valid(train_station_list)\n\nCheck validity of the geometry layer again:\n\ninvalid_indices2 <- which(!st_is_valid(train_station_valid))\nprint(invalid_indices2)\n\ninteger(0)\n\n\nThe code chunk shows that there are no more invalid geometries in the file. \n\n# Save as file \nwrite_rds(train_station_valid, \"data/rds/train_station_valid.rds\")\n\n\n\n\n\n\ncode block\ntrain_station_valid <- read_rds(\"data/rds/train_station_valid.rds\")\n\ntmap_mode(\"view\")\n\ntm_basemap(\"OneMapSG.Grey\") +\ntm_shape(train_station_valid) +\n  tm_dots()"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#fa-wrench-creating-hexagon-grid",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#fa-wrench-creating-hexagon-grid",
    "title": "Take-home Ex 2",
    "section": "4.3  Creating hexagon grid",
    "text": "4.3  Creating hexagon grid\nFrom the mapview above, the current simple features dataframe only shows the train stations as points on the map, which not suitable for understanding commuter flows between areas. In urban transportation planning, Traffic Analysis Zones (TAZ) are the basic units of spatial areas delineated to tabulate traffic-related models.\nThe following code chunks create a hexagonal grid frame spanning 750m between edges for each hexagon:\n\nStep 1: make hexagon gridStep 2: Retrieve stations per hexagon TAZStep 3: Create sf dataframe unique at hex_id\n\n\n\n# create hexagon frame\ntrain_hex <- st_make_grid(\n    train_station_valid, \n    # for hexagonal cells, cellsize = the distance between opposite edges\n    cellsize = 750, \n    square = FALSE\n  ) %>%\n  st_sf() %>%\n  rowid_to_column(\"hex_id\")\n\nThis creates a hexagonal grid over the entire area:\n\n\ncode block\ntmap_mode(\"plot\")\nqtm(train_hex)\n\n\n\n\n\n\n\n\n# join to train station names\ntrain_stops <- st_join(\n    train_station_valid,\n    train_hex,\n    join = st_intersects\n  ) %>%\n  st_set_geometry(NULL) %>%\n  group_by(stn_code) %>%\n  summarise(\n  # Ensure that each station gets assigned to a single hex_id\n    hex_id = first(hex_id)\n  ) %>%\n  ungroup() %>%\n  group_by(hex_id) %>%\n  summarise(\n    station_count = n(),\n    station_codes = str_c(stn_code, collapse = \",\"),\n  ) %>%\n  ungroup()\n\n\n\n\ntrain_hex_final <- train_hex %>%\n  left_join(train_stops,\n          by = \"hex_id\"\n  ) %>%\n  replace(is.na(.), 0)\n\n\n\n\n\n\ncode block\n# Get hexagons with at least one station \ntrain_hex_filtered <- train_hex_final %>%\n  filter(station_count > 0)\n\ntmap_mode(\"view\")\n\n\ntm_basemap(\"OneMapSG.Grey\") +\n  tm_shape(train_hex_filtered) +\n  tm_fill(\n    col = \"station_count\",\n    palette = \"-RdYlGn\",\n    style = \"cont\",\n    id = \"hex_id\",\n    popup.vars = c(\"No. of Train Stations: \" = \"station_count\",\n                   \"Train station codes: \" = \"station_codes\"),\n    title = \" \"\n  ) +\n  tm_layout(\n    # Set legend.show to FALSE to hide the legend\n    legend.show = FALSE\n  )"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#preparing-origin-destination-flow-data",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#preparing-origin-destination-flow-data",
    "title": "Take-home Ex 2",
    "section": "5.1 Preparing Origin-Destination flow data",
    "text": "5.1 Preparing Origin-Destination flow data\nThe following steps are done to prepare O-D flow dataframes at hexagon level:\n\nExtract Station codes & hex_idsGet trip origin hex_idsGet trip destination hex_ids(Optional) Save file as RDS for future use\n\n\n\nstation_by_hex <- train_hex_final %>%\n  select(\n    hex_id,\n    station_codes\n  ) %>%\n  st_drop_geometry() %>%\n  # create separate rows for each hex_id - station_code pair\n  separate_rows(station_codes, \n                sep = \",\"\n  ) %>%\n  # drop any hexagon without stations\n  filter(station_codes != 0)\n\n\n\n\nod_data <- left_join(\n    weekday_pm_od, \n    station_by_hex,\n    by = c(\"origin_station_code\" = \"station_codes\")\n  ) %>%\n  rename(\n    origin_stn = origin_station_code,\n    origin_hex = hex_id,\n    dest_stn = dest_station_code\n  ) %>%\n  distinct()\n\n\n\n\nod_data <- left_join(\n    od_data,\n    station_by_hex,\n    by = c(\"dest_stn\" = \"station_codes\")\n  ) %>%\n  rename(\n    dest_hex = hex_id\n  ) %>%\n  group_by(\n    origin_hex,\n    dest_hex\n  ) %>%\n  summarise(\n    weekday_pm_trips = sum(num_trips)\n  ) %>%\n  ungroup()\n\n\n\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#visualising-spatial-interation",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#visualising-spatial-interation",
    "title": "Take-home Ex 2",
    "section": "5.2 Visualising Spatial Interation",
    "text": "5.2 Visualising Spatial Interation\nThe following steps are taken to visualise the traffic flows between TAZs.\n\nRemove intra-zonal flowsCreate Desire linesDistribution of OD flows\n\n\nAs we are only interested in inter-zonal flows, we remove the intra-zonal trips from od_data dataframe:\n\nod_data <- read_rds(\"data/rds/od_data.rds\")\n\nod_data_inter <- od_data[od_data$origin_hex!=od_data$dest_hex,]\n\n\n\nDesire lines are straight lines that connect origin to destination. od2line() function is used to create these:\n\nod_flow <- od2line(flow = od_data_inter, \n                    zones = train_hex_filtered,\n                    zone_code = \"hex_id\")\n\n\n\nquantile() reveals that there is a large range between 75% and 100% quantiles. This will affect the visualisation of OD flows.\n\nquantile(od_flow$weekday_pm_trips)\n\n      0%      25%      50%      75%     100% \n    1.00    36.00   161.00   648.75 63626.00 \n\n\n\n\n\nThe following map visualizes O-D passenger flows for Weekday PM trips > 20,000:\n\n\ncode block\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\n\ntm_shape(mpsz) +\n  tm_fill(\n    col = \"#dfdfeb\"\n    ) +\ntm_shape(train_hex_filtered) +\n  tm_fill(\n    col = \"station_count\",\n    palette = \"-RdYlGn\",\n    alpha = .8,\n    style = \"cont\",\n    # set legend title\n    title = \"Station Count\",\n    popup.vars = c(\"No. of Train Stations: \" = \"station_count\",\n                   \"TAZ: \" = \"hex_id\",\n                   \"Train station codes: \" = \"station_codes\")\n  ) +\n  tm_borders(\n    col = \"#dfdfeb\",\n    lwd = .5\n  ) +\nod_flow %>% \n  filter(weekday_pm_trips > 20000) %>%\ntm_shape() +\n  tm_lines(\n    lwd = \"weekday_pm_trips\",\n    scale = 1.5,\n    style = \"quantile\",\n    n = 6,\n    col = \"#451F55\",\n    alpha = .7\n  ) +\n  tm_layout(\n    title = \"Weekday Evening Peak Traffic Flow\",\n    scale = .9,\n    legend.stack = \"horizontal\",\n    legend.position = c(\"right\", \"bottom\"),\n    frame = FALSE\n  ) +\n  tmap_style(\"white\")\n\n\n\n\n\n.\n\nInsights from OD flow map\n\nA higher train station density in TAZs does not correlate to higher traffic. This is possibly due to the fact that a single station may encompass multiple lines (for instance, TAZ #1074 has the highest station density with 5 station codes, but this only corresponds to 3 stations: Marina Bay, Downtown & Shenton Way)\nThere are several TAZs with more flowlines, that are scattered across the country. This is suggestive of either being a key origin or destination zone for Weekday evenings. Namely:\n\nTAZ #1058 (Telok ayer and Raffles Place MRT Stations)\nTAZ #534 (Jurong East MRT Station)\nTAZ #988 (Yishun MRT Station)\n\nThere are also TAZs with fewer but thicker flowlines, indicating highly popular origin or destination train stations, that are likely to be congested during Weekday evening peak periods. These are:\n\nTAZ #1544 (Pasir Ris MRT Station)\nTAZ #1028 (Novena MRT Station)\nTAZ #774 (Woodlands MRT Station)\nTAZ #573 (Yew Tee MRT Station)\n\n\n\nTop 15 O-D flows by number of trips during Weekday Evening Peak Period:\n\n\ncode block\nod_data %>%\n  left_join(train_hex_filtered,\n            by = c(\"origin_hex\" = \"hex_id\")\n  ) %>%\n  rename(\n    origin_stations = station_codes\n  ) %>%\n  left_join(train_hex_filtered,\n            by = c(\"dest_hex\" = \"hex_id\")\n  ) %>%\n  rename(\n    dest_stations = station_codes\n  ) %>%\n  st_drop_geometry() %>%\n  select(origin_hex,\n         origin_stations,\n         dest_hex,\n         dest_stations,\n         weekday_pm_trips\n  ) %>%\n  arrange(desc(weekday_pm_trips)) %>%\n  slice_head(n = 15) %>%\n  datatable()\n\n\n\n\n\n\n\nThe table above reveals that Jurong East MRT Station is the busiest origin station, with top OD trips originating from there. Only 2 TAZs occurred multiple times as top destination stations: Boon Lay and Newton MRT Stations. The fact that these stations are not in the city centre is slightly surprising, as one would assume that the busiest origin station would be in the CBD area where people would be commuting from after work.\nFurther analysis is conducted by using Spatial Interaction Models (SIMs) to determine factors explaining flow density between these TAZs."
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#remove-intra-zonal-flows",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#remove-intra-zonal-flows",
    "title": "Take-home Ex 2",
    "section": "5.3 Remove intra-zonal flows",
    "text": "5.3 Remove intra-zonal flows\nAs we are only interested in inter-zonal flows, we remove the intra-zonal trips from od_data dataframe:\n\nod_data <- read_rds(\"data/rds/od_data.rds\")\n\nod_data_inter <- od_data[od_data$origin_hex!=od_data$dest_hex,]"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#create-desire-lines",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#create-desire-lines",
    "title": "Take-home Ex 2",
    "section": "5.4 Create Desire lines",
    "text": "5.4 Create Desire lines\nDesire lines are straight lines that connect origin to destination. od2line() function is used to create these:\n\nod_flow <- od2line(flow = od_data_inter, \n                    zones = train_hex_filtered,\n                    zone_code = \"hex_id\")"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#distribution-of-od-flows",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#distribution-of-od-flows",
    "title": "Take-home Ex 2",
    "section": "5.5 Distribution of OD flows",
    "text": "5.5 Distribution of OD flows\nquantile() reveals that there is a large range between 75% and 100% quantiles. This will affect the visualisation of OD flows.\n\nquantile(od_flow$weekday_pm_trips)\n\n      0%      25%      50%      75%     100% \n    1.00    36.00   161.00   648.75 63626.00 \n\n\n:::\n\n\ncode block\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\n\ntm_shape(train_hex_filtered) +\n  tm_fill(\n    col = \"station_count\",\n    palette = \"-RdYlGn\",\n    alpha = .7,\n    style = \"cont\",\n    # set legend title\n    title = \"Station Count\"\n  ) +\nod_flow %>% \n  filter(weekday_pm_trips > 10000) %>%\ntm_shape() +\n  tm_lines(\n    lwd = \"weekday_pm_trips\",\n    style = \"cont\",\n    n = 6,\n    col = \"#451F55\",\n    alpha = .5\n  ) +\n  tm_layout(\n    title = \"Weekday Evening Peak Traffic Flow\",\n    scale = .9,\n    legend.stack = \"horizontal\",\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE\n  ) +\n  tmap_style(\"classic\")"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#business",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#business",
    "title": "Take-home Ex 2",
    "section": "6.3 business",
    "text": "6.3 business\nbusiness is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nbusiness <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Business' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#entertainment",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#entertainment",
    "title": "Take-home Ex 2",
    "section": "6.4 entertainment",
    "text": "6.4 entertainment\nentertn is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nentertn <- st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %>%\n          st_transform(crs = 3414)\n\nReading layer `entertn' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#food-beverage",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#food-beverage",
    "title": "Take-home Ex 2",
    "section": "6.5 food & beverage",
    "text": "6.5 food & beverage\nfnb is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nfnb <- st_read(dsn = \"data/geospatial\",\n               layer = \"F&B\") %>%\n          st_transform(crs = 3414)\n\nReading layer `F&B' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#financial-services",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#financial-services",
    "title": "Take-home Ex 2",
    "section": "6.6 financial services",
    "text": "6.6 financial services\nfinserv is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nfinserv <- st_read(dsn = \"data/geospatial\",\n                  layer = \"FinServ\") %>%\n          st_transform(crs = 3414)\n\nReading layer `FinServ' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#recreational-facilities",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#recreational-facilities",
    "title": "Take-home Ex 2",
    "section": "6.7 recreational facilities",
    "text": "6.7 recreational facilities\nrecreation is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nrecreation <- st_read(dsn = \"data/geospatial\",\n                      layer = \"Liesure&Recreation\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Liesure&Recreation' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#retail-establishments",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#retail-establishments",
    "title": "Take-home Ex 2",
    "section": "6.8 retail establishments",
    "text": "6.8 retail establishments\nFinally, retail is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nretail <- st_read(dsn = \"data/geospatial\",\n                  layer = \"Retails\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Retails' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\n:::"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#create-hexagon-grid-frame",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#create-hexagon-grid-frame",
    "title": "Take-home Ex 2",
    "section": "7.1 Create hexagon grid frame",
    "text": "7.1 Create hexagon grid frame"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/Business.html",
    "href": "Take-home_Ex/the2/data/geospatial/Business.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/entertn.html",
    "href": "Take-home_Ex/the2/data/geospatial/entertn.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/F&B.html",
    "href": "Take-home_Ex/the2/data/geospatial/F&B.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/FinServ.html",
    "href": "Take-home_Ex/the2/data/geospatial/FinServ.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/Liesure&Recreation.html",
    "href": "Take-home_Ex/the2/data/geospatial/Liesure&Recreation.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/data/geospatial/Retails.html",
    "href": "Take-home_Ex/the2/data/geospatial/Retails.html",
    "title": "haileycsy",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#hdb",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#hdb",
    "title": "Take-home Ex 2",
    "section": "6.2 hdb",
    "text": "6.2 hdb\nThe dataset is also in .csv format:\n\nhdb <- read_csv(\"data/aspatial/hdb.csv\")\n\n# Remove any duplicated rows\nhdb <- distinct(hdb)\n\nstr(hdb)\n\ntibble [12,442 × 37] (S3: tbl_df/tbl/data.frame)\n $ ...1                 : num [1:12442] 0 1 2 3 4 5 6 7 8 9 ...\n $ blk_no               : chr [1:12442] \"1\" \"1\" \"1\" \"1\" ...\n $ street               : chr [1:12442] \"BEACH RD\" \"BEDOK STH AVE 1\" \"CANTONMENT RD\" \"CHAI CHEE RD\" ...\n $ max_floor_lvl        : num [1:12442] 16 14 2 15 4 25 12 14 12 2 ...\n $ year_completed       : num [1:12442] 1970 1975 2010 1982 1975 ...\n $ residential          : chr [1:12442] \"Y\" \"Y\" \"N\" \"Y\" ...\n $ commercial           : chr [1:12442] \"Y\" \"N\" \"Y\" \"N\" ...\n $ market_hawker        : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ miscellaneous        : chr [1:12442] \"N\" \"Y\" \"N\" \"N\" ...\n $ multistorey_carpark  : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ precinct_pavilion    : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ bldg_contract_town   : chr [1:12442] \"KWN\" \"BD\" \"CT\" \"BD\" ...\n $ total_dwelling_units : num [1:12442] 142 206 0 102 55 96 125 247 95 0 ...\n $ 1room_sold           : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 2room_sold           : num [1:12442] 1 0 0 0 0 0 0 0 0 0 ...\n $ 3room_sold           : num [1:12442] 138 204 0 0 54 0 118 0 62 0 ...\n $ 4room_sold           : num [1:12442] 1 0 0 10 0 0 0 0 0 0 ...\n $ 5room_sold           : num [1:12442] 2 2 0 92 1 96 7 0 33 0 ...\n $ exec_sold            : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ multigen_sold        : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ studio_apartment_sold: num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 1room_rental         : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 2room_rental         : num [1:12442] 0 0 0 0 0 0 0 247 0 0 ...\n $ 3room_rental         : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ other_room_rental    : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ lat                  : num [1:12442] 1.3 1.32 1.28 1.33 1.39 ...\n $ lng                  : num [1:12442] 104 104 104 104 104 ...\n $ building             : chr [1:12442] \"RAFFLES HOTEL\" \"NIL\" \"PINNACLE @ DUXTON\" \"PING YI GARDENS\" ...\n $ addr                 : chr [1:12442] \"1 BEACH ROAD RAFFLES HOTEL SINGAPORE 189673\" \"1 BEDOK SOUTH AVENUE 1 SINGAPORE 460001\" \"1 CANTONMENT ROAD PINNACLE @ DUXTON SINGAPORE 080001\" \"1 CHAI CHEE ROAD PING YI GARDENS SINGAPORE 461001\" ...\n $ postal               : chr [1:12442] \"189673\" \"460001\" \"080001\" \"461001\" ...\n $ SUBZONE_NO           : num [1:12442] 2 6 3 3 1 9 10 5 3 5 ...\n $ SUBZONE_N            : chr [1:12442] \"CITY HALL\" \"BEDOK SOUTH\" \"CHINATOWN\" \"KEMBANGAN\" ...\n $ SUBZONE_C            : chr [1:12442] \"DTSZ02\" \"BDSZ06\" \"OTSZ03\" \"BDSZ03\" ...\n $ PLN_AREA_N           : chr [1:12442] \"DOWNTOWN CORE\" \"BEDOK\" \"OUTRAM\" \"BEDOK\" ...\n $ PLN_AREA_C           : chr [1:12442] \"DT\" \"BD\" \"OT\" \"BD\" ...\n $ REGION_N             : chr [1:12442] \"CENTRAL REGION\" \"EAST REGION\" \"CENTRAL REGION\" \"EAST REGION\" ...\n $ REGION_C             : chr [1:12442] \"CR\" \"ER\" \"CR\" \"ER\" ...\n\n\nhdb is a geocoded list of HDB properties in Singapore, with information such as:\n\nblk_no & street: Address of the HDB Property\nmax_floor_lvl & year_completed: Characteristics of the HDB building, indicative of height and age\nresidential, commercial, market_hawker, miscellaneous, multistorey_carpark & precinct_pavilion , a series of boolean columns indicating if the HDB Property has the facilities\nbldg_contract_town: A code indicating HDB town\ntotal_dwelling_units: Number of units in the block\nxx_sold & xx_rental: multiple columns indicating number of units sold and rented per type\nlat & lng: Geocoded lattitude and longitudinal data pertaining to HDB location\nSUBZONE: Subzone information\n\n\nsummary(hdb)\n\n      ...1          blk_no             street          max_floor_lvl  \n Min.   :    0   Length:12442       Length:12442       Min.   : 1.00  \n 1st Qu.: 3110   Class :character   Class :character   1st Qu.: 6.00  \n Median : 6220   Mode  :character   Mode  :character   Median :12.00  \n Mean   : 6220                                         Mean   :12.03  \n 3rd Qu.: 9331                                         3rd Qu.:16.00  \n Max.   :12441                                         Max.   :50.00  \n                                                                      \n year_completed residential         commercial        market_hawker     \n Min.   :1937   Length:12442       Length:12442       Length:12442      \n 1st Qu.:1984   Class :character   Class :character   Class :character  \n Median :1993   Mode  :character   Mode  :character   Mode  :character  \n Mean   :1994                                                           \n 3rd Qu.:2001                                                           \n Max.   :2021                                                           \n                                                                        \n miscellaneous      multistorey_carpark precinct_pavilion  bldg_contract_town\n Length:12442       Length:12442        Length:12442       Length:12442      \n Class :character   Class :character    Class :character   Class :character  \n Mode  :character   Mode  :character    Mode  :character   Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n                                                                             \n total_dwelling_units   1room_sold         2room_sold        3room_sold    \n Min.   :  0.00       Min.   :  0.0000   Min.   :  0.000   Min.   :  0.00  \n 1st Qu.: 34.00       1st Qu.:  0.0000   1st Qu.:  0.000   1st Qu.:  0.00  \n Median : 90.00       Median :  0.0000   Median :  0.000   Median :  0.00  \n Mean   : 87.67       Mean   :  0.0205   Mean   :  2.415   Mean   : 19.66  \n 3rd Qu.:120.00       3rd Qu.:  0.0000   3rd Qu.:  0.000   3rd Qu.:  6.00  \n Max.   :584.00       Max.   :255.0000   Max.   :225.000   Max.   :528.00  \n                                                                           \n   4room_sold       5room_sold       exec_sold       multigen_sold    \n Min.   :  0.00   Min.   :  0.00   Min.   :  0.000   Min.   : 0.0000  \n 1st Qu.:  0.00   1st Qu.:  0.00   1st Qu.:  0.000   1st Qu.: 0.0000  \n Median : 22.00   Median :  0.00   Median :  0.000   Median : 0.0000  \n Mean   : 34.66   Mean   : 19.85   Mean   :  5.204   Mean   : 0.0295  \n 3rd Qu.: 58.00   3rd Qu.: 40.00   3rd Qu.:  0.000   3rd Qu.: 0.0000  \n Max.   :316.00   Max.   :164.00   Max.   :135.000   Max.   :66.0000  \n                                                                      \n studio_apartment_sold  1room_rental      2room_rental      3room_rental     \n Min.   :  0.0000      Min.   :  0.000   Min.   :  0.000   Min.   :  0.0000  \n 1st Qu.:  0.0000      1st Qu.:  0.000   1st Qu.:  0.000   1st Qu.:  0.0000  \n Median :  0.0000      Median :  0.000   Median :  0.000   Median :  0.0000  \n Mean   :  0.7066      Mean   :  2.476   Mean   :  2.504   Mean   :  0.1372  \n 3rd Qu.:  0.0000      3rd Qu.:  0.000   3rd Qu.:  0.000   3rd Qu.:  0.0000  \n Max.   :201.0000      Max.   :520.000   Max.   :452.000   Max.   :114.0000  \n                                                                             \n other_room_rental       lat             lng          building        \n Min.   : 0.00000   Min.   :1.270   Min.   :103.7   Length:12442      \n 1st Qu.: 0.00000   1st Qu.:1.336   1st Qu.:103.8   Class :character  \n Median : 0.00000   Median :1.363   Median :103.8   Mode  :character  \n Mean   : 0.00981   Mean   :1.365   Mean   :103.8                     \n 3rd Qu.: 0.00000   3rd Qu.:1.393   3rd Qu.:103.9                     \n Max.   :32.00000   Max.   :1.457   Max.   :104.0                     \n                                                                      \n     addr              postal            SUBZONE_NO      SUBZONE_N        \n Length:12442       Length:12442       Min.   : 1.000   Length:12442      \n Class :character   Class :character   1st Qu.: 2.000   Class :character  \n Mode  :character   Mode  :character   Median : 4.000   Mode  :character  \n                                       Mean   : 4.218                     \n                                       3rd Qu.: 5.000                     \n                                       Max.   :16.000                     \n                                       NA's   :1                          \n  SUBZONE_C          PLN_AREA_N         PLN_AREA_C          REGION_N        \n Length:12442       Length:12442       Length:12442       Length:12442      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   REGION_C        \n Length:12442      \n Class :character  \n Mode  :character"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#attractive-propulsive-factors",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#attractive-propulsive-factors",
    "title": "Take-home Ex 2",
    "section": "6.1 Attractive & Propulsive Factors",
    "text": "6.1 Attractive & Propulsive Factors\nThe factors listed above are computed at TAZ level for Spatial Interaction Modelling.\n\n6.1.1 Distance\nComputing the distance between Traffic analysis zones at a hexagonal level requires the computation of a distance matrix. This is a table that shows the Euclidean distance between each pair of locations, and is computed using the following steps:\n\nStep 1: Identify data typeStep 2: Create Distance Matrix using spDists()Step 3: Rename Column and Row headersStep 4: Reshape into O-D formStep 5: Updating occurrences of intra-zonal distance = 0\n\n\n\ntrain_hex_filtered\n\nSimple feature collection with 152 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 5693.209 ymin: 27079.48 xmax: 45443.21 ymax: 48730.11\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   hex_id station_count station_codes                       geometry\n1      23             1          EW33 POLYGON ((6068.209 34873.71...\n2      39             1          EW32 POLYGON ((6443.209 34224.19...\n3      88             1          EW31 POLYGON ((7568.209 33574.67...\n4     137             1          EW30 POLYGON ((8693.209 32925.15...\n5     237             1          EW29 POLYGON ((10943.21 34224.19...\n6     320             1          EW28 POLYGON ((12818.21 34873.71...\n7     353             1          EW27 POLYGON ((13568.21 34873.71...\n8     436             1          EW26 POLYGON ((15443.21 35523.23...\n9     502             1          EW25 POLYGON ((16943.21 35523.23...\n10    534             2      EW24,NS1 POLYGON ((17693.21 34224.19...\n\n\n\nThe hexagon TAZ layer, train_hex_filtered, is a Simple Features dataframe. We first convert it to a SpatialPolygonsDataFrame using as_spatial() function\n\n\n# convert to SpatialPolygonsDataFrame\ntrain_hex_sf <- as_Spatial(train_hex_filtered)\n\n\n\n\n# compute distance between hexagons\ndist <- spDists(train_hex_sf, \n                longlat = FALSE)\n\nhead(dist, n=c(10, 10))\n\n           [,1]      [,2]      [,3]     [,4]     [,5]     [,6]     [,7]\n [1,]     0.000   750.000  1984.313 3269.174 4918.079 6750.000 7500.000\n [2,]   750.000     0.000  1299.038 2598.076 4500.000 6408.003 7154.544\n [3,]  1984.313  1299.038     0.000 1299.038 3436.932 5408.327 6139.015\n [4,]  3269.174  2598.076  1299.038    0.000 2598.076 4562.072 5250.000\n [5,]  4918.079  4500.000  3436.932 2598.076    0.000 1984.313 2704.163\n [6,]  6750.000  6408.003  5408.327 4562.072 1984.313    0.000  750.000\n [7,]  7500.000  7154.544  6139.015 5250.000 2704.163  750.000    0.000\n [8,]  9397.473  9093.267  8112.490 7232.738 4683.748 2704.163 1984.313\n [9,] 10894.379 10580.052  9575.359 8649.422 6139.015 4175.823 3436.932\n[10,] 11643.131 11250.000 10145.812 9093.267 6750.000 4918.079 4175.823\n          [,8]      [,9]     [,10]\n [1,] 9397.473 10894.379 11643.131\n [2,] 9093.267 10580.052 11250.000\n [3,] 8112.490  9575.359 10145.812\n [4,] 7232.738  8649.422  9093.267\n [5,] 4683.748  6139.015  6750.000\n [6,] 2704.163  4175.823  4918.079\n [7,] 1984.313  3436.932  4175.823\n [8,]    0.000  1500.000  2598.076\n [9,] 1500.000     0.000  1500.000\n[10,] 2598.076  1500.000     0.000\n\n\n\nThe resultant matrix has numbers as row and column headers, representing the hexagon pairs. To make this information more usable for analysis, we want to replace this with TAZ hexagon ids instead.\n\n\n\n\n# Create a list of hex ids\nhex_names <- train_hex_filtered$hex_id\n\n# Attach hex ids to row and column variables in dist\ncolnames(dist) <- paste0(hex_names)\nrownames(dist) <- paste0(hex_names)\n\nhead(dist, n=c(10, 10))\n\n           23        39        88      137      237      320      353      436\n23      0.000   750.000  1984.313 3269.174 4918.079 6750.000 7500.000 9397.473\n39    750.000     0.000  1299.038 2598.076 4500.000 6408.003 7154.544 9093.267\n88   1984.313  1299.038     0.000 1299.038 3436.932 5408.327 6139.015 8112.490\n137  3269.174  2598.076  1299.038    0.000 2598.076 4562.072 5250.000 7232.738\n237  4918.079  4500.000  3436.932 2598.076    0.000 1984.313 2704.163 4683.748\n320  6750.000  6408.003  5408.327 4562.072 1984.313    0.000  750.000 2704.163\n353  7500.000  7154.544  6139.015 5250.000 2704.163  750.000    0.000 1984.313\n436  9397.473  9093.267  8112.490 7232.738 4683.748 2704.163 1984.313    0.000\n502 10894.379 10580.052  9575.359 8649.422 6139.015 4175.823 3436.932 1500.000\n534 11643.131 11250.000 10145.812 9093.267 6750.000 4918.079 4175.823 2598.076\n          502       534\n23  10894.379 11643.131\n39  10580.052 11250.000\n88   9575.359 10145.812\n137  8649.422  9093.267\n237  6139.015  6750.000\n320  4175.823  4918.079\n353  3436.932  4175.823\n436  1500.000  2598.076\n502     0.000  1500.000\n534  1500.000     0.000\n\n\n\ndist now has row and column headers as hex_id, identifying which TAZs the distance belongs to. However, the matrix has repeated information, and needs to be in an O-D format for geospatial modelling. The melt() function from package reshape2 is used for this.\n\n\n\n\ndistPair <- melt(dist) %>%\n  rename(distance = value,\n         origin_hex = Var1,\n         dest_hex = Var2)\n\nDT::datatable(head(distPair, 10))\n\n\n\n\n\n\n\n\nThe inter-zonal distance is computed between hexagon centroids. The same hexagon will thus have an inter-zonal difference of 0 to itself, but this is misrepresenative of intra-zonal difference. To rectify this, we append a constant value that is less than the minimum inter-zonal difference to all ‘0’ values.\n\n# Find mininum inter-zonal difference:\ndistPair %>%\n  filter(distance > 0) %>%\n  summary()\n\n   origin_hex      dest_hex       distance    \n Min.   :  23   Min.   :  23   Min.   :  750  \n 1st Qu.: 796   1st Qu.: 796   1st Qu.: 6666  \n Median :1048   Median :1048   Median :10633  \n Mean   :1016   Mean   :1016   Mean   :11210  \n 3rd Qu.:1258   3rd Qu.:1258   3rd Qu.:15056  \n Max.   :1741   Max.   :1741   Max.   :39086  \n\n\nThe minimum distance is 750m – this represents the distance between the centre of a hexgon to the centre of an adjacent hexagon. We thus set the intra-zonal distance to 200 using an ifelse9) statement:\n\n# If distance = 0, set to 200, else remain as is\ndistPair$distance <- ifelse(distPair$distance == 0,\n                            200, distPair$distance)\n\nsummary(distPair)\n\n   origin_hex      dest_hex       distance    \n Min.   :  23   Min.   :  23   Min.   :  200  \n 1st Qu.: 796   1st Qu.: 796   1st Qu.: 6538  \n Median :1048   Median :1048   Median :10633  \n Mean   :1016   Mean   :1016   Mean   :11138  \n 3rd Qu.:1258   3rd Qu.:1258   3rd Qu.:15000  \n Max.   :1741   Max.   :1741   Max.   :39086  \n\n\nThe minimum distance is now set at 200m .\norigin_hex and dest_hex represent unique areas, and are set to factor data types instead of integers:\n\ndistPair <- distPair %>%\n  mutate(\n    origin_hex = as.factor(origin_hex),\n    dest_hex = as.factor(dest_hex)\n  )\n\n\n\n\n\n\n\n\n\n6.1.2 Flow + Distance Data\nThe following steps are taken to prepare the dataframe with both distance and flow data:\n\nIdentifying intra-zonal flowsJoining with inter-zonal distances\n\n\nSet trip number to 0 for intra-zonal flows\n\nod_flow$flowNoIntra <- ifelse(od_flow$origin_hex == od_flow$dest_hex,\n                              0, od_flow$weekday_pm_trips)\n\nSet offset for intra-zonal flows to small value (0.00001) and inter-zonal flows to 1\n\nod_flow$offset <- ifelse(od_flow$origin_hex == od_flow$dest_hex,\n                         0.00001, 1)\n\n\n\n\ndistPair <- read_rds(\"data/rds/distPair.rds\")\n\nod_data_dist <- od_flow %>%\n  # Change hex_ids to factor fields\n  mutate(\n    origin_hex = as.factor(origin_hex),\n    dest_hex = as.factor(dest_hex)\n  ) %>%\n  # Retrieve distance value\n  left_join(\n    distPair,\n    by = c(\"origin_hex\" = \"origin_hex\",\n           \"dest_hex\" = \"dest_hex\")\n  )\n\nDT::datatable(head(od_data_dist,10))\n\n\n\n\n\n\n\n\n\nHow is the number of trips correlated to distance?\n\n\ncode block\np1 <- od_data_dist %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = distance,\n            y = weekday_pm_trips)\n      ) +\n      geom_point() +\n      geom_smooth(method = lm) +\n      ggtitle(\"Trips ~ Distance\")\n\nlogp1 <- od_data_dist %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(distance),\n            y = log(weekday_pm_trips))\n      ) +\n      geom_point() +\n      geom_smooth(method = lm) +\n      ggtitle(\"Log(Trips ~ Distance)\")\n\np1 + logp1\n\n\n\n\n\nFrom the plots above, there is no obvious linear trend when using absolute figures. Using log transformed values, on the other hand, revealed an inverse relationship between higher number of trips and further distance.\n\n\n6.1.3 Flow + Distance + Attributes\nTo determine factors that influence the movement of people between TAZ, we look at propulsive and attractive attributes.\n\n\nPropulsive attributes refer to factors that encourage or drive movement from one location to another and are associated with the origin of the journey, representing conditions that “push” or “propel” entities away from their current location\nAttractive attributes are factors that pull or attract entities toward a specific location. These are associated with the destination and represent conditions that make a location appealing\n\n\nAs the flow data is based on weekday evening peak hours, propulsion is likely to be related to work, schools, or home (perhaps many people work from home). As such, number of businesses, number of schools and residential density per TAZ is computed as propulsive Attributes. On the other hand, leisure, food or shopping could be appealing at the end of a workday, and these are taken as attractive attributes.\nThese attributes are added to the flow data from the following sources:\n\nbusinessesschoolsentertainmentfood & beveragerecreational facilitiesretail establishmentshdb\n\n\nbusiness is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nbusiness <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Business' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\ncode block\ntmap_mode(\"plot\")\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(business) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\n\nThe resultant dataframe is a simple features dataframe with point locations of business offices in Singapore. As this is not useful as point locations, we compute the number of offices per TAZ\n\n\ntrain_hex_attr <- train_hex_final %>%\n  mutate(num_offices = lengths(st_intersects(train_hex_final, business)))\n\n\nsummary(train_hex_attr$num_offices)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   3.416   1.000 135.000 \n\n\n\n\nschools is an aspatial dataframe with longitude and latitude data. This is imported and transformed into a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nschools <- read_csv(\"data/aspatial/schools.csv\")\n\nThere are 40 columns in schools, but we only require a few variables. These are renamed and selected, and the data is transformed into a Simple Features Dataframe:\n\nschools_sf <- schools %>%\n  rename(\n    latitude = \"results.LATITUDE\",\n    longitude = \"results.LONGITUDE\"\n  ) %>%\n  select(\n    postal_code, \n    school_name, \n    latitude, \n    longitude\n  ) %>%\n  st_as_sf(\n    coords = c(\"longitude\", \"latitude\"),\n    crs=4326\n  ) %>%\n  st_transform(\n    crs = 3414\n  )\n\n\n\ncode block\ntmap_mode(\"plot\")\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(schools_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\n\ntrain_hex_attr$num_schools <- lengths(st_intersects(train_hex_attr, schools_sf))\n\n\nsummary(train_hex_attr$num_schools)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1977  0.0000  4.0000 \n\n\n\n\nentertn is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nentertn_sf <- st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %>%\n          st_transform(crs = 3414)\n\nReading layer `entertn' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(entertn_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\ntrain_hex_attr$num_entertn <- lengths(st_intersects(train_hex_attr, entertn_sf))\n\n\nsummary(train_hex_attr$num_entertn)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n 0.00000  0.00000  0.00000  0.06346  0.00000 12.00000 \n\n\n\n\nfnb is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nfnb_sf <- st_read(dsn = \"data/geospatial\",\n               layer = \"F&B\") %>%\n          st_transform(crs = 3414)\n\nReading layer `F&B' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(fnb_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\ntrain_hex_attr$num_fnb <- lengths(st_intersects(train_hex_attr, fnb_sf))\n\n\nsummary(train_hex_attr$num_fnb)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.065   0.000 115.000 \n\n\n\n\nrecreation is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nrecreation_sf <- st_read(dsn = \"data/geospatial\",\n                      layer = \"Liesure&Recreation\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Liesure&Recreation' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(recreation_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\ntrain_hex_attr$num_facilities <- lengths(st_intersects(train_hex_attr, recreation_sf))\n\n\nsummary(train_hex_attr$num_facilities)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.6742  0.0000 31.0000 \n\n\n\n\nretail is a Simple feature point layer based on SVY21 coordinate reference system (CRS).\n\nretail_sf <- st_read(dsn = \"data/geospatial\",\n                  layer = \"Retails\") %>%\n          st_transform(crs = 3414)\n\nReading layer `Retails' from data source \n  `C:\\haileycsy\\ISSS624-AGA\\Take-home_Ex\\the2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(retail_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\ntrain_hex_attr$num_retail <- lengths(st_intersects(train_hex_attr, retail_sf))\n\n\nsummary(train_hex_attr$num_retail)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00   21.18    8.00 1474.00 \n\n\n\n\nThis dataset is in .csv format, and features information pertaining to HDB properties in Singapore.\n\nhdb <- read_csv(\"data/aspatial/hdb.csv\")\n\n# Remove any duplicated rows\nhdb <- distinct(hdb)\n\nstr(hdb)\n\ntibble [12,442 × 37] (S3: tbl_df/tbl/data.frame)\n $ ...1                 : num [1:12442] 0 1 2 3 4 5 6 7 8 9 ...\n $ blk_no               : chr [1:12442] \"1\" \"1\" \"1\" \"1\" ...\n $ street               : chr [1:12442] \"BEACH RD\" \"BEDOK STH AVE 1\" \"CANTONMENT RD\" \"CHAI CHEE RD\" ...\n $ max_floor_lvl        : num [1:12442] 16 14 2 15 4 25 12 14 12 2 ...\n $ year_completed       : num [1:12442] 1970 1975 2010 1982 1975 ...\n $ residential          : chr [1:12442] \"Y\" \"Y\" \"N\" \"Y\" ...\n $ commercial           : chr [1:12442] \"Y\" \"N\" \"Y\" \"N\" ...\n $ market_hawker        : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ miscellaneous        : chr [1:12442] \"N\" \"Y\" \"N\" \"N\" ...\n $ multistorey_carpark  : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ precinct_pavilion    : chr [1:12442] \"N\" \"N\" \"N\" \"N\" ...\n $ bldg_contract_town   : chr [1:12442] \"KWN\" \"BD\" \"CT\" \"BD\" ...\n $ total_dwelling_units : num [1:12442] 142 206 0 102 55 96 125 247 95 0 ...\n $ 1room_sold           : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 2room_sold           : num [1:12442] 1 0 0 0 0 0 0 0 0 0 ...\n $ 3room_sold           : num [1:12442] 138 204 0 0 54 0 118 0 62 0 ...\n $ 4room_sold           : num [1:12442] 1 0 0 10 0 0 0 0 0 0 ...\n $ 5room_sold           : num [1:12442] 2 2 0 92 1 96 7 0 33 0 ...\n $ exec_sold            : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ multigen_sold        : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ studio_apartment_sold: num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 1room_rental         : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ 2room_rental         : num [1:12442] 0 0 0 0 0 0 0 247 0 0 ...\n $ 3room_rental         : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ other_room_rental    : num [1:12442] 0 0 0 0 0 0 0 0 0 0 ...\n $ lat                  : num [1:12442] 1.3 1.32 1.28 1.33 1.39 ...\n $ lng                  : num [1:12442] 104 104 104 104 104 ...\n $ building             : chr [1:12442] \"RAFFLES HOTEL\" \"NIL\" \"PINNACLE @ DUXTON\" \"PING YI GARDENS\" ...\n $ addr                 : chr [1:12442] \"1 BEACH ROAD RAFFLES HOTEL SINGAPORE 189673\" \"1 BEDOK SOUTH AVENUE 1 SINGAPORE 460001\" \"1 CANTONMENT ROAD PINNACLE @ DUXTON SINGAPORE 080001\" \"1 CHAI CHEE ROAD PING YI GARDENS SINGAPORE 461001\" ...\n $ postal               : chr [1:12442] \"189673\" \"460001\" \"080001\" \"461001\" ...\n $ SUBZONE_NO           : num [1:12442] 2 6 3 3 1 9 10 5 3 5 ...\n $ SUBZONE_N            : chr [1:12442] \"CITY HALL\" \"BEDOK SOUTH\" \"CHINATOWN\" \"KEMBANGAN\" ...\n $ SUBZONE_C            : chr [1:12442] \"DTSZ02\" \"BDSZ06\" \"OTSZ03\" \"BDSZ03\" ...\n $ PLN_AREA_N           : chr [1:12442] \"DOWNTOWN CORE\" \"BEDOK\" \"OUTRAM\" \"BEDOK\" ...\n $ PLN_AREA_C           : chr [1:12442] \"DT\" \"BD\" \"OT\" \"BD\" ...\n $ REGION_N             : chr [1:12442] \"CENTRAL REGION\" \"EAST REGION\" \"CENTRAL REGION\" \"EAST REGION\" ...\n $ REGION_C             : chr [1:12442] \"CR\" \"ER\" \"CR\" \"ER\" ...\n\n\nhdb is a geocoded list of HDB properties in Singapore, with information such as:\n\nblk_no & street: Address of the HDB Property\nmax_floor_lvl & year_completed: Characteristics of the HDB building, indicative of height and age\nresidential, commercial, market_hawker, miscellaneous, multistorey_carpark & precinct_pavilion , a series of boolean columns indicating if the HDB Property has the facilities\nbldg_contract_town: A code indicating HDB town\ntotal_dwelling_units: Number of units in the block\nxx_sold & xx_rental: multiple columns indicating number of units sold and rented per type\nlat & lng: Geocoded lattitude and longitudinal data pertaining to HDB location\nSUBZONE: Subzone information\n\nhdb contains many variables, but only a few are useful for this exercise. The following code performs the following actions:\n\nlng and lat are renamed for easier conversion\nFilter only residential HDB properties\nSelect only relevant columns for analysis\n\n\nhdb <- hdb %>%\n  rename(\n    longitude = lng,\n    latitude = lat\n  ) %>%\n  filter(residential == \"Y\") %>%\n  select(\n    blk_no,\n    street,\n    postal,\n    total_dwelling_units,\n    longitude,\n    latitude\n  )\n\n\nhdb is an aspatial dataframe, with longitude and latitude columns as variables. These are used to transform it into a simple feature layer to join at hexagon level using st_as_sf() function.\n\n\nhdb_sf <- st_as_sf(hdb,\n                   coords = c(\"longitude\", \"latitude\"),\n                   crs = 4326) %>%\n  st_transform(crs = 3414)\n\n# Show map of HDB blocks\n\ntm_shape(mpsz) +\n  tm_fill(col = \"#dfdfeb\") +\ntm_shape(train_hex_sf) +\n  tm_fill(col =  \"#BAFFDF\")+\n  tm_borders(col = \"#dfdfeb\") +\ntm_shape(hdb_sf) +\n  tm_dots(col = \"#2F4858\") +\n  tm_layout(frame = FALSE)\n\n\n\n\n\nThe resultant dataframe is a simple features dataframe with point locations of residential HDB units.\n\n\ntrain_hex_attr <- st_join(\n    hdb_sf,\n    train_hex_attr,\n    join = st_intersects\n  ) %>%\n  group_by(\n    hex_id\n  ) %>%\n  summarise(\n    hdb_blocks = n(),\n    hdb_units = sum(total_dwelling_units),\n    num_offices = sum(num_offices),\n    num_schools = sum(num_schools),\n    num_entertn = sum(num_entertn),\n    num_fnb = sum(num_fnb),\n    num_facilities = sum(num_facilities),\n    num_retail = sum(num_retail)\n  ) %>%\n  ungroup()\n\n\nsummary(train_hex_attr$hdb_blocks)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    9.50   20.00   25.26   39.00   77.00"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#origin-constrained-sim",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#origin-constrained-sim",
    "title": "Take-home Ex 2",
    "section": "6.2 Origin Constrained SIM",
    "text": "6.2 Origin Constrained SIM\noriginSIM_Poisson <- glm( formula = weekday_pm_trips ~ origin_hex + log(res_density) + log(num_offices) + log(num_schools) + log(distance) - 1, family = poisson(link = “log”), data = flow_by_origin, na.action = na.exclude)\nsummary(originSIM_Poisson)"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#destination-constrained-sim",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#destination-constrained-sim",
    "title": "Take-home Ex 2",
    "section": "6.3 Destination Constrained SIM",
    "text": "6.3 Destination Constrained SIM\ndestSIM_Poisson <- glm( formula = weekday_pm_trips ~ dest_hex + log(res_density) + log(num_entertn) + log(num_fnb) + log(num_facilities) + log(num_retail) + log(distance) - 1, family = poisson(link = “log”), data = flow_by_dest )\nsummary(destSIM_Poisson)"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#preparing-modeling-data-by-flow-origin-and-destination",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#preparing-modeling-data-by-flow-origin-and-destination",
    "title": "Take-home Ex 2",
    "section": "6.2 Preparing Modeling data by flow origin and destination",
    "text": "6.2 Preparing Modeling data by flow origin and destination\nThe following code chunks select attributes relevant to origin (propulsive factors) and destination (attractive factors) for Spatial Interaction Modelling.\n\nSelecting attributesFlow by originFlow by destinationRecoding variables with zero values\n\n\n\n# Origin\ntrain_hex_attr_all <- train_hex_attr %>%\n  st_drop_geometry() %>%\n  mutate(\n    hex_id = as.factor(hex_id)\n  ) %>%\n  select( -hdb_units)\n\n\n\n\n#join by origin TAZ\nflow_attr <- od_data_dist %>%\n  mutate(\n    origin_hex = as.factor(origin_hex),\n    dest_hex = as.factor(dest_hex)\n  ) %>%\n  left_join(\n    train_hex_attr_all,\n    by = c(\"origin_hex\" = \"hex_id\")\n  ) %>%\n  rename(\n    trips = weekday_pm_trips,\n    origin_hdb = hdb_blocks,\n    origin_schools = num_schools,\n    origin_offices = num_offices\n  ) %>%\n  select(\n    -c(num_entertn, num_retail, num_facilities, num_fnb)\n  )\n\n\n\n\n#join by destination TAZ\nflow_attr <- flow_attr %>%\n  left_join(\n    train_hex_attr_all,\n    by = c(\"dest_hex\" = \"hex_id\")\n  ) %>%\n  rename(\n    dest_hdb = hdb_blocks,\n    dest_entertn = num_entertn,\n    dest_fnb = num_fnb,\n    dest_facilities = num_facilities,\n    dest_retail = num_retail\n  ) %>%\n  select(\n    -c(num_offices, num_schools)\n  ) %>%\n  replace(is.na(.), 0)\n\n\nsummary(flow_attr)\n\n   origin_hex       dest_hex         trips          flowNoIntra     \n 237    :  151   320    :  151   Min.   :    1.0   Min.   :    1.0  \n 320    :  151   353    :  151   1st Qu.:   36.0   1st Qu.:   36.0  \n 353    :  151   436    :  151   Median :  161.0   Median :  161.0  \n 436    :  151   534    :  151   Mean   :  945.7   Mean   :  945.7  \n 534    :  151   637    :  151   3rd Qu.:  648.8   3rd Qu.:  648.8  \n 637    :  151   648    :  151   Max.   :63626.0   Max.   :63626.0  \n (Other):20692   (Other):20692                                      \n     offset     distance       origin_hdb    origin_offices    origin_schools  \n Min.   :1   Min.   :  750   Min.   : 0.00   Min.   :   0.00   Min.   :  0.00  \n 1st Qu.:1   1st Qu.: 6495   1st Qu.: 0.00   1st Qu.:   0.00   1st Qu.:  0.00  \n Median :1   Median :10500   Median :13.00   Median :   0.00   Median :  0.00  \n Mean   :1   Mean   :11059   Mean   :19.38   Mean   :  68.94   Mean   : 22.75  \n 3rd Qu.:1   3rd Qu.:14981   3rd Qu.:34.00   3rd Qu.:  53.00   3rd Qu.: 33.00  \n Max.   :1   Max.   :39086   Max.   :77.00   Max.   :2295.00   Max.   :174.00  \n                                                                               \n    dest_hdb      dest_entertn        dest_fnb      dest_facilities \n Min.   : 0.00   Min.   :  0.000   Min.   :   0.0   Min.   :  0.00  \n 1st Qu.: 0.00   1st Qu.:  0.000   1st Qu.:   0.0   1st Qu.:  0.00  \n Median :14.00   Median :  0.000   Median :   0.0   Median :  0.00  \n Mean   :19.72   Mean   :  4.338   Mean   :  53.1   Mean   : 28.39  \n 3rd Qu.:34.00   3rd Qu.:  0.000   3rd Qu.:  28.0   3rd Qu.: 36.00  \n Max.   :77.00   Max.   :108.000   Max.   :1275.0   Max.   :429.00  \n                                                                    \n  dest_retail             geometry    \n Min.   :    0   LINESTRING   :21598  \n 1st Qu.:    0   epsg:3414    :    0  \n Median :  336   +proj=tmer...:    0  \n Mean   : 1503                        \n 3rd Qu.: 1798                        \n Max.   :16950                        \n                                      \n\n\n\n\n\nSince the SIM is based on Poisson Regression (this model uses log values), it is important for us to ensure that no 0 values in the explanatory variables as these will be parsed as undefined.\n\n\n# save columns as a vector\nupdate_cols <- c(\"origin_hdb\", \"origin_offices\", \"origin_schools\", \"dest_hdb\", \"dest_entertn\", \"dest_fnb\", \"dest_facilities\", \"dest_retail\")\n\n# update all 0 values across columns\nflow_attr <- flow_attr %>%\n  mutate(across(all_of(update_cols), ~ ifelse(. == 0, 0.9, .)))\n\nsummary(flow_attr)\n\n   origin_hex       dest_hex         trips          flowNoIntra     \n 237    :  151   320    :  151   Min.   :    1.0   Min.   :    1.0  \n 320    :  151   353    :  151   1st Qu.:   36.0   1st Qu.:   36.0  \n 353    :  151   436    :  151   Median :  161.0   Median :  161.0  \n 436    :  151   534    :  151   Mean   :  945.7   Mean   :  945.7  \n 534    :  151   637    :  151   3rd Qu.:  648.8   3rd Qu.:  648.8  \n 637    :  151   648    :  151   Max.   :63626.0   Max.   :63626.0  \n (Other):20692   (Other):20692                                      \n     offset     distance       origin_hdb    origin_offices    origin_schools  \n Min.   :1   Min.   :  750   Min.   : 0.90   Min.   :   0.90   Min.   :  0.90  \n 1st Qu.:1   1st Qu.: 6495   1st Qu.: 0.90   1st Qu.:   0.90   1st Qu.:  0.90  \n Median :1   Median :10500   Median :13.00   Median :   0.90   Median :  0.90  \n Mean   :1   Mean   :11059   Mean   :19.64   Mean   :  69.46   Mean   : 23.28  \n 3rd Qu.:1   3rd Qu.:14981   3rd Qu.:34.00   3rd Qu.:  53.00   3rd Qu.: 33.00  \n Max.   :1   Max.   :39086   Max.   :77.00   Max.   :2295.00   Max.   :174.00  \n                                                                               \n    dest_hdb      dest_entertn        dest_fnb      dest_facilities \n Min.   : 0.90   Min.   :  0.900   Min.   :   0.9   Min.   :  0.90  \n 1st Qu.: 0.90   1st Qu.:  0.900   1st Qu.:   0.9   1st Qu.:  0.90  \n Median :14.00   Median :  0.900   Median :   0.9   Median :  0.90  \n Mean   :19.98   Mean   :  5.133   Mean   :  53.7   Mean   : 28.93  \n 3rd Qu.:34.00   3rd Qu.:  0.900   3rd Qu.:  28.0   3rd Qu.: 36.00  \n Max.   :77.00   Max.   :108.000   Max.   :1275.0   Max.   :429.00  \n                                                                    \n  dest_retail               geometry    \n Min.   :    0.9   LINESTRING   :21598  \n 1st Qu.:    0.9   epsg:3414    :    0  \n Median :  336.0   +proj=tmer...:    0  \n Mean   : 1503.5                        \n 3rd Qu.: 1798.0                        \n Max.   :16950.0                        \n                                        \n\n\n\n\ncode block\nwrite_rds(flow_attr, \"data/rds/sim_data.rds\")\n\n\n\n\n\nHow do these variables correlate to number of trips?\n\n\ncode block\n# residential density\np_res <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(origin_hdb),\n            y = log(trips))\n      ) +\n      geom_point(\n        color = \"#8D9EC6\",\n        size = 1,\n        alpha = .7\n      ) +\n      geom_smooth(method = lm) +\n      theme(axis.text.x = element_blank()) +\n      ggtitle(\"Trips ~ Residential Density\")\n\n# offices\np_office <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(origin_offices),\n            y = log(trips))\n      ) +\n      geom_point(\n        color = \"#4E4B5C\",\n        size = 1,\n        alpha = .7\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ Office Count\")\n\n# schools\np_sch <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(origin_schools),\n            y = log(trips))\n      ) +\n      geom_point(\n        color = \"#f5bc5f\",\n        size = 1,\n        alpha = .7\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ School Count\")\n\norigin_patch <- p_res + p_office + p_sch\norigin_patch + plot_annotation(\n  title = \"Correlation between trips and propulsive factors\",\n  subtitle = \"+ve observed relationship between trips and office count\"\n)\n\n\n\n\n\n\n\ncode block\n# Entertainment\np_ent <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(dest_entertn),\n            y = log(trips))\n      ) +\n      geom_point(\n        size = 1,\n        alpha = .7\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ Entertainment\")\n\n# f&b\np_food <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(dest_fnb),\n            y = log(trips))\n      ) +\n      geom_point(\n        size = 1,\n        alpha = .7,\n        color = \"#9590A8\"\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ F&B\")\n\n# recreation\np_rec <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(dest_facilities),\n            y = log(trips))\n      ) +\n      geom_point(\n        size = 1,\n        alpha = .7,\n        color = \"#f5bc5f\"\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ Recreation\")\n\n# retail\np_retail <- flow_attr %>%\n      st_drop_geometry() %>%\n      ggplot(\n        aes(x = log(dest_retail),\n            y = log(trips))\n      ) +\n      geom_point(\n        size = 1,\n        alpha = .7,\n        color = \"#6D435A\"\n      ) +\n      geom_smooth(method = lm) +\n      theme(\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank()\n      ) +\n      ggtitle(\"Trips ~ Retail\")\n\ndest_patch <- (p_ent + p_food) / (p_rec + p_retail)\ndest_patch + plot_annotation(\n  title = \"Correlation between trips and attractive factors\",\n  subtitle = \"+ve observed relationship between trip count and all factors\"\n)"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#constrained-sim---origin",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#constrained-sim---origin",
    "title": "Take-home Ex 2",
    "section": "6.3 Constrained SIM - Origin",
    "text": "6.3 Constrained SIM - Origin\n\nBuilding ModelModel Results\n\n\nAn origin-constrained model features explanatory variables pertaining to the attractiveness of the destination.\n\noriginSIM <- glm(\n   # constrain by origin TAZ\n    formula = trips ~ origin_hex \n            + log(dest_hdb)\n            + log(dest_entertn) \n            + log(dest_fnb)\n            + log(dest_facilities)\n            + log(dest_retail)\n            + log(distance) - 1,\n    family = poisson(link = \"log\"),\n    data = flow_attr,\n           na.action = na.exclude)\n\n\n\n\nsummary(originSIM)\n\n\nCall:\nglm(formula = trips ~ origin_hex + log(dest_hdb) + log(dest_entertn) + \n    log(dest_fnb) + log(dest_facilities) + log(dest_retail) + \n    log(distance) - 1, family = poisson(link = \"log\"), data = flow_attr, \n    na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-215.68   -23.32   -11.18     1.11   392.90  \n\nCoefficients:\n                       Estimate Std. Error z value Pr(>|z|)    \norigin_hex23         11.8490197  0.0057181  2072.2   <2e-16 ***\norigin_hex39         12.4201248  0.0045988  2700.8   <2e-16 ***\norigin_hex88         12.4582313  0.0044969  2770.4   <2e-16 ***\norigin_hex137        12.3193135  0.0046725  2636.5   <2e-16 ***\norigin_hex237        13.4674271  0.0033140  4063.8   <2e-16 ***\norigin_hex320        13.0451086  0.0035122  3714.2   <2e-16 ***\norigin_hex353        13.6123304  0.0030974  4394.8   <2e-16 ***\norigin_hex436        12.8689210  0.0035378  3637.5   <2e-16 ***\norigin_hex502        11.4359220  0.0055304  2067.8   <2e-16 ***\norigin_hex534        14.2758242  0.0027608  5170.9   <2e-16 ***\norigin_hex555        13.0054253  0.0032869  3956.8   <2e-16 ***\norigin_hex571        10.4754637  0.0084385  1241.4   <2e-16 ***\norigin_hex573        12.5955035  0.0037267  3379.8   <2e-16 ***\norigin_hex585        12.6753147  0.0035582  3562.3   <2e-16 ***\norigin_hex586        11.9168226  0.0044214  2695.3   <2e-16 ***\norigin_hex604        10.7006199  0.0075594  1415.5   <2e-16 ***\norigin_hex637        12.7393858  0.0032477  3922.5   <2e-16 ***\norigin_hex641        12.5731109  0.0038038  3305.4   <2e-16 ***\norigin_hex648        13.4656216  0.0030485  4417.1   <2e-16 ***\norigin_hex653        10.7759826  0.0074301  1450.3   <2e-16 ***\norigin_hex654         9.4452050  0.0154608   610.9   <2e-16 ***\norigin_hex669        11.0601704  0.0064951  1702.9   <2e-16 ***\norigin_hex670         9.4211189  0.0164033   574.3   <2e-16 ***\norigin_hex671        10.8886658  0.0074563  1460.3   <2e-16 ***\norigin_hex687        10.6671142  0.0081410  1310.3   <2e-16 ***\norigin_hex700        12.0246129  0.0043300  2777.0   <2e-16 ***\norigin_hex703        10.5632600  0.0093153  1134.0   <2e-16 ***\norigin_hex708        12.3814688  0.0040301  3072.2   <2e-16 ***\norigin_hex714        12.0694991  0.0041256  2925.5   <2e-16 ***\norigin_hex728        11.9847411  0.0044636  2685.0   <2e-16 ***\norigin_hex729        13.3441185  0.0030300  4403.9   <2e-16 ***\norigin_hex746        13.1234996  0.0031055  4225.9   <2e-16 ***\norigin_hex749        11.7091472  0.0047312  2474.9   <2e-16 ***\norigin_hex759        11.8797064  0.0048717  2438.5   <2e-16 ***\norigin_hex763        13.2437947  0.0030369  4361.0   <2e-16 ***\norigin_hex774        13.3672393  0.0031099  4298.3   <2e-16 ***\norigin_hex777        11.9967863  0.0043930  2730.9   <2e-16 ***\norigin_hex790        11.4660936  0.0053789  2131.7   <2e-16 ***\norigin_hex798        11.0395804  0.0061331  1800.0   <2e-16 ***\norigin_hex812        12.1202840  0.0039791  3046.0   <2e-16 ***\norigin_hex813        11.4301995  0.0050262  2274.1   <2e-16 ***\norigin_hex824        13.0244530  0.0033435  3895.5   <2e-16 ***\norigin_hex826        12.5031433  0.0037063  3373.4   <2e-16 ***\norigin_hex847        10.9869947  0.0060916  1803.6   <2e-16 ***\norigin_hex859        10.7084013  0.0072209  1483.0   <2e-16 ***\norigin_hex861        12.1606061  0.0038937  3123.1   <2e-16 ***\norigin_hex863        10.9244837  0.0062173  1757.1   <2e-16 ***\norigin_hex880        11.3550298  0.0051938  2186.3   <2e-16 ***\norigin_hex903        11.2945262  0.0056642  1994.0   <2e-16 ***\norigin_hex908        13.7242614  0.0028836  4759.4   <2e-16 ***\norigin_hex910        12.3571422  0.0035984  3434.1   <2e-16 ***\norigin_hex928        11.5482449  0.0046950  2459.7   <2e-16 ***\norigin_hex940        12.9100319  0.0034640  3726.9   <2e-16 ***\norigin_hex943        12.3894077  0.0035285  3511.2   <2e-16 ***\norigin_hex946        11.2169526  0.0053975  2078.2   <2e-16 ***\norigin_hex973        12.0573495  0.0044460  2712.0   <2e-16 ***\norigin_hex976        11.1875520  0.0052927  2113.8   <2e-16 ***\norigin_hex977        13.5257399  0.0027477  4922.6   <2e-16 ***\norigin_hex982        11.9992138  0.0040929  2931.7   <2e-16 ***\norigin_hex987        12.5865654  0.0036554  3443.3   <2e-16 ***\norigin_hex988        13.1674375  0.0032093  4102.9   <2e-16 ***\norigin_hex993        11.1985315  0.0051253  2184.9   <2e-16 ***\norigin_hex1001       10.6470973  0.0072559  1467.4   <2e-16 ***\norigin_hex1008       13.2530033  0.0029311  4521.6   <2e-16 ***\norigin_hex1010       12.9186001  0.0029988  4307.9   <2e-16 ***\norigin_hex1011       13.3282303  0.0028275  4713.7   <2e-16 ***\norigin_hex1013       11.1615167  0.0053836  2073.3   <2e-16 ***\norigin_hex1014       11.5582350  0.0046726  2473.6   <2e-16 ***\norigin_hex1016       10.9862554  0.0059940  1832.9   <2e-16 ***\norigin_hex1025       13.5154042  0.0027586  4899.4   <2e-16 ***\norigin_hex1026       11.1884899  0.0050857  2200.0   <2e-16 ***\norigin_hex1028       13.2642831  0.0028651  4629.7   <2e-16 ***\norigin_hex1041       13.6526660  0.0027361  4989.9   <2e-16 ***\norigin_hex1042       12.2891960  0.0035028  3508.4   <2e-16 ***\norigin_hex1043       12.8624334  0.0029783  4318.8   <2e-16 ***\norigin_hex1046       12.8280993  0.0031437  4080.5   <2e-16 ***\norigin_hex1050       12.8486946  0.0032343  3972.7   <2e-16 ***\norigin_hex1058       14.2714884  0.0025328  5634.7   <2e-16 ***\norigin_hex1059       12.1713548  0.0035676  3411.7   <2e-16 ***\norigin_hex1060       12.8884403  0.0029724  4336.0   <2e-16 ***\norigin_hex1063       11.7446725  0.0042439  2767.4   <2e-16 ***\norigin_hex1064       12.8669343  0.0031433  4093.4   <2e-16 ***\norigin_hex1074       13.6656190  0.0027558  4958.8   <2e-16 ***\norigin_hex1076       13.3729817  0.0027268  4904.3   <2e-16 ***\norigin_hex1077       12.4291816  0.0033224  3741.0   <2e-16 ***\norigin_hex1082       12.9233131  0.0031630  4085.8   <2e-16 ***\norigin_hex1091       12.9477248  0.0030720  4214.8   <2e-16 ***\norigin_hex1092       13.4240891  0.0027416  4896.4   <2e-16 ***\norigin_hex1093       11.2046068  0.0049790  2250.4   <2e-16 ***\norigin_hex1123       10.0042304  0.0098071  1020.1   <2e-16 ***\norigin_hex1125       12.7513786  0.0031422  4058.1   <2e-16 ***\norigin_hex1126       12.1783812  0.0035932  3389.3   <2e-16 ***\norigin_hex1127       12.4611435  0.0033603  3708.4   <2e-16 ***\norigin_hex1130       11.2205748  0.0052765  2126.5   <2e-16 ***\norigin_hex1140       10.3732245  0.0080509  1288.5   <2e-16 ***\norigin_hex1142       11.1846679  0.0051341  2178.5   <2e-16 ***\norigin_hex1143       11.3624054  0.0047178  2408.4   <2e-16 ***\norigin_hex1161       12.0316826  0.0038509  3124.4   <2e-16 ***\norigin_hex1162       11.7881953  0.0042062  2802.6   <2e-16 ***\norigin_hex1175       11.3834463  0.0048744  2335.3   <2e-16 ***\norigin_hex1176       11.3858032  0.0047908  2376.6   <2e-16 ***\norigin_hex1177       10.9015032  0.0058871  1851.8   <2e-16 ***\norigin_hex1179       13.0730495  0.0029975  4361.3   <2e-16 ***\norigin_hex1199       10.9202118  0.0060754  1797.4   <2e-16 ***\norigin_hex1200        9.6664704  0.0110255   876.7   <2e-16 ***\norigin_hex1212       10.9179011  0.0059592  1832.1   <2e-16 ***\norigin_hex1216       10.0914448  0.0086793  1162.7   <2e-16 ***\norigin_hex1225       11.2240082  0.0052914  2121.2   <2e-16 ***\norigin_hex1226       12.1920679  0.0036823  3311.0   <2e-16 ***\norigin_hex1227       10.8943213  0.0059261  1838.4   <2e-16 ***\norigin_hex1233        9.5829577  0.0115616   828.9   <2e-16 ***\norigin_hex1244       12.9684986  0.0030424  4262.6   <2e-16 ***\norigin_hex1246       12.1051089  0.0038850  3115.8   <2e-16 ***\norigin_hex1258       11.3003728  0.0052402  2156.5   <2e-16 ***\norigin_hex1259       13.3272033  0.0028706  4642.7   <2e-16 ***\norigin_hex1260       12.3939500  0.0035071  3533.9   <2e-16 ***\norigin_hex1265       10.2847464  0.0076574  1343.1   <2e-16 ***\norigin_hex1266       10.3308516  0.0077235  1337.6   <2e-16 ***\norigin_hex1280       12.2853974  0.0036583  3358.2   <2e-16 ***\norigin_hex1281       11.6059220  0.0044365  2616.0   <2e-16 ***\norigin_hex1282       12.7634123  0.0030939  4125.3   <2e-16 ***\norigin_hex1293       11.8872086  0.0041423  2869.7   <2e-16 ***\norigin_hex1314       10.4679514  0.0071603  1462.0   <2e-16 ***\norigin_hex1315       10.1801398  0.0080908  1258.2   <2e-16 ***\norigin_hex1316       12.7443388  0.0031766  4012.0   <2e-16 ***\norigin_hex1317       10.6040392  0.0072263  1467.4   <2e-16 ***\norigin_hex1325       11.8482920  0.0043323  2734.9   <2e-16 ***\norigin_hex1331        9.5692041  0.0108594   881.2   <2e-16 ***\norigin_hex1332        9.9809026  0.0089119  1120.0   <2e-16 ***\norigin_hex1333       10.4660618  0.0073436  1425.2   <2e-16 ***\norigin_hex1343       12.1070055  0.0039725  3047.7   <2e-16 ***\norigin_hex1348       10.1894369  0.0079797  1276.9   <2e-16 ***\norigin_hex1349       10.5638823  0.0068237  1548.1   <2e-16 ***\norigin_hex1350        9.7795372  0.0107447   910.2   <2e-16 ***\norigin_hex1365       10.2489892  0.0078761  1301.3   <2e-16 ***\norigin_hex1375       11.5086854  0.0050262  2289.7   <2e-16 ***\norigin_hex1381       10.5362750  0.0070257  1499.7   <2e-16 ***\norigin_hex1382       10.8731900  0.0061990  1754.0   <2e-16 ***\norigin_hex1398       10.4137530  0.0076596  1359.6   <2e-16 ***\norigin_hex1409       11.1325718  0.0058614  1899.3   <2e-16 ***\norigin_hex1414        9.4721562  0.0123244   768.6   <2e-16 ***\norigin_hex1474       12.8497757  0.0033959  3783.9   <2e-16 ***\norigin_hex1475       10.8850830  0.0067207  1619.6   <2e-16 ***\norigin_hex1509       11.4048739  0.0054470  2093.8   <2e-16 ***\norigin_hex1526       13.3421428  0.0030191  4419.3   <2e-16 ***\norigin_hex1540       12.3919255  0.0039273  3155.3   <2e-16 ***\norigin_hex1544       12.4493263  0.0038318  3249.0   <2e-16 ***\norigin_hex1575       12.1919042  0.0041091  2967.0   <2e-16 ***\norigin_hex1576       11.9121654  0.0046190  2578.9   <2e-16 ***\norigin_hex1607       13.0977762  0.0033084  3959.0   <2e-16 ***\norigin_hex1624       11.6694607  0.0051816  2252.1   <2e-16 ***\norigin_hex1741       12.7039587  0.0038835  3271.3   <2e-16 ***\nlog(dest_hdb)         0.1906171  0.0002946   647.1   <2e-16 ***\nlog(dest_entertn)     0.1394649  0.0001874   744.2   <2e-16 ***\nlog(dest_fnb)         0.0353077  0.0001476   239.3   <2e-16 ***\nlog(dest_facilities) -0.0377751  0.0001303  -289.9   <2e-16 ***\nlog(dest_retail)      0.0278225  0.0001677   165.9   <2e-16 ***\nlog(distance)        -0.7006256  0.0002732 -2564.6   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 297060506  on 21598  degrees of freedom\nResidual deviance:  29320336  on 21440  degrees of freedom\nAIC: 29468186\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n\n\nModel results reveal that\n\nNumber of weekday evening peak period trips has a statistically significant relationship with all destination attractiveness attributes\nThe strongest +ve association is with number of HDB blocks (Coefficient Estimate: 0.1906171) followed by entertainment venues (Coefficient Estimate: 0.1394649). This suggests that the most attractive factors are housing and available entertainment centres such as cinemas and theaters\nOn the other hand, the strongest -ve association is with distance (-0.7006256). This reveals that the further away the destination, the less attractive it is."
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#constrained-sim---destination",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#constrained-sim---destination",
    "title": "Take-home Ex 2",
    "section": "6.4 Constrained SIM - Destination",
    "text": "6.4 Constrained SIM - Destination\n::: panel-tabset"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#building-model-1",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#building-model-1",
    "title": "Take-home Ex 2",
    "section": "6.5 Building Model",
    "text": "6.5 Building Model\nA destination-constrained model features explanatory variables pertaining to the propulsiveness of the origin.\n\ndestSIM <- glm(\n    formula = trips ~ dest_hex \n            + log(origin_hdb) \n            + log(origin_offices)\n            + log(origin_schools)\n            + log(distance) - 1,\n    family = poisson(link = \"log\"),\n    data = flow_attr\n  )"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#model-results-1",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#model-results-1",
    "title": "Take-home Ex 2",
    "section": "6.6 Model Results",
    "text": "6.6 Model Results\n\nsummary(destSIM)\n\n\nCall:\nglm(formula = trips ~ dest_hex + log(origin_hdb) + log(origin_offices) + \n    log(origin_schools) + log(distance) - 1, family = poisson(link = \"log\"), \n    data = flow_attr)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-145.19   -24.59   -11.88     2.43   462.17  \n\nCoefficients:\n                      Estimate Std. Error z value Pr(>|z|)    \ndest_hex23          13.1467371  0.0066028  1991.1   <2e-16 ***\ndest_hex39          12.7535341  0.0076444  1668.4   <2e-16 ***\ndest_hex88          12.3679568  0.0093967  1316.2   <2e-16 ***\ndest_hex137         12.1004292  0.0106051  1141.0   <2e-16 ***\ndest_hex237         13.5250423  0.0053112  2546.5   <2e-16 ***\ndest_hex320         14.9725952  0.0033083  4525.7   <2e-16 ***\ndest_hex353         15.7099056  0.0029423  5339.3   <2e-16 ***\ndest_hex436         15.2172186  0.0031247  4870.0   <2e-16 ***\ndest_hex502         14.0756164  0.0039775  3538.8   <2e-16 ***\ndest_hex534         15.4450762  0.0029718  5197.2   <2e-16 ***\ndest_hex555         15.3717207  0.0029960  5130.8   <2e-16 ***\ndest_hex571         13.3699501  0.0054046  2473.8   <2e-16 ***\ndest_hex573         15.1753239  0.0031573  4806.5   <2e-16 ***\ndest_hex585         14.9405503  0.0031799  4698.4   <2e-16 ***\ndest_hex586         14.5988568  0.0033771  4322.9   <2e-16 ***\ndest_hex604         12.5716888  0.0077609  1619.9   <2e-16 ***\ndest_hex637         15.2109373  0.0029121  5223.3   <2e-16 ***\ndest_hex641         14.6820846  0.0035950  4084.1   <2e-16 ***\ndest_hex648         15.1630753  0.0029909  5069.7   <2e-16 ***\ndest_hex653         12.2792388  0.0080796  1519.8   <2e-16 ***\ndest_hex654         12.0787963  0.0106822  1130.7   <2e-16 ***\ndest_hex669         13.5709789  0.0045530  2980.7   <2e-16 ***\ndest_hex670         12.2236724  0.0100574  1215.4   <2e-16 ***\ndest_hex671         13.6791912  0.0049611  2757.3   <2e-16 ***\ndest_hex687         13.5699649  0.0051121  2654.5   <2e-16 ***\ndest_hex700         14.0369937  0.0038171  3677.4   <2e-16 ***\ndest_hex703         12.4731018  0.0090521  1377.9   <2e-16 ***\ndest_hex708         14.6905583  0.0035533  4134.3   <2e-16 ***\ndest_hex714         13.3263600  0.0046447  2869.2   <2e-16 ***\ndest_hex728         12.9520496  0.0055195  2346.6   <2e-16 ***\ndest_hex729         13.0569804  0.0051194  2550.5   <2e-16 ***\ndest_hex746         12.4498343  0.0064366  1934.2   <2e-16 ***\ndest_hex749         13.0137069  0.0052744  2467.3   <2e-16 ***\ndest_hex759         12.8486962  0.0068972  1862.9   <2e-16 ***\ndest_hex763         13.9562761  0.0036371  3837.2   <2e-16 ***\ndest_hex774         15.8137709  0.0028765  5497.6   <2e-16 ***\ndest_hex777         12.4448725  0.0067389  1846.7   <2e-16 ***\ndest_hex790         13.8338836  0.0044044  3140.9   <2e-16 ***\ndest_hex798         12.6664993  0.0059075  2144.1   <2e-16 ***\ndest_hex812         13.5476274  0.0041017  3302.9   <2e-16 ***\ndest_hex813         13.2670216  0.0045271  2930.6   <2e-16 ***\ndest_hex824         15.4422190  0.0030558  5053.4   <2e-16 ***\ndest_hex826         11.4716377  0.0104402  1098.8   <2e-16 ***\ndest_hex847         12.2705512  0.0066992  1831.6   <2e-16 ***\ndest_hex859         12.7453554  0.0057393  2220.7   <2e-16 ***\ndest_hex861         13.9967600  0.0035393  3954.6   <2e-16 ***\ndest_hex863         12.6929857  0.0054658  2322.3   <2e-16 ***\ndest_hex880         12.6240145  0.0056812  2222.1   <2e-16 ***\ndest_hex903         12.7180230  0.0064867  1960.6   <2e-16 ***\ndest_hex908         14.5232131  0.0032700  4441.3   <2e-16 ***\ndest_hex910         13.8252253  0.0036233  3815.6   <2e-16 ***\ndest_hex928         12.1768536  0.0066697  1825.7   <2e-16 ***\ndest_hex940         15.5010622  0.0030384  5101.7   <2e-16 ***\ndest_hex943         14.3078874  0.0031504  4541.6   <2e-16 ***\ndest_hex946         12.8554629  0.0050960  2522.7   <2e-16 ***\ndest_hex973         14.5121918  0.0036582  3967.0   <2e-16 ***\ndest_hex976         12.4695948  0.0055963  2228.2   <2e-16 ***\ndest_hex977         14.4662452  0.0029488  4905.8   <2e-16 ***\ndest_hex982         13.6836623  0.0040228  3401.5   <2e-16 ***\ndest_hex987         15.1219639  0.0031244  4840.0   <2e-16 ***\ndest_hex988         15.7349248  0.0028844  5455.1   <2e-16 ***\ndest_hex993         12.5998584  0.0051454  2448.7   <2e-16 ***\ndest_hex1001        12.9910542  0.0055852  2326.0   <2e-16 ***\ndest_hex1008        13.5744996  0.0037961  3575.9   <2e-16 ***\ndest_hex1010        14.0257250  0.0031684  4426.7   <2e-16 ***\ndest_hex1011        14.7561971  0.0028091  5252.9   <2e-16 ***\ndest_hex1013        12.8069920  0.0051409  2491.2   <2e-16 ***\ndest_hex1014        12.9442119  0.0049960  2590.9   <2e-16 ***\ndest_hex1016        13.6612765  0.0040839  3345.2   <2e-16 ***\ndest_hex1025        14.4393532  0.0029040  4972.1   <2e-16 ***\ndest_hex1026        12.4686792  0.0052935  2355.5   <2e-16 ***\ndest_hex1028        13.7102119  0.0036018  3806.4   <2e-16 ***\ndest_hex1041        13.7093119  0.0035784  3831.1   <2e-16 ***\ndest_hex1042        12.9698280  0.0043805  2960.8   <2e-16 ***\ndest_hex1043        13.9016626  0.0032072  4334.6   <2e-16 ***\ndest_hex1046        14.5321582  0.0030085  4830.4   <2e-16 ***\ndest_hex1050        13.8563464  0.0039262  3529.2   <2e-16 ***\ndest_hex1058        13.7879597  0.0034034  4051.2   <2e-16 ***\ndest_hex1059        12.8675463  0.0044542  2888.9   <2e-16 ***\ndest_hex1060        14.1146988  0.0030647  4605.5   <2e-16 ***\ndest_hex1063        13.6069044  0.0038448  3539.0   <2e-16 ***\ndest_hex1064        14.8123763  0.0029483  5024.1   <2e-16 ***\ndest_hex1074        12.9609666  0.0046282  2800.4   <2e-16 ***\ndest_hex1076        14.3763986  0.0028790  4993.6   <2e-16 ***\ndest_hex1077        14.1746362  0.0030826  4598.3   <2e-16 ***\ndest_hex1082        15.1299082  0.0028885  5238.1   <2e-16 ***\ndest_hex1091        13.9289661  0.0033258  4188.1   <2e-16 ***\ndest_hex1092        14.2358288  0.0030046  4738.1   <2e-16 ***\ndest_hex1093        13.0249762  0.0042617  3056.3   <2e-16 ***\ndest_hex1123        10.7748731  0.0140069   769.3   <2e-16 ***\ndest_hex1125        13.2652079  0.0040434  3280.7   <2e-16 ***\ndest_hex1126        13.4739819  0.0037091  3632.7   <2e-16 ***\ndest_hex1127        13.7894760  0.0034640  3980.9   <2e-16 ***\ndest_hex1130        13.0377358  0.0048269  2701.1   <2e-16 ***\ndest_hex1140        12.1079109  0.0071186  1700.9   <2e-16 ***\ndest_hex1142        11.9105646  0.0069623  1710.7   <2e-16 ***\ndest_hex1143        12.0113085  0.0066645  1802.3   <2e-16 ***\ndest_hex1161        13.5959125  0.0037477  3627.8   <2e-16 ***\ndest_hex1162        13.5066578  0.0039349  3432.5   <2e-16 ***\ndest_hex1175        13.0352841  0.0045372  2873.0   <2e-16 ***\ndest_hex1176        13.4858368  0.0038033  3545.8   <2e-16 ***\ndest_hex1177        12.6663907  0.0052030  2434.4   <2e-16 ***\ndest_hex1179        15.2071895  0.0027177  5595.6   <2e-16 ***\ndest_hex1199        13.3384557  0.0045878  2907.4   <2e-16 ***\ndest_hex1200        12.2659210  0.0073341  1672.4   <2e-16 ***\ndest_hex1212        12.8699221  0.0050419  2552.6   <2e-16 ***\ndest_hex1216        12.6356194  0.0060237  2097.6   <2e-16 ***\ndest_hex1225        12.9119357  0.0048622  2655.6   <2e-16 ***\ndest_hex1226        14.1435771  0.0032347  4372.4   <2e-16 ***\ndest_hex1227        12.4285556  0.0057675  2154.9   <2e-16 ***\ndest_hex1233        12.2343326  0.0073944  1654.5   <2e-16 ***\ndest_hex1244        13.1341644  0.0044682  2939.5   <2e-16 ***\ndest_hex1246        14.2609782  0.0033749  4225.5   <2e-16 ***\ndest_hex1258        13.2016405  0.0044793  2947.3   <2e-16 ***\ndest_hex1259        14.6586848  0.0029335  4997.1   <2e-16 ***\ndest_hex1260        13.4397417  0.0039421  3409.3   <2e-16 ***\ndest_hex1265        12.6680307  0.0058791  2154.8   <2e-16 ***\ndest_hex1266        12.6543472  0.0060178  2102.8   <2e-16 ***\ndest_hex1280        14.8066930  0.0030490  4856.3   <2e-16 ***\ndest_hex1281        14.4776187  0.0032280  4485.0   <2e-16 ***\ndest_hex1282        15.1816805  0.0028317  5361.2   <2e-16 ***\ndest_hex1293        13.0206136  0.0047228  2757.0   <2e-16 ***\ndest_hex1314        13.0377732  0.0050679  2572.6   <2e-16 ***\ndest_hex1315        12.6910291  0.0057915  2191.3   <2e-16 ***\ndest_hex1316        15.1822355  0.0028684  5293.0   <2e-16 ***\ndest_hex1317        13.0726839  0.0054136  2414.8   <2e-16 ***\ndest_hex1325        14.0515889  0.0035259  3985.3   <2e-16 ***\ndest_hex1331        12.5273997  0.0062725  1997.2   <2e-16 ***\ndest_hex1332        12.6248250  0.0059806  2111.0   <2e-16 ***\ndest_hex1333        12.8805144  0.0056160  2293.5   <2e-16 ***\ndest_hex1343        13.5099219  0.0042028  3214.5   <2e-16 ***\ndest_hex1348        13.0379204  0.0050163  2599.1   <2e-16 ***\ndest_hex1349        12.8105077  0.0056926  2250.4   <2e-16 ***\ndest_hex1350        11.6063300  0.0106563  1089.2   <2e-16 ***\ndest_hex1365        12.9797287  0.0052155  2488.7   <2e-16 ***\ndest_hex1375        13.8450899  0.0038186  3625.7   <2e-16 ***\ndest_hex1381        13.1293352  0.0050023  2624.7   <2e-16 ***\ndest_hex1382        13.2025133  0.0049516  2666.3   <2e-16 ***\ndest_hex1398        13.1036741  0.0050645  2587.4   <2e-16 ***\ndest_hex1409        13.4986480  0.0043595  3096.4   <2e-16 ***\ndest_hex1414        11.9050818  0.0090139  1320.7   <2e-16 ***\ndest_hex1474        14.9720173  0.0030837  4855.2   <2e-16 ***\ndest_hex1475        13.7818416  0.0041211  3344.2   <2e-16 ***\ndest_hex1509        13.8022672  0.0041246  3346.3   <2e-16 ***\ndest_hex1526        15.5259412  0.0028624  5424.1   <2e-16 ***\ndest_hex1540        14.1764830  0.0037990  3731.6   <2e-16 ***\ndest_hex1544        15.1286571  0.0031506  4801.8   <2e-16 ***\ndest_hex1575        14.4904840  0.0035450  4087.6   <2e-16 ***\ndest_hex1576        14.6635515  0.0033931  4321.6   <2e-16 ***\ndest_hex1607        13.1868627  0.0054264  2430.1   <2e-16 ***\ndest_hex1624        13.0964724  0.0057861  2263.4   <2e-16 ***\ndest_hex1741        14.1043886  0.0043533  3240.0   <2e-16 ***\nlog(origin_hdb)     -0.2553741  0.0002400 -1064.0   <2e-16 ***\nlog(origin_offices)  0.1603779  0.0001098  1460.7   <2e-16 ***\nlog(origin_schools)  0.0488396  0.0001824   267.8   <2e-16 ***\nlog(distance)       -0.7977006  0.0002747 -2904.2   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 297060506  on 21598  degrees of freedom\nResidual deviance:  31833431  on 21442  degrees of freedom\nAIC: 31981277\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nModel results reveal that:\n\nWeekday evening peak period trips has a statistically significant relationship with all origin propulsive attributes\nAs with the origin-constrained model, the strongest -ve association is with distance (-0.7982436), asserting that as distance increases, the number of trips decreases.\nPervasiveness of offices and schools have +ve correlations to number of trips, while more residential properties recorded -ve correlation – this suggests that there is a higher propulsion to leave the origin from work or school rather than home."
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#doubly-constrained-sim",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#doubly-constrained-sim",
    "title": "Take-home Ex 2",
    "section": "6.7 Doubly-constrained SIM",
    "text": "6.7 Doubly-constrained SIM\nThis is an extension of the basic spatial interaction model that introduces constraints on both the origins and destinations of flows.\n\nModel BuildingModel Results\n\n\n\ndbcSIM <- glm(formula = trips ~ \n                origin_hex + \n                dest_hex +\n                log(distance),\n              family = poisson(link = \"log\"),\n              data = flow_attr,\n              na.action = na.exclude)\n\n\n\n\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = trips ~ origin_hex + dest_hex + log(distance), \n    family = poisson(link = \"log\"), data = flow_attr, na.action = na.exclude)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-229.662   -14.650    -5.366     3.767   251.861  \n\nCoefficients:\n                 Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)    13.0913666  0.0084100  1556.649  < 2e-16 ***\norigin_hex39    0.5642319  0.0063050    89.490  < 2e-16 ***\norigin_hex88    0.5883606  0.0062276    94.477  < 2e-16 ***\norigin_hex137   0.4265728  0.0063578    67.094  < 2e-16 ***\norigin_hex237   1.4966848  0.0054608   274.077  < 2e-16 ***\norigin_hex320   0.8955789  0.0056236   159.253  < 2e-16 ***\norigin_hex353   1.6122621  0.0053759   299.905  < 2e-16 ***\norigin_hex436   0.8466564  0.0056439   150.011  < 2e-16 ***\norigin_hex502  -0.6638253  0.0070779   -93.788  < 2e-16 ***\norigin_hex534   2.3397989  0.0052026   449.739  < 2e-16 ***\norigin_hex555   1.0235457  0.0055290   185.123  < 2e-16 ***\norigin_hex571  -1.7080631  0.0095763  -178.364  < 2e-16 ***\norigin_hex573   0.6164374  0.0057810   106.632  < 2e-16 ***\norigin_hex585   0.6626137  0.0056818   116.621  < 2e-16 ***\norigin_hex586  -0.0836836  0.0062702   -13.346  < 2e-16 ***\norigin_hex604  -1.5189815  0.0088099  -172.418  < 2e-16 ***\norigin_hex637   0.8915003  0.0055524   160.562  < 2e-16 ***\norigin_hex641   0.5590226  0.0058171    96.101  < 2e-16 ***\norigin_hex648   1.5709876  0.0053595   293.121  < 2e-16 ***\norigin_hex653  -1.4103372  0.0086543  -162.963  < 2e-16 ***\norigin_hex654  -2.8259038  0.0161305  -175.190  < 2e-16 ***\norigin_hex669  -1.0209615  0.0078576  -129.933  < 2e-16 ***\norigin_hex670  -2.8243286  0.0170384  -165.763  < 2e-16 ***\norigin_hex671  -1.2568951  0.0087240  -144.074  < 2e-16 ***\norigin_hex687  -1.4344641  0.0093248  -153.834  < 2e-16 ***\norigin_hex700   0.0277210  0.0061901     4.478 7.52e-06 ***\norigin_hex703  -1.5648439  0.0103681  -150.929  < 2e-16 ***\norigin_hex708   0.2597694  0.0059778    43.456  < 2e-16 ***\norigin_hex714   0.1689250  0.0060608    27.872  < 2e-16 ***\norigin_hex728   0.1244928  0.0062766    19.834  < 2e-16 ***\norigin_hex729   1.4981632  0.0053707   278.950  < 2e-16 ***\norigin_hex746   1.2546869  0.0054283   231.136  < 2e-16 ***\norigin_hex749  -0.2469139  0.0064835   -38.083  < 2e-16 ***\norigin_hex759  -0.2524856  0.0065647   -38.461  < 2e-16 ***\norigin_hex763   1.3862467  0.0053860   257.381  < 2e-16 ***\norigin_hex774   1.3036042  0.0054165   240.672  < 2e-16 ***\norigin_hex777   0.1602019  0.0062305    25.713  < 2e-16 ***\norigin_hex790  -0.8155777  0.0069925  -116.636  < 2e-16 ***\norigin_hex798  -0.9000220  0.0075713  -118.873  < 2e-16 ***\norigin_hex812   0.2723124  0.0059709    45.606  < 2e-16 ***\norigin_hex813  -0.4262031  0.0067184   -63.438  < 2e-16 ***\norigin_hex824   0.9072750  0.0055500   163.472  < 2e-16 ***\norigin_hex826   0.6843073  0.0057745   118.505  < 2e-16 ***\norigin_hex847  -0.9229907  0.0075496  -122.257  < 2e-16 ***\norigin_hex859  -1.1363383  0.0084714  -134.139  < 2e-16 ***\norigin_hex861   0.3355707  0.0059176    56.707  < 2e-16 ***\norigin_hex863  -0.9800962  0.0076526  -128.074  < 2e-16 ***\norigin_hex880  -0.5490957  0.0068478   -80.186  < 2e-16 ***\norigin_hex903  -0.7460364  0.0071856  -103.824  < 2e-16 ***\norigin_hex908   1.9631609  0.0052795   371.844  < 2e-16 ***\norigin_hex910   0.5321360  0.0057435    92.650  < 2e-16 ***\norigin_hex928  -0.3470483  0.0064857   -53.510  < 2e-16 ***\norigin_hex940   0.8193390  0.0056165   145.880  < 2e-16 ***\norigin_hex943   0.5719441  0.0057070   100.218  < 2e-16 ***\norigin_hex946  -0.6999576  0.0070053   -99.918  < 2e-16 ***\norigin_hex973  -0.1667584  0.0062805   -26.552  < 2e-16 ***\norigin_hex976  -0.6935922  0.0069464   -99.849  < 2e-16 ***\norigin_hex977   1.6842274  0.0052703   319.570  < 2e-16 ***\norigin_hex982   0.0405842  0.0060513     6.707 1.99e-11 ***\norigin_hex987   0.4957370  0.0057435    86.313  < 2e-16 ***\norigin_hex988   1.1363384  0.0054672   207.848  < 2e-16 ***\norigin_hex993  -0.6849547  0.0068307  -100.277  < 2e-16 ***\norigin_hex1001 -1.3745982  0.0085069  -161.587  < 2e-16 ***\norigin_hex1008  1.4318752  0.0053546   267.409  < 2e-16 ***\norigin_hex1010  1.0425800  0.0054183   192.418  < 2e-16 ***\norigin_hex1011  1.4633404  0.0053113   275.512  < 2e-16 ***\norigin_hex1013 -0.8025222  0.0070084  -114.508  < 2e-16 ***\norigin_hex1014 -0.4205600  0.0064713   -64.989  < 2e-16 ***\norigin_hex1016 -1.0038818  0.0074729  -134.336  < 2e-16 ***\norigin_hex1025  1.7044251  0.0052788   322.884  < 2e-16 ***\norigin_hex1026 -0.6940548  0.0068054  -101.987  < 2e-16 ***\norigin_hex1028  1.3375627  0.0053308   250.912  < 2e-16 ***\norigin_hex1041  1.8424202  0.0052582   350.388  < 2e-16 ***\norigin_hex1042  0.4347072  0.0057164    76.046  < 2e-16 ***\norigin_hex1043  1.0057671  0.0054205   185.548  < 2e-16 ***\norigin_hex1046  0.9196896  0.0054774   167.906  < 2e-16 ***\norigin_hex1050  0.8862781  0.0055097   160.858  < 2e-16 ***\norigin_hex1058  2.4572417  0.0051680   475.469  < 2e-16 ***\norigin_hex1059  0.3020139  0.0057664    52.375  < 2e-16 ***\norigin_hex1060  1.0098044  0.0054168   186.421  < 2e-16 ***\norigin_hex1063 -0.2158337  0.0061786   -34.932  < 2e-16 ***\norigin_hex1064  0.9464905  0.0054701   173.030  < 2e-16 ***\norigin_hex1074  1.8367952  0.0052620   349.067  < 2e-16 ***\norigin_hex1076  1.5244492  0.0052882   288.273  < 2e-16 ***\norigin_hex1077  0.5679687  0.0056119   101.207  < 2e-16 ***\norigin_hex1082  0.9969216  0.0054708   182.226  < 2e-16 ***\norigin_hex1091  1.1357081  0.0054398   208.778  < 2e-16 ***\norigin_hex1092  1.6033152  0.0052827   303.504  < 2e-16 ***\norigin_hex1093 -0.6953480  0.0067361  -103.227  < 2e-16 ***\norigin_hex1123 -1.8255990  0.0107667  -169.560  < 2e-16 ***\norigin_hex1125  0.9184157  0.0054947   167.146  < 2e-16 ***\norigin_hex1126  0.3231243  0.0057732    55.970  < 2e-16 ***\norigin_hex1127  0.5812092  0.0056220   103.380  < 2e-16 ***\norigin_hex1130 -0.7995859  0.0069269  -115.432  < 2e-16 ***\norigin_hex1140 -1.4525696  0.0092008  -157.875  < 2e-16 ***\norigin_hex1142 -0.6592344  0.0068384   -96.402  < 2e-16 ***\norigin_hex1143 -0.5033756  0.0065381   -76.991  < 2e-16 ***\norigin_hex1161  0.1061669  0.0059217    17.928  < 2e-16 ***\norigin_hex1162 -0.2352824  0.0061615   -38.186  < 2e-16 ***\norigin_hex1175 -0.4498091  0.0066292   -67.853  < 2e-16 ***\norigin_hex1176 -0.4831760  0.0065754   -73.482  < 2e-16 ***\norigin_hex1177 -1.0400228  0.0074128  -140.301  < 2e-16 ***\norigin_hex1179  1.1650199  0.0053979   215.828  < 2e-16 ***\norigin_hex1199 -1.0532806  0.0075592  -139.338  < 2e-16 ***\norigin_hex1200 -2.2763550  0.0119127  -191.087  < 2e-16 ***\norigin_hex1212 -1.1317545  0.0074663  -151.583  < 2e-16 ***\norigin_hex1216 -1.8578205  0.0097887  -189.793  < 2e-16 ***\norigin_hex1225 -0.6667848  0.0069371   -96.119  < 2e-16 ***\norigin_hex1226  0.2826910  0.0058132    48.629  < 2e-16 ***\norigin_hex1227 -1.0604812  0.0074432  -142.477  < 2e-16 ***\norigin_hex1233 -2.3785807  0.0124226  -191.472  < 2e-16 ***\norigin_hex1244  1.0370773  0.0054276   191.075  < 2e-16 ***\norigin_hex1246  0.1337962  0.0059318    22.556  < 2e-16 ***\norigin_hex1258 -0.5986330  0.0068908   -86.875  < 2e-16 ***\norigin_hex1259  1.4619383  0.0053276   274.406  < 2e-16 ***\norigin_hex1260  0.4523398  0.0057015    79.336  < 2e-16 ***\norigin_hex1265 -1.7461350  0.0089076  -196.028  < 2e-16 ***\norigin_hex1266 -1.6914073  0.0089663  -188.640  < 2e-16 ***\norigin_hex1280  0.3532188  0.0057941    60.962  < 2e-16 ***\norigin_hex1281 -0.3297471  0.0063424   -51.991  < 2e-16 ***\norigin_hex1282  0.9085260  0.0055032   165.090  < 2e-16 ***\norigin_hex1293 -0.0547005  0.0061082    -8.955  < 2e-16 ***\norigin_hex1314 -1.5175325  0.0084759  -179.041  < 2e-16 ***\norigin_hex1315 -1.7980359  0.0092985  -193.369  < 2e-16 ***\norigin_hex1316  0.9000275  0.0055387   162.498  < 2e-16 ***\norigin_hex1317 -1.3266205  0.0085158  -155.783  < 2e-16 ***\norigin_hex1325 -0.0658630  0.0062194   -10.590  < 2e-16 ***\norigin_hex1331 -2.3895038  0.0117770  -202.896  < 2e-16 ***\norigin_hex1332 -1.9783692  0.0100251  -197.341  < 2e-16 ***\norigin_hex1333 -1.4947833  0.0086411  -172.986  < 2e-16 ***\norigin_hex1343  0.1557659  0.0059790    26.052  < 2e-16 ***\norigin_hex1348 -1.7256753  0.0091934  -187.709  < 2e-16 ***\norigin_hex1349 -1.3686042  0.0082142  -166.615  < 2e-16 ***\norigin_hex1350 -2.1602979  0.0116514  -185.410  < 2e-16 ***\norigin_hex1365 -1.6465430  0.0091071  -180.798  < 2e-16 ***\norigin_hex1375 -0.4354431  0.0067172   -64.825  < 2e-16 ***\norigin_hex1381 -1.3575669  0.0083662  -162.267  < 2e-16 ***\norigin_hex1382 -1.0002776  0.0076822  -130.207  < 2e-16 ***\norigin_hex1398 -1.4757313  0.0089006  -165.801  < 2e-16 ***\norigin_hex1409 -0.8365764  0.0073641  -113.602  < 2e-16 ***\norigin_hex1414 -2.3786877  0.0131264  -181.214  < 2e-16 ***\norigin_hex1474  0.9410580  0.0055852   168.491  < 2e-16 ***\norigin_hex1475 -1.1332293  0.0080630  -140.546  < 2e-16 ***\norigin_hex1509 -0.7336266  0.0070488  -104.078  < 2e-16 ***\norigin_hex1526  1.3999331  0.0053923   259.618  < 2e-16 ***\norigin_hex1540  0.4401952  0.0059140    74.432  < 2e-16 ***\norigin_hex1544  0.4986567  0.0058609    85.081  < 2e-16 ***\norigin_hex1575  0.1588065  0.0060601    26.205  < 2e-16 ***\norigin_hex1576 -0.1689128  0.0064144   -26.334  < 2e-16 ***\norigin_hex1607  1.1175386  0.0055249   202.273  < 2e-16 ***\norigin_hex1624 -0.3471916  0.0068161   -50.937  < 2e-16 ***\norigin_hex1741  0.8389002  0.0058361   143.743  < 2e-16 ***\ndest_hex39     -0.3468708  0.0094163   -36.837  < 2e-16 ***\ndest_hex88     -0.8314518  0.0108803   -76.418  < 2e-16 ***\ndest_hex137    -1.1277465  0.0119354   -94.488  < 2e-16 ***\ndest_hex237     0.3806882  0.0076289    49.900  < 2e-16 ***\ndest_hex320     1.6986850  0.0064337   264.029  < 2e-16 ***\ndest_hex353     2.5175418  0.0062469   403.007  < 2e-16 ***\ndest_hex436     2.0093474  0.0063334   317.261  < 2e-16 ***\ndest_hex502     0.7952085  0.0068075   116.813  < 2e-16 ***\ndest_hex534     2.3498157  0.0062668   374.962  < 2e-16 ***\ndest_hex555     2.3108372  0.0062848   367.690  < 2e-16 ***\ndest_hex571     0.0478647  0.0077514     6.175 6.62e-10 ***\ndest_hex573     2.1108765  0.0063465   332.606  < 2e-16 ***\ndest_hex585     1.7508771  0.0063780   274.518  < 2e-16 ***\ndest_hex586     1.4680433  0.0064859   226.344  < 2e-16 ***\ndest_hex604    -0.7700830  0.0095549   -80.596  < 2e-16 ***\ndest_hex637     2.2374057  0.0062823   356.142  < 2e-16 ***\ndest_hex641     1.5874386  0.0065582   242.052  < 2e-16 ***\ndest_hex648     2.0107643  0.0062988   319.231  < 2e-16 ***\ndest_hex653    -0.8462923  0.0098037   -86.323  < 2e-16 ***\ndest_hex654    -1.2626743  0.0120701  -104.612  < 2e-16 ***\ndest_hex669     0.4636665  0.0071735    64.636  < 2e-16 ***\ndest_hex670    -1.1348935  0.0115195   -98.520  < 2e-16 ***\ndest_hex671     0.4035530  0.0074593    54.101  < 2e-16 ***\ndest_hex687     0.2752735  0.0075636    36.394  < 2e-16 ***\ndest_hex700     0.8945322  0.0067335   132.847  < 2e-16 ***\ndest_hex703    -0.9211151  0.0106357   -86.606  < 2e-16 ***\ndest_hex708     1.5699519  0.0065490   239.724  < 2e-16 ***\ndest_hex714     0.0975154  0.0072498    13.451  < 2e-16 ***\ndest_hex728    -0.2765618  0.0078345   -35.301  < 2e-16 ***\ndest_hex729    -0.1501514  0.0075723   -19.829  < 2e-16 ***\ndest_hex746    -0.8121345  0.0085278   -95.234  < 2e-16 ***\ndest_hex749    -0.1088000  0.0076646   -14.195  < 2e-16 ***\ndest_hex759    -0.2793742  0.0088105   -31.709  < 2e-16 ***\ndest_hex763     0.7849966  0.0066716   117.663  < 2e-16 ***\ndest_hex774     2.7833739  0.0062217   447.366  < 2e-16 ***\ndest_hex777    -0.7695847  0.0087386   -88.067  < 2e-16 ***\ndest_hex790     0.6455073  0.0070633    91.389  < 2e-16 ***\ndest_hex798    -0.4504138  0.0081222   -55.455  < 2e-16 ***\ndest_hex812     0.3502090  0.0069326    50.517  < 2e-16 ***\ndest_hex813     0.0895837  0.0071927    12.455  < 2e-16 ***\ndest_hex824     2.3522382  0.0062958   373.620  < 2e-16 ***\ndest_hex826    -1.7474047  0.0118347  -147.651  < 2e-16 ***\ndest_hex847    -0.8252480  0.0087299   -94.531  < 2e-16 ***\ndest_hex859    -0.5275015  0.0080075   -65.876  < 2e-16 ***\ndest_hex861     0.8097408  0.0066175   122.364  < 2e-16 ***\ndest_hex863    -0.4116977  0.0078284   -52.590  < 2e-16 ***\ndest_hex880    -0.4769136  0.0079756   -59.796  < 2e-16 ***\ndest_hex903    -0.3652634  0.0085176   -42.883  < 2e-16 ***\ndest_hex908     1.3496211  0.0064557   209.059  < 2e-16 ***\ndest_hex910     0.6136111  0.0066772    91.896  < 2e-16 ***\ndest_hex928    -1.0389544  0.0087153  -119.211  < 2e-16 ***\ndest_hex940     2.4532057  0.0062839   390.394  < 2e-16 ***\ndest_hex943     1.0559990  0.0064433   163.891  < 2e-16 ***\ndest_hex946    -0.2838397  0.0075695   -37.498  < 2e-16 ***\ndest_hex973     1.4158009  0.0066138   214.066  < 2e-16 ***\ndest_hex976    -0.8268750  0.0079487  -104.026  < 2e-16 ***\ndest_hex977     1.2761932  0.0063654   200.488  < 2e-16 ***\ndest_hex982     0.6297387  0.0068664    91.713  < 2e-16 ***\ndest_hex987     2.0655655  0.0063398   325.809  < 2e-16 ***\ndest_hex988     2.7393000  0.0062240   440.118  < 2e-16 ***\ndest_hex993    -0.7007766  0.0076485   -91.623  < 2e-16 ***\ndest_hex1001   -0.0972404  0.0078674   -12.360  < 2e-16 ***\ndest_hex1008    0.2100492  0.0068002    30.889  < 2e-16 ***\ndest_hex1010    0.7715518  0.0064879   118.921  < 2e-16 ***\ndest_hex1011    1.5708517  0.0062960   249.501  < 2e-16 ***\ndest_hex1013   -0.3098188  0.0076039   -40.745  < 2e-16 ***\ndest_hex1014   -0.1270855  0.0074963   -16.953  < 2e-16 ***\ndest_hex1016    0.6074577  0.0069025    88.005  < 2e-16 ***\ndest_hex1025    1.0713796  0.0063712   168.160  < 2e-16 ***\ndest_hex1026   -0.8452333  0.0077602  -108.918  < 2e-16 ***\ndest_hex1028    0.5430258  0.0066821    81.266  < 2e-16 ***\ndest_hex1041    0.2968982  0.0066961    44.339  < 2e-16 ***\ndest_hex1042   -0.4252940  0.0071703   -59.313  < 2e-16 ***\ndest_hex1043    0.6534024  0.0065170   100.261  < 2e-16 ***\ndest_hex1046    1.4921105  0.0063647   234.437  < 2e-16 ***\ndest_hex1050    0.8545220  0.0067996   125.673  < 2e-16 ***\ndest_hex1058    0.4789165  0.0066145    72.404  < 2e-16 ***\ndest_hex1059   -0.4388871  0.0072187   -60.798  < 2e-16 ***\ndest_hex1060    0.9091748  0.0064409   141.156  < 2e-16 ***\ndest_hex1063    0.5297147  0.0067955    77.951  < 2e-16 ***\ndest_hex1064    1.8080197  0.0063165   286.240  < 2e-16 ***\ndest_hex1074   -0.4007732  0.0073085   -54.836  < 2e-16 ***\ndest_hex1076    1.1639901  0.0063608   182.994  < 2e-16 ***\ndest_hex1077    1.0079190  0.0064353   156.624  < 2e-16 ***\ndest_hex1082    2.1441201  0.0062704   341.945  < 2e-16 ***\ndest_hex1091    0.5566110  0.0065641    84.796  < 2e-16 ***\ndest_hex1092    1.0024906  0.0064127   156.328  < 2e-16 ***\ndest_hex1093   -0.1861516  0.0070891   -26.259  < 2e-16 ***\ndest_hex1123   -2.5642008  0.0150885  -169.944  < 2e-16 ***\ndest_hex1125    0.0628611  0.0069481     9.047  < 2e-16 ***\ndest_hex1126    0.3569138  0.0067615    52.786  < 2e-16 ***\ndest_hex1127    0.7236400  0.0066133   109.422  < 2e-16 ***\ndest_hex1130   -0.0146367  0.0073837    -1.982 0.047446 *  \ndest_hex1140   -1.1569765  0.0090647  -127.635  < 2e-16 ***\ndest_hex1142   -1.2491134  0.0089665  -139.309  < 2e-16 ***\ndest_hex1143   -1.0884172  0.0087340  -124.618  < 2e-16 ***\ndest_hex1161    0.5773382  0.0067553    85.465  < 2e-16 ***\ndest_hex1162    0.4690120  0.0068526    68.443  < 2e-16 ***\ndest_hex1175   -0.0734752  0.0072275   -10.166  < 2e-16 ***\ndest_hex1176    0.4381898  0.0067970    64.468  < 2e-16 ***\ndest_hex1177   -0.3853478  0.0076661   -50.267  < 2e-16 ***\ndest_hex1179    2.2630778  0.0062306   363.221  < 2e-16 ***\ndest_hex1199    0.4025798  0.0072150    55.798  < 2e-16 ***\ndest_hex1200   -0.6762771  0.0092053   -73.466  < 2e-16 ***\ndest_hex1212   -0.1643054  0.0075384   -21.796  < 2e-16 ***\ndest_hex1216   -0.2727566  0.0082131   -33.210  < 2e-16 ***\ndest_hex1225   -0.1422108  0.0074263   -19.150  < 2e-16 ***\ndest_hex1226    1.0987822  0.0064872   169.377  < 2e-16 ***\ndest_hex1227   -0.6016470  0.0080614   -74.633  < 2e-16 ***\ndest_hex1233   -0.6807825  0.0092629   -73.495  < 2e-16 ***\ndest_hex1244    0.1669689  0.0071766    23.266  < 2e-16 ***\ndest_hex1246    1.2791763  0.0065173   196.275  < 2e-16 ***\ndest_hex1258    0.1541270  0.0071715    21.492  < 2e-16 ***\ndest_hex1259    1.7005042  0.0063362   268.381  < 2e-16 ***\ndest_hex1260    0.4606862  0.0068740    67.019  < 2e-16 ***\ndest_hex1265   -0.2885851  0.0081072   -35.596  < 2e-16 ***\ndest_hex1266   -0.2813900  0.0082108   -34.271  < 2e-16 ***\ndest_hex1280    1.8756925  0.0063478   295.487  < 2e-16 ***\ndest_hex1281    1.5692311  0.0064477   243.380  < 2e-16 ***\ndest_hex1282    2.3574545  0.0062648   376.304  < 2e-16 ***\ndest_hex1293    0.0279906  0.0073340     3.817 0.000135 ***\ndest_hex1314    0.1224465  0.0075386    16.243  < 2e-16 ***\ndest_hex1315   -0.2097570  0.0080537   -26.045  < 2e-16 ***\ndest_hex1316    2.3820569  0.0062761   379.545  < 2e-16 ***\ndest_hex1317    0.1707555  0.0077556    22.017  < 2e-16 ***\ndest_hex1325    1.0387308  0.0066054   157.255  < 2e-16 ***\ndest_hex1331   -0.3679158  0.0083980   -43.810  < 2e-16 ***\ndest_hex1332   -0.2591731  0.0081912   -31.641  < 2e-16 ***\ndest_hex1333   -0.0107700  0.0079167    -1.360 0.173700    \ndest_hex1343    0.5209893  0.0069866    74.570  < 2e-16 ***\ndest_hex1348    0.2024922  0.0075152    26.944  < 2e-16 ***\ndest_hex1349   -0.0792529  0.0079755    -9.937  < 2e-16 ***\ndest_hex1350   -1.3052145  0.0120194  -108.593  < 2e-16 ***\ndest_hex1365    0.1470032  0.0076507    19.214  < 2e-16 ***\ndest_hex1375    0.8582576  0.0067580   127.000  < 2e-16 ***\ndest_hex1381    0.2779144  0.0074974    37.068  < 2e-16 ***\ndest_hex1382    0.3647618  0.0074577    48.911  < 2e-16 ***\ndest_hex1398    0.2858935  0.0075386    37.924  < 2e-16 ***\ndest_hex1409    0.5060090  0.0070709    71.562  < 2e-16 ***\ndest_hex1414   -1.0058322  0.0105913   -94.968  < 2e-16 ***\ndest_hex1474    1.9899961  0.0063475   313.511  < 2e-16 ***\ndest_hex1475    0.7436149  0.0069189   107.476  < 2e-16 ***\ndest_hex1509    0.7091102  0.0069273   102.365  < 2e-16 ***\ndest_hex1526    2.5601999  0.0062439   410.032  < 2e-16 ***\ndest_hex1540    1.1513733  0.0067128   171.520  < 2e-16 ***\ndest_hex1544    2.0955559  0.0063570   329.643  < 2e-16 ***\ndest_hex1575    1.3892479  0.0065812   211.094  < 2e-16 ***\ndest_hex1576    1.6025497  0.0064956   246.714  < 2e-16 ***\ndest_hex1607    0.1885555  0.0077543    24.316  < 2e-16 ***\ndest_hex1624   -0.0443418  0.0080126    -5.534 3.13e-08 ***\ndest_hex1741    1.1029381  0.0069943   157.692  < 2e-16 ***\nlog(distance)  -0.8677553  0.0002854 -3040.280  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 57961929  on 21597  degrees of freedom\nResidual deviance: 14941183  on 21294  degrees of freedom\nAIC: 15089325\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nModel results reveal that:\n\nThe difference between null deviance and residual deviance is substantial, suggesting that the model predictor variable (distance) provides valuable information in explaining the variability in number of weekday evening peak hour train trips\nThis is substantiated by the origin and destination constrained model results, where higher number of trips are related to decreasing distances."
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics--r-squared",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics--r-squared",
    "title": "Take-home Ex 2",
    "section": "6.8 Model Diagnostics- R-squared",
    "text": "6.8 Model Diagnostics- R-squared\nThe goodness-of-fit test using \\(R^2\\) values is used to evaluate how well the models explain variations in number of O-D trips.\n\nDefine function for R2 calculationCalculate R2 for each model\n\n\n\n# Function to calculate R2 value\n\ncalc_r2 <- function(observed, estimated){\n  r <- cor(observed, estimated)\n  R2 <- r^2\n  R2\n}\n\n\n\n\ncalc_r2(originSIM$data$trips, originSIM$fitted.values)\n\n[1] 0.2746338\n\n\n\ncalc_r2(destSIM$data$trips, destSIM$fitted.values)\n\n[1] 0.2508897\n\n\n\ncalc_r2(dbcSIM$data$trips, dbcSIM$fitted.values)\n\n[1] 0.615503\n\n\n\n\n\nThe \\(R^2\\) Values for each model are summarized below:\n\n\n\nSIM\n\\(R^2\\)\n\n\n\n\nOrigin-constrained\n0.275\n\n\nDestination-constrained\n0.251\n\n\nDoubly-constrained\n0.615\n\n\n\nWe see that there is a marked improvement in \\(R^2\\) value in the doubly-constrained SIM compared to other singluar constrained models. This means that it accounts for ~62% of variation in number of trips."
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics--rmse",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics--rmse",
    "title": "Take-home Ex 2",
    "section": "6.9 Model Diagnostics- RMSE",
    "text": "6.9 Model Diagnostics- RMSE\n\nall_models <- list(\n  origin_constrained = originSIM,\n  destination_constrained = destSIM,\n  doubly_constrained = dbcSIM)"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#compute-rmse",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#compute-rmse",
    "title": "Take-home Ex 2",
    "section": "6.10 Compute RMSE",
    "text": "6.10 Compute RMSE\n\ncompare_performance(all_models,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                    | Model |     RMSE\n------------------------------------------\norigin_constrained      |   glm | 2238.430\ndestination_constrained |   glm | 2266.699\ndoubly_constrained      |   glm | 1624.140"
  },
  {
    "objectID": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics---fitted-vs-observed-values",
    "href": "Take-home_Ex/the2/Take-home_ex2.html#model-diagnostics---fitted-vs-observed-values",
    "title": "Take-home Ex 2",
    "section": "6.11 Model Diagnostics - Fitted vs Observed values",
    "text": "6.11 Model Diagnostics - Fitted vs Observed values\n\noriginSIM_fitted <- as.data.frame(originSIM$fitted.values) %>%\n  round(digits = 0)\n\ndestSIM_fitted <- as.data.frame(destSIM$fitted.values) %>%\n  round(digits = 0)\n\ndbcSIM_fitted <- as.data.frame(dbcSIM$fitted.values) %>%\n  round(digits = 0)\n\n\nflow_attr <- flow_attr %>%\n  cbind(\n    originSIM_fitted,\n    destSIM_fitted,\n    dbcSIM_fitted\n  ) %>%\n  rename(\n    orc_trips = originSIM.fitted.values,\n    destc_trips = destSIM.fitted.values,\n    dbc_trips = dbcSIM.fitted.values\n  )\n\n\n\ncode block\np_orc <- ggplot(\n          data = flow_attr,\n          aes(x = orc_trips,\n              y = trips)\n  ) +\n  geom_point(\n    size = flow_attr$trips/10000,\n    alpha = .6\n  ) +\n  xlim(0, 50000) +\n  geom_smooth(method = lm)\n\np_destc <- ggplot(\n            data = flow_attr,\n            aes(x = destc_trips,\n                y = trips)\n  ) +\n  geom_point(\n    size = flow_attr$trips/10000,\n    color = \"#4d5887\",\n    alpha = .6\n  ) +\n  xlim(0, 50000) +\n  geom_smooth(method = lm) +\n  theme(axis.text.y = element_blank())\n\np_dbc <- ggplot(\n          data = flow_attr,\n          aes(x = dbc_trips,\n              y = trips)\n  ) +\n  geom_point(\n    size = flow_attr$trips/10000,\n    color = \"#6D435A\",\n    alpha = .6\n  ) +\n  xlim(0, 50000) +\n  geom_smooth(method = lm) +\n  theme(axis.text.y = element_blank())\n\np_orc + p_destc + p_dbc\n\n\n\n\n\nModel Fit:\nSpread and Linearity: A well-fitting model should exhibit a tight and linear relationship between the fitted and observed values. A scattered or nonlinear pattern may indicate that the model is not capturing the underlying structure of the data. Consistency Across Models:\nOverlap: If you have fitted values from multiple models on the same scatterplot, you can observe how well the models overlap. A model with better predictive accuracy should generally have points closer to the diagonal line (perfect fit line) and may outperform other models. Residual Patterns:\nResidual Distribution: Look for patterns in the residuals (the vertical distances between observed and fitted values). Systematic patterns in residuals may suggest that the model is missing some important information or has a systematic bias. Heteroscedasticity: Check for consistent spread of residuals across the range of observed values. If the spread varies, it may indicate heteroscedasticity, suggesting that the variability of the errors is not constant. Outliers:\nIdentification: Outliers, influential points, or data points with high leverage can be visually identified. Models that handle outliers better might show a more concentrated cluster of points around the diagonal. Model Comparison:\nRelative Performance: Comparing scatterplots for different models side by side allows you to visually assess which model provides a better fit to the data. The model with a tighter fit and less spread of points around the diagonal line may be considered better. Model Assumptions:\nLinearity: Check if the relationship between the fitted and observed values is linear. If it is not, it may suggest that the model is misspecified or that there are non-linear relationships in the data that the model does not capture. Residuals vs. Fitted Plot:\nPattern Checking: Consider also creating a residuals vs. fitted plot for each model. This plot can reveal more details about the distribution and patterns of residuals, helping to diagnose issues with the model."
  }
]